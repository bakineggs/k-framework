fmod SANITY-CHECKS is including  META-K-LEAST-SORTS .

 var Q Q' : Qid . var T T' T'' : Type . var Tl Tl' : TypeList .  var S : Sort .
 var N : Nat .
 var M Flat : Module .
 vars Mbs Mbs' : MembAxSet . var Mb : MembAx .
 var Eqs Eqs' : EquationSet . var Eq : Equation .
 var Rls Rls' : RuleSet . var Rl : Rule .
 var Trms Trms' : TermList . vars T1 T2 Trm Trm' : Term .  
 var Cond Cond' Cond'' : Condition .
 var C : Constant . var V : Variable .
 vars OPDS OPDS' Ops : OpDeclSet . var Op Op' : OpDecl .
 var SSDS : SubsortDeclSet . var SSD : SubsortDecl .
 var AS AS' : AttrSet .

 op sanityChecks : Module Module ~> Module .
 eq sanityChecks(M, Flat)
  = sanityCheckModule(M, Flat) .

 op sanityCheckModule : Module  Module ~> Module .
 eq sanityCheckModule(M, Flat)
  = sanityCheckModuleMbs(M, Flat, sanityCheckMbs(Flat, getMbs(M))) .
 op sanityCheckModuleMbs : Module  Module Bool ~> Module .
 op sanityCheckModuleEqs : Module  Module Bool ~> Module .
 op sanityCheckModuleRls : Module  Bool ~> Module .
 eq sanityCheckModuleMbs(M, Flat, errorMb(Trm, T, Mb))
  = if labelled(Mb) then errorM(Trm, T, getLabel(Mb)) else errorMMb(Trm, T, Mb) fi .
 eq sanityCheckModuleMbs(M, Flat, true)
  = sanityCheckModuleEqs(M, Flat, sanityCheckEqs(Flat, getEqs(M))) .
 eq sanityCheckModuleEqs(M, Flat, errorEq(Trm, T, Eq))
  = if labelled(Eq) then errorM(Trm, T, getLabel(Eq)) else errorMEq(Trm, T, Eq) fi .
 eq sanityCheckModuleEqs(M, Flat, true)
  = sanityCheckModuleRls(M, sanityCheckRls(Flat, getRls(M))) .
 eq sanityCheckModuleRls(M, errorRl(Trm, T, Rl))
  = if labelled(Rl) then errorM(Trm, T, getLabel(Rl)) else errorMRl(Trm, T, Rl) fi .
 eq sanityCheckModuleRls(M, true)
  = M .

 op error : Term Type -> [Bool] .
 op errorRl : Term Type Rule -> [Bool] .
 op errorEq : Term Type Equation -> [Bool] .
 op errorMb : Term Type MembAx -> [Bool] .
 op errorM : Term Type Qid -> [Module] .
 op errorMRl : Term Type Rule -> [Module] .
 op errorMEq : Term Type Equation -> [Module] .
 op errorMMb : Term Type MembAx -> [Module] .

 op sanityCheckMbs : Module MembAxSet ~> Bool .
 eq sanityCheckMbs(M, Mbs Mb)
  =  sanityCheckMbs(M, Mbs, sanityCheckMb(Mb, M)) .
 eq sanityCheckMbs(M, none) = true .

 op sanityCheckMbs : Module MembAxSet Bool ~> Bool .
 eq sanityCheckMbs(M, Mbs, true) 
  = sanityCheckMbs(M, Mbs) .
 eq sanityCheckMbs(M, Mbs, errorMb(Trm, T, Mb)) =  errorMb(Trm, T, Mb) .

 op sanityCheckMb : MembAx Module ~> Bool .
 op sanityCheckMb : MembAx Module MembAx ~> Bool .
 op sanityCheckMb : Bool MembAx ~> Bool .
 op sanityCheckMb : Bool Module Condition MembAx ~> Bool .
 eq sanityCheckMb(Mb, M) = sanityCheckMb(Mb, M, Mb) .
 eq sanityCheckMb((mb Trm : T [AS] .), M, Mb)
  = sanityCheckMb(sanityCheckT(Trm,M), Mb) .
 eq sanityCheckMb(true, Mb) = true .
 eq sanityCheckMb(error(Trm,T), Mb)
  = errorMb(Trm, T, Mb) .
 eq sanityCheckMb((cmb Trm : T if Cond [AS] .), M, Mb)
  = sanityCheckMb(sanityCheckT(Trm, M), M, Cond, Mb) .
 eq sanityCheckMb(error(Trm, T), M, Cond, Mb) 
  = errorMb(Trm, T, Mb) .
 eq sanityCheckMb(true, M, Cond, Mb) 
  = sanityCheckMb(sanityCheckCond(Cond, M), Mb) .

 op sanityCheckEqs : Module EquationSet ~> Bool .
 eq sanityCheckEqs(M, none) = true .
 eq sanityCheckEqs(M, Eqs Eq)
  =  sanityCheckEqs(M, Eqs, sanityCheckEq(Eq, M)) .

 op sanityCheckEqs : Module EquationSet Bool ~> Bool .
 eq sanityCheckEqs(M, Eqs, true) 
  = sanityCheckEqs(M, Eqs) .
 eq sanityCheckEqs(M, Eqs, errorEq(Trm, T, Eq)) =  errorEq(Trm, T, Eq) .

 op sanityCheckEq : Equation Module ~> Bool .
 op sanityCheckEq : Equation Module Equation ~> Bool .
 op sanityCheckEq : Bool Module Condition Equation ~> Bool .
 op sanityCheckEq : Bool Equation ~> Bool .
 eq sanityCheckEq(Eq, M) = sanityCheckEq(Eq, M, Eq) .
 eq sanityCheckEq((eq T1 = T2 [AS] .), M, Eq)
  = sanityCheckEq(sanityCheckTs((T1,T2),M), Eq) .
 eq sanityCheckEq(true, Eq) = true .
 eq sanityCheckEq(error(Trm,T), Eq)
  = errorEq(Trm, T, Eq) .
 eq sanityCheckEq((ceq T1 = T2 if Cond [AS] .), M, Eq)
  = sanityCheckEq(sanityCheckTs((T1,T2),M), M, Cond, Eq) .
 eq sanityCheckEq(error(Trm, T), M, Cond, Eq) 
  = errorEq(Trm, T, Eq) .
 eq sanityCheckEq(true, M, Cond, Eq) 
  = sanityCheckEq(sanityCheckCond(Cond, M), Eq) .

 op sanityCheckRls : Module RuleSet ~> Bool .
 eq sanityCheckRls(M, none) = true .
 eq sanityCheckRls(M, Rls Rl)
  =  sanityCheckRls(M, Rls, sanityCheckRl(Rl, M)) .

 op sanityCheckRls : Module RuleSet Bool ~> Bool .
 eq sanityCheckRls(M, Rls, true) = sanityCheckRls(M, Rls) .
 eq sanityCheckRls(M, Rls, errorRl(Trm, T, Rl)) =  errorRl(Trm, T, Rl) .

 op sanityCheckRl : Rule Module ~> Bool .
 op sanityCheckRl : Rule Module Rule ~> Bool .
 op sanityCheckRl : Bool Module Condition Rule ~> Bool .
 op sanityCheckRl : Bool Rule ~> Bool .
 eq sanityCheckRl(Rl, M) = sanityCheckRl(Rl, M, Rl) .
 eq sanityCheckRl((rl T1 => T2 [AS] .), M, Rl)
  = sanityCheckRl(sanityCheckTs((T1,T2),M), Rl) .
 eq sanityCheckRl(true, Rl) = true .
 eq sanityCheckRl(error(Trm,T), Rl)
  = errorRl(Trm, T, Rl) .
 eq sanityCheckRl((crl T1 => T2 if Cond [AS] .), M, Rl)
  = sanityCheckRl(sanityCheckTs((T1,T2),M), M, Cond, Rl) .
 eq sanityCheckRl(error(Trm, T), M, Cond, Rl) 
  = errorRl(Trm, T, Rl) .
 eq sanityCheckRl(true, M, Cond, Rl) 
  = sanityCheckRl(sanityCheckCond(Cond, M), Rl) .

  op sanityCheckCond : Condition Module ~> Bool .
  op sanityCheckCond : Condition Module Bool ~> Bool .
  eq sanityCheckCond(Cond, M, error(Trm, T)) = error(Trm, T) .
  eq sanityCheckCond(Cond, M, true) = sanityCheckCond(Cond, M) .
  eq sanityCheckCond(nil, M) = true .

  eq sanityCheckCond(T1 = T2 /\ Cond, M)
   = sanityCheckCond(Cond, M, sanityCheckTs((T1,T2),M)) .

  eq sanityCheckCond(T1 => T2 /\ Cond, M)
   = sanityCheckCond(Cond, M, sanityCheckTs((T1,T2),M)) .

  eq sanityCheckCond(T1 := T2 /\ Cond, M)
   = sanityCheckCond(Cond, M, sanityCheckTs((T1,T2),M)) .

  eq sanityCheckCond(Trm : T /\ Cond, M)
   = sanityCheckCond(Cond, M, sanityCheckT(Trm,M)) .

 op sanityCheckTs : TermList Module ~> Bool .
 op sanityCheckTs : TermList Module Bool ~> Bool .
 eq sanityCheckTs((Trm,Trms), M)
  = sanityCheckTs(Trms, M, sanityCheckT(Trm,M)) .
 eq sanityCheckTs(Trms, M, true)
  = sanityCheckTs(Trms, M) .
 eq sanityCheckTs(Trms, M, error(Trm, T)) = error(Trm, T) .
 eq sanityCheckTs(empty, M) = true .

 op sanityCheckT : Term Module ~> Bool .
 eq sanityCheckT(Trm,M) 
  = sanityCheckT(Trm, M, leastSortsT(M, Trm)) [print "checking " Trm] .

 var TS : TypeSet .
 op sanityCheckT : Term Module TypeSet ~> Bool .
 eq sanityCheckT(Trm, M, errorT(Trm', T')) = error(Trm', T') .
 eq sanityCheckT(Trm, M, S ; TS) = true .
 eq sanityCheckT(Trm, M, TS) = error(Trm, leastSort(M,Trm)) [owise print "got " TS] .
 
endfm


