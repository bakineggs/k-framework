mod STRICTCXT2EQS is
  including K-SORTS .
  including K-META-OPS .
  including STRICT-ATTRS .
  including K-STRICTNESS-OPS .
  including META-TERM-EXTRAS .
  including STRING-EXTRAS .
  including META-MODULE-EXTRAS .
  including META-K-MODULE .
  var T : Term . var V : Variable .  var Trl : TermList .  var Sort : Sort .
  var AS : AttrSet . var MAS : MembAxSet . var Eqs : EquationSet . var Q : Qid .
  vars Type Type' : Type .  var OPDS : OpDeclSet .
  sort MASEqsPair .
  op {_,_} : MembAxSet EquationSet -> MASEqsPair [ctor] .

  op strictCxt2eqs : Module MembAxSet ~> MASEqsPair .
  eq strictCxt2eqs(M,MAS) = strictCxt2eqs(M, MAS, none) .
  op strictCxt2eqs : Module MembAxSet EquationSet ~> MASEqsPair . 
 ceq strictCxt2eqs(M, (mb 'context_[T] : Sort [AS] .) MAS, Eqs)
   = strictCxt2eqs(M, MAS, Eqs strictCxt2eq(M, (mb 'context_[T] : Sort [AS] .)))
  if Sort = KSentence .
  eq strictCxt2eqs(M, MAS,Eqs) = {MAS,Eqs} [owise] . 

  op strictCxt2eq : Module MembAx ~> EquationSet .
  eq strictCxt2eq(M, (mb 'context_[T] : Sort [kstrict(nil,Q)] .))
    =  ((eq kWrap(Q, T[hole <- mkVariable('Kcxt,KProper)])  
        = kWrap(Q, kra(mkVariable('Kcxt,KProper), freezeTerm(M, T))) 
       [metadata("heating")] .)
      (eq kWrap(Q, kra(mkVariable('Kcxt,KResult), freezeTerm(M, T)))
        = kWrap(Q, T[hole <- mkVariable('Kcxt,KResult)])
       [metadata("cooling")] .)) .
  eq strictCxt2eq(M, (mb 'context_[T] : Sort [none] .))
   = strictCxt2eq(M, (mb 'context_[T] : Sort [kstrict(nil,klabel)] .)) .





  op freezeTerm : Module Term -> Term .
  eq freezeTerm(M, T) = kApply(
   freezeLabel(untokenize(metaPrettyPrint(M,T, mixfix flat number rat))),
   freezeVariables(M, removeHole(noDuplicates(getVars(T))))) .

  op freezeVariables : Module TermList ~> TermList .
  op freezeVariable : Module Variable ~> Variable .
  eq freezeVariables(M, (V,Trl)) 
   = (freezeVariable(M, V),freezeVariables(M, Trl)) .
  eq freezeVariables(M, empty) = empty .

  eq freezeVariable(M, V) = freezeVariable(string(V),makeK(M,V, getType(V))) .

  op makeK : Module Variable Type ~> Term . 
  eq makeK(M, V, Type) = makeK(M, V, Type, sortLeq(M, Type, KList)) .

  op makeK : Module Variable Type Bool ~> Term . 
  eq makeK(M, V, Type, true) = V .
  eq makeK(M, V, Type, B:[Bool]) 
   = kApply(findWrapper(getOps(M), Type)[V],empty) .

  op findWrapper : OpDeclSet Type ~> Qid .
  eq findWrapper(OPDS op Q : Type -> Type' [AS metadata("builtin wrapper")] ., Type) = Q .

  op strictCxt2eqs : Qid Qid Module Module ~> Module .
  var Syntax StrictEqs : Qid . var M Flat : Module .

  eq strictCxt2eqs(Syntax,StrictEqs,M,Flat) = strictCxt2eqs(Syntax,StrictEqs,strictCxt2eqs(Flat, getMbs(M))) . --- [print "Syntax: " Syntax ", StrictEqs: " StrictEqs ", StrictCxt: " M] .

  op strictCxt2eqs : Qid Qid MASEqsPair ~> Module .
  eq strictCxt2eqs(Syntax, StrictEqs, {MAS,Eqs}) 
   = setMbs(addEqs(Eqs, addImports((including Syntax . including 'K-STRICTNESS .), setName(emptySModule, StrictEqs))), MAS) .
endm

---(
mod STRICTOPS2EQ is
  including STRICTOPS2CXT .
  including STRICTCXT2EQ .
  op strictOps2eq : Qid Module ~> Module .
  var StrictEq : Qid .  var Syntax : Module .
  eq strictOps2eq(StrictEq, Syntax) 
   = strictCxt2eq(getName(Syntax), StrictEq, strictOps2cxt('STRICTCXT,Syntax)) .
  --- [print "Syntax: " Syntax] .
endm
---)

