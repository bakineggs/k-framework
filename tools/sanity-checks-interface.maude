load sanity-checks

mod SANITY-CHECKS-META is
  including SANITY-CHECKS .
  including META-LEVEL-EXTRAS .
  including MODULE-META-PRETTY-PRINT .
  including META-MODULE-EXTRAS .
  including PARSE-METADATA .
  
  var NoInSane : String .  var Flat M : Module .  var MM : [Module] .
  var Trm : Term . var T : Type .  var Mb : MembAx . var Eq : Equation . var Rl : Rule . var N : Nat .  var Op : OpDecl .  var AS : AttrSet .  var Tl : TypeList .  var Ops : OpDeclSet .

  var Q QNoInSane : Qid . 
  op sanityChecks : String ~> Module .
  eq sanityChecks(NoInSane) = sanityChecks(qid(NoInSane)) .
  op sanityChecks : Qid ~> Module .
  eq sanityChecks(QNoInSane) = $sanityChecks(upModule(QNoInSane, false), upModule(QNoInSane, true)) .
  
  op $sanityChecks : Module Module ~> Module .
  op $$sanityChecks : Module Module ~> Module .
  eq $sanityChecks(M, Flat) = $$sanityChecks(Flat, sanityChecks(M, Flat)) .
  eq $$sanityChecks(Flat, MM) = if MM :: Module then MM else moduleError(extractError(Flat, MM)) fi .

  op error : QidList QidList QidList -> QidList .
  vars Rule Term Type : QidList .
  eq error(Rule, Term, Type)
   = '\r 'Error: '\o 'The 'sanity 'checks 'phase 'of 'compilation 'failed 'for Rule '. '\n '\s '\s 'Term '\n '\t '\r Term '\o '\n '\s '\s 'does 'not 'parse 'to 'a 'sort 'but 'rather 'to 'kind '\n '\t '\r Type '\o '. '\n '\s '\s 'Please 'resolve 'that 'before 'continuing. .

  op errorOp : QidList QidList -> QidList .
  eq errorOp(Rule, Type)
   = '\r 'Error: '\o  'The 'sanity 'checks 'phase 'of 'compilation 'failed 'for Rule 'Sort '\r Type '\o 'is 'not 'subsorted 'to 'K '. '\n '\s '\s 'Please 'resolve 'that 'before 'continuing. .

  op extractError : Module [Module] -> QidList .
  eq extractError(Flat, errorM(Trm, T, Q)) 
   = error('rule '\g Q '\o,  metaPrettyPrint(Flat, Trm), T) .
  eq extractError(Flat, errorMMb(Trm, T, Mb)) 
   = error('\g eMetaPrettyPrint(Flat, Mb, true) '\o,  metaPrettyPrint(Flat, Trm), T) .
  eq extractError(Flat, errorMOp(T, N, Op))
   = errorOp('\n '\s eMetaPrettyPrint(Flat,Op) '\o, T) .
  eq extractError(Flat, errorMEq(Trm, T, Eq)) 
   = error('\g eMetaPrettyPrint(Flat, Eq, true) '\o,  metaPrettyPrint(Flat, Trm), T) .
  eq extractError(Flat, errorMRl(Trm, T, Rl)) 
   = error('\g eMetaPrettyPrint(Flat, Rl, true) '\o,  metaPrettyPrint(Flat, Trm), T) .
  eq extractError(Flat, errorM(Trm, T, AS, Tl, Ops, N))
   = error('\g 'rule '\o getLocationInformation(AS) '\o,  metaPrettyPrint(Flat, Trm), T '\o '. 'A 'possible 'candidate 'is 'argument qid(string(s(N),10))) .

  op compileSANITY-CHECKS : Module ~> Module .
  eq compileSANITY-CHECKS(M) = $compile(flatten(M), sanityChecks(M, flatten(M))) .
  
  op $compile : Module Module ~> Module .
  eq $compile(Flat, MM) = if MM :: Module then MM else moduleError(extractError(Flat,MM)) fi .

  var S : String .
  op getLocationInformation : AttrSet -> QidList .
  eq getLocationInformation(AS metadata(S)) 
   = getLocationInformation(AS metadataParse(S)) .
  eq getLocationInformation(label(Q) AS) = Q getLocationInformation(AS) .
  eq getLocationInformation(klocation(S) AS) = 'at tokenize(S) [owise] .
  eq getLocationInformation(AS) = nil [owise] .
endm

mod SANITY-CHECKS-LOOP is 
  including LOOP-MODE + META-LEVEL .
  including MODULE-META-PRETTY-PRINT .
  op sanity-checks : -> System .
  op idle : -> State .
  var Q NoInSane : Qid . var QIL QIL' : QidList . var FM : Module .
  eq sanity-checks = [nil, idle, 
 'Usage: 'sanityChecks '<Name> '.] .


  op wrapper : Qid -> Module .
  eq wrapper(Q) = (mod 'MKKR is including Q . 
                    sorts none . none none none none none endm) .
  op error : -> [Module] .
  op print : [Module] -> QidList .
  var Str : String . var M FM' : Module . 
  eq print(moduleError(QIL)) = QIL '\n .
  eq print(FM) = eMetaPrettyPrint(setRls(setEqs(FM,none),none), FM) .
  rl ['sanityChecks NoInSane QIL, idle, QIL'] 
   => [QIL, idle, print(downTerm(getTerm(
             metaReduce(wrapper('SANITY-CHECKS-META),
                        'sanityChecks[upTerm(string(NoInSane))])), error))] .
endm
