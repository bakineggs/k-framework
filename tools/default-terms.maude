fmod DEFAULT-TERMS is
  including META-MODULE-EXTRAS .
  including K-META-CONFIG .
  including META-ANONYMOUS-VARIABLE . 
  including K-META-OPEN-CELLS .
  including INT .
  var M : Module .  var T T' T1 T2 : Term . var O Q : Qid .  var Ct : Constant . 
  var Tl Tl' : TermList .  var N : Nat .
  var Ss : SortSet .  var V : Variable .  var B B' : Bool .
  var Mbs : MembAxSet .  var Mb : MembAx . var SC : SplitCell .  var SC' : [SplitCell] .
  var Rls : RuleSet . var Rl : Rule .
  var Eqs : EquationSet . var Eq : Equation .  var AS : AttrSet .
  var Cond : Condition  .
  var KRS : [KRuleSplit] .
  
  op defaultTerms : Qid Module Term ~> Module .
  var IL : ImportList . var SSDS : SubsortDeclSet . 
  eq defaultTerms(Q, M, T) = setName(setRls(setEqs(setMbs(M, defaultTermsMbs(getMbs(M),T)),defaultTermsEqs(getEqs(M),T)),defaultTermsRls(getRls(M),T)),Q) [print "Applying default terms."] . 

  sort TermBool .  op {_,_} : TermList Bool -> TermBool .
  op getTerm : TermBool -> Term .  eq getTerm({T,B}) = T .

  op substitute : Term Qid Term ~> Term .
  eq substitute(T,Q,T') = getTerm($substitute(T,Q,T')) .

  op $substitute : Term Qid Term -> TermBool .
  eq $substitute(T, Q, T')  = $substitute(T,Q,T',splitKCell(T)) .
  
  op $substitute : Term Qid Term [SplitCell] -> TermBool .
  eq $substitute(T,Q,T',SC') 
   = if SC' :: SplitCell then if getName(SC') == Q then {T', true} 
     else $substitute(SC',$substitute(getContents(SC'),Q,T')) fi
     else $$substitute(T,Q,T') fi .

  op $$substitute : Term Qid Term -> TermBool .
  eq $$substitute(O[Tl],Q, T') = $substitute(O,$substituteL(Tl, Q, T')) .
  eq $$substitute(Ct,Q,T') = {Ct, false} .
  eq $$substitute(V, Q, T') = {V, false} .

  op $substitute : SplitCell TermBool -> TermBool .
  eq $substitute(SC,{T,false}) = {plugCell(SC),false} .
  eq $substitute(SC,{T,true}) 
   = {plugCell(setMultiplicity(setContents(SC,T),one)),true} .

  op $substitute : Qid TermBool -> TermBool .
  eq $substitute(Q,{Tl,B}) = {Q[Tl],B} .


  op $substituteL : TermList Qid Term -> TermBool .
  eq $substituteL(Tl, Q, T) = $substituteL(Tl,Q, T, {empty,false}) .
  op $substituteL : TermList Qid Term TermBool -> TermBool .
  eq $substituteL(empty, Q, T', {Tl,B}) = {Tl,B} .
  eq $substituteL((T,Tl), Q, T', {Tl',B})
   = $substituteL(Tl, Q, T', {Tl',B}, $substitute(T,Q,T')) .
  op $substituteL : TermList Qid Term TermBool TermBool -> TermBool .
  eq $substituteL(Tl, Q, T', {Tl',B},{T,B'})
   = $substituteL(Tl, Q, T', {(Tl',T),B or B'}) .
  

  op cleanConf : Term -> Term .
  eq cleanConf(T) = cleanConf(T,splitKCell(T)) .
  op cleanConf : Term [SplitCell] -> Term .
  eq cleanConf(T, SC')
   = if SC' :: SplitCell then if getMultiplicity(SC') == maybe or  getMultiplicity(SC') == any then emptyCt(Bag)
     else plugCell(setMultiplicity(setContents(SC',cleanConf(getContents(SC'))),one)) fi
     else $cleanConf(T) fi .
  op $cleanConf : Term -> Term .
  eq $cleanConf(Ct) = Ct .
  eq $cleanConf(V) = V .
  eq $cleanConf(Q[Tl]) = Q[$cleanConfL(Tl)] .
  op $cleanConfL_ : TermList -> TermList .
  eq $cleanConfL(T,Tl) = cleanConf(T),$cleanConfL(Tl) .
  eq $cleanConfL(empty) = empty .

  op findCell : TermList Qid ~> Term .
  eq findCell((T,Tl),Q) = findCell((T,Tl),Q,splitKCell(T)) .
  op findCell : TermList Qid SplitCell ~> Term .
  eq findCell((T,Tl),Q,SC')
   = if SC' :: SplitCell then if getName(SC') == Q then T else findCell((Tl,getContents(SC')),Q) fi else $findCell((T,Tl),Q) fi .

  op $findCell : TermList Qid ~> Term .
  eq $findCell((O[Tl'],Tl),Q) = findCell((Tl,Tl'),Q) .
  eq $findCell((V,Tl),Q) = findCell(Tl,Q) .
  eq $findCell((Ct,Tl),Q) = findCell(Tl,Q) .
  

  op defaultTermsRls : RuleSet Term ~> RuleSet .
  eq defaultTermsRls(Rl Rls, T)
   = defaultTermsRls(Rls,T) defaultTermsRl(Rl, T) .
  eq defaultTermsRls(none,T) = none .

  op defaultTermsRl : Rule Term ~> Rule .
  eq defaultTermsRl(rl T1 => T2 [AS] ., T)
   = (rl T1 => defaultTerm(T2,T) [AS] .) .
  eq defaultTermsRl(crl T1 => T2 if Cond [AS] ., T)
   = (crl T1 => defaultTerm(T2,T) if Cond [AS].) .
  
  op defaultTermsEqs : EquationSet Term ~> EquationSet .
  eq defaultTermsEqs(Eq Eqs, T)
   = defaultTermsEqs(Eqs,T) defaultTermsEq(Eq, T) .
  eq defaultTermsEqs(none,T) = none .

  op defaultTermsEq : Equation Term ~> Equation .
  eq defaultTermsEq(eq T1 = T2 [AS] ., T)
   = (eq T1 = defaultTerm(T2,T) [AS] .) .
  eq defaultTermsEq(ceq T1 = T2 if Cond [AS] ., T)
   = (ceq T1 = defaultTerm(T2,T) if Cond [AS].) .
  
  op defaultTermsMbs : MembAxSet Term ~> MembAxSet .
  eq defaultTermsMbs(Mb Mbs, T)
   = defaultTermsMbs(Mbs, T)  defaultTermsMb(Mb, T, splitKRule(Mb)) .
  eq defaultTermsMbs(none, T) = none .

  op defaultTermsMb : MembAx Term KRuleSplit ~> MembAxSet .
  eq defaultTermsMb(Mb, T, KRS)
   = if KRS :: KRuleSplit then plugKRule(setContents(KRS,defaultTermsKR(getContents(KRS),T))) else Mb fi .

  op defaultTermsKR : Term Term ~> Term .
  eq defaultTermsKR(Q[Tl],T) = defaultTermsKR(Tl,T,Q) .
  eq defaultTermsKR(V,T) = V .
  eq defaultTermsKR(Ct,T) = Ct .

  op defaultTermsKR : TermList Term Qid ~> Term .
  eq defaultTermsKR((T,Tl),T',Q) 
   = if Q == replaceS then Q[T,defaultTerm(Tl,T')] 
     else Q[defaultTermsKRL((T,Tl),T')] fi . 

  op defaultTermsKRL : TermList Term ~> TermList .
  eq defaultTermsKRL((T,Tl),T') = defaultTermsKR(T,T'),defaultTermsKRL(Tl,T') .
  eq defaultTermsKRL(empty,T') = empty .

  op defaultTerm : Term Term ~> Term .
  eq defaultTerm(T,T') = defaultTerm(T,T',splitKCell(T)) .
  
  op defaultTerm : Term Term SplitCell ~> Term .
  eq defaultTerm(T, T', SC') = if SC' :: SplitCell then if getEllipses(SC') =/= none then mkDefaultTerm(getContents(SC'),findCell(T',getName(SC'))) else plugCell(setContents(SC',defaultTerm(getContents(SC'), T'))) fi else $defaultTerm(T,T') fi .

  op $defaultTerm : Term Term ~> Term .
  eq $defaultTerm(Ct,T) = Ct .
  eq $defaultTerm(V,T) = V .
  eq $defaultTerm(Q[Tl], T) = Q[$defaultTermL(Tl,T)] .

  op $defaultTermL : TermList Term ~> TermList .
  eq $defaultTermL((T,Tl),T') = defaultTerm(T,T'), $defaultTermL(Tl,T') .
  eq $defaultTermL(empty,T) = empty .
 
  op mkDefaultTerm : TermList Term ~> Term .
  eq mkDefaultTerm(empty,T) = cleanConf(T) .
  eq mkDefaultTerm((T,Tl),T') = mkDefaultTerm(T,Tl,T',splitKCell(T)) .
  
  op mkDefaultTerm : Term TermList Term SplitCell ~> Term .
  eq mkDefaultTerm(T,Tl, T', SC')
   = if SC' :: SplitCell then mkDefaultTerm(Tl, substitute(T', getName(SC'), defaultTerm(T,T'))) else $mkDefaultTerm(T,Tl,T') fi .

  op $mkDefaultTerm : Term TermList Term ~> Term .
 ceq $mkDefaultTerm(Q[Tl],Tl',T) = mkDefaultTerm((Tl,Tl'),T)
  if Q == ctor(Bag) .
 ceq $mkDefaultTerm(Ct, Tl, T) = mkDefaultTerm(Tl,T) if Ct = emptyCt(Bag) .
endfm
