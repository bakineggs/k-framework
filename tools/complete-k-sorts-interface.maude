load complete-k-sorts

mod COMPLETE-K-SORTS-META is
  including COMPLETE-K-SORTS .
  including META-LEVEL-EXTRAS .
  including META-K-MODULES .
  including META-K-BUILTINS .
  var NoCompleteKSorts CompleteKSorts : String .
  var Q QNoCompleteKSorts QCompleteKSorts : Qid .
  var M : Module .
  op completeKSorts : String String ~> Module .
  eq completeKSorts(NoCompleteKSorts, CompleteKSorts) = completeKSorts(qid(NoCompleteKSorts), qid(CompleteKSorts)) .
  op completeKSorts : Qid Qid ~> Module .
  eq completeKSorts(QNoCompleteKSorts,QCompleteKSorts) = completeKSorts(QCompleteKSorts,  upModule(QNoCompleteKSorts, false), upModule(QNoCompleteKSorts, true)) .

  op compileCOMPLETE-K-SORTS : Module ~> Module .
  eq compileCOMPLETE-K-SORTS(M) = completeKSorts(getName(M), M, flatten(M)) .
endm

mod COMPLETE-K-SORTS-LOOP is 
  including LOOP-MODE + META-LEVEL .
  including MODULE-META-PRETTY-PRINT .
  op complete-k-sorts : -> System .
  op idle : -> State .
  var Q NoCompleteKSorts CompleteKSorts : Qid . var QIL QIL' : QidList . var FM : Module .
  eq complete-k-sorts = [nil, idle, 
 'Usage: 'completeKSorts '<Name> '<Suffix> '.] .


  op wrapper : Qid -> Module .
  eq wrapper(Q) = (mod 'MKKR is including Q . 
                    sorts none . none none none none none endm) .
  op error : -> [Module] .
  op print : Module [Module] -> QidList .
  var Str : String . var M FM' : Module .
  eq print(M,FM) = eMetaPrettyPrint(setRls(setEqs(FM,none),none), FM) [owise] .
  crl ['completeKSorts NoCompleteKSorts CompleteKSorts QIL, idle, QIL'] 
   => [QIL, idle, print(upModule(NoCompleteKSorts,false), FM )] 
   if FM := downTerm(getTerm(
             metaReduce(wrapper('COMPLETE-K-SORTS-META),
                        'completeKSorts[upTerm(string(NoCompleteKSorts)),upTerm(string(CompleteKSorts))])),error) .
endm
