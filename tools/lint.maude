set include PL-BOOL off .
set include BOOL on .
load prelude-extras
load meta-k
load printing
load metadata-parsing
load many-modules-interface
load resolve-ditto-interface
load complete-k-sorts-interface
load anon-consts-interface
load sanity-checks-interface
mod COMPILE-ONESHOT is
 including MANY-MODULES-META + RESOLVE-DITTO-META + COMPLETE-K-SORTS-META + ANONYMOUS-CONSTANTS-META + SANITY-CHECKS-META .


  op compile : Module QidList ~> Module .
  eq compile(M, nil) = M .
  eq compile(M, Q QIL) = compile(compile1(M,Q), QIL) .

  op compile1 : Module Qid ~> Module .
  eq compile1(M, 'MANY-MODULES) = compileMANY-MODULES(M) .
  eq compile1(M, 'RESOLVE-DITTO) = compileRESOLVE-DITTO(M) .
  eq compile1(M, 'COMPLETE-K-SORTS) = compileCOMPLETE-K-SORTS(M) .
  eq compile1(M, 'ANONYMOUS-CONSTANTS) = compileANONYMOUS-CONSTANTS(M) . 
  eq compile1(M, 'SANITY-CHECKS) = compileSANITY-CHECKS(M) . 

  op allSteps : -> QidList .
  eq allSteps = 'MANY-MODULES 'RESOLVE-DITTO 'COMPLETE-K-SORTS 'ANONYMOUS-CONSTANTS 'SANITY-CHECKS .
  
  op compile : Module ~> Module .  
  eq compile(M) = compile(M, allSteps) .
  
  op partialCompile : Module Qid ~> Module .
  eq partialCompile(M,Q) = compile(M, upTo(allSteps,Q)) .
  
  var M : Module . var Q : Qid . var QIL : QidList .
endm

fmod COMPILE-META is
  including META-LEVEL .
  including META-MODULE-EXTRAS .
  including STRING-EXTRAS .
  including MODULE-META-PRETTY-PRINT .

  op wrapper : Qid -> Module .
  eq wrapper(Q) = (mod 'MKKR is including Q . 
                    sorts none . none none none none none endm) [print "Got to " Q] .
  op error : -> [Module] .

  op compile : Qid ~> Module .
  eq compile(Q) = compile(upModule(Q, false)) .

  op pcompile : Qid Qid ~> Module .
  eq pcompile(Q, Q') = partialCompile(upModule(Q, false), Q') .

  op getPhaseName : Qid ~> QidList .
  eq getPhaseName('MANY-MODULES) 
   = 'flattening 'entire 'definition 'in 'a 'single 'module .
  eq getPhaseName('RESOLVE-DITTO) 
   = 'Updating 'metadata 'information 'for 'ditto 'operations .
  eq getPhaseName('COMPLETE-K-SORTS) 
   = tokenize("Subsorting (almost) everything to K") .
  eq getPhaseName('ANONYMOUS-CONSTANTS) 
   = tokenize("transforming Anonymous constants into variables") .
  eq getPhaseName('SANITY-CHECKS)
   = tokenize("checking each (sub)term parses to a sort") .

  op allSteps : -> QidList .
  eq allSteps = 'MANY-MODULES 'RESOLVE-DITTO 'COMPLETE-K-SORTS 'ANONYMOUS-CONSTANTS 'SANITY-CHECKS .
  
  op compile : Module ~> Module .  
  eq compile(M) = compile(M, allSteps) .
  
  op partialCompile : Module Qid ~> Module .
  eq partialCompile(M,Q) = compile(M, upTo(allSteps,Q)) .
  
  op compile : Module QidList ~> Module .
  eq compile(M,nil) = M [print "Final module: " M] .
  eq compile(M, Q QIL) =  $compile(M, Q, 
    downTerm(getTerm(
             metaReduce(wrapper(qid(string(Q) + "-META")),
                        qid("compile" + string(Q))[upTerm(M)])), error)
     , QIL) [print "applying transformation " Q " on module " M] .
  
  op $compile : Module Qid Module QidList ~> Module .
  eq $compile(M, Q, moduleError(QIL), QIL') = moduleError(QIL) .
  eq $compile(M, Q, M', QIL)  = if M' :: Module and-then wellFormed(M') then compile(M', QIL) else generateError(M,Q,M') fi .

  op print : [Module] -> QidList .
  eq print(M) = eMetaPrettyPrint(setRls(setEqs(M,none),none), M) .
  op generateError : Module Qid [Module] -> [Module] .
  eq generateError(M, Q, M') = moduleError('Error 'while getPhaseName(Q) '`( 'module Q '`) '\n
   'To 'reproduce 'load 'k-prelude 'and 'then 'the 'generated 'module. '\n
   print(M) 
) .

  var Q Q' : Qid . var QIL QIL' : QidList . var M : Module .  var M' : [Module] .
endfm

mod COMPILE-LOOP is
  including LOOP-MODE + COMPILE-META .
  op compile : -> System .
  op idle : -> State .
  var Q Q' : Qid . var QIL QIL' : QidList . var FM : Module .
  eq compile = [nil, idle, 
 'Usage: 'compile '<ModuleName> '. ] .

  op error : -> [Module] .
  var Str : String . var M FM' : Module . var OPDS : OpDeclSet .  

  eq print(moduleError(QIL)) = QIL .
  rl ['compile Q QIL, idle, QIL'] 
   => [QIL, idle, print(compile(Q) )] .
  rl ['pcompile Q Q' QIL, idle, QIL'] 
   => [QIL, idle, print(pcompile(Q,Q') )] .
endm
