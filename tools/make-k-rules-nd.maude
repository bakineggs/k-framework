fmod MAKE-K-RULES is
  including META-MODULE-EXTRAS .
  including  META-K-RULES .
  including  META-K-CONTEXTS .
  including META-K-COOL .
  including META-LEVEL-EXTRAS .
  including META-K-CONDITION-SEARCH .
  including PARSE-METADATA-RULES .
  var M Flat : Module .  var T T1 T2 : Term .  var AS : AttrSet . 
  var C : Term . var S : Sort .  var Ss : SortSet . var Subst : Substitution .
  var Ct : Constant . var V : Variable .
  var O O' : Qid . var N : Nat . var Tl : TermList .
  var KRuleType : KRuleKind .  var Split : KRuleSplit .
  var Mas : MembAxSet . var Max : MembAx .
  
  op resolveKRules : Qid Module Module SortSet -> Module .
  eq resolveKRules(O, M, Flat, Ss) = setName(resolveReplace(setOps(setEqs(setRls(Flat,none),none),clearReductionAttrs(getOps(Flat)) coolCellOps(Ss)), addOps(coolCellOps(Ss),setMbs(removeImports(M, (including 'K-RULES .) (including 'K-CONDITION-SEARCH .)),none)), getMbs(M), coolSubst(Ss)), O) .
  
  op coolCellOps : SortSet -> OpDeclSet .
  eq coolCellOps(none) = none .
  eq coolCellOps(S ; Ss) 
   = (op cool(S) : nil -> CellLabel [none] .)
     coolCellOps(Ss) .

  op coolSubst : SortSet -> Substitution .
  eq coolSubst(none) = none .
  eq coolSubst(S ; Ss)
   = (mkCellLabel(S) <- mkCellLabel(cool(S))) ;
     coolSubst(Ss) .

  op resolveReplace : Module Module MembAxSet Substitution -> Module .
  eq resolveReplace(Flat, M, none, Subst) = M .
  eq resolveReplace(Flat, M, Max Mas, Subst)
   = resolveReplace(Flat, M, Max, Mas, Subst) .
  op resolveReplace : Module Module MembAx MembAxSet Substitution -> Module .
 ceq resolveReplace(Flat, M, Max, Mas, Subst)
   = resolveReplace(Flat, addReplace(Flat, M, Split, Subst), Mas, Subst)
  if Split := splitKRule(metadataParse(Max)) .
 ceq resolveReplace(Flat, M, Max, Mas, Subst)
   = resolveReplace(Flat, addCxtReplace(Flat, M, CSplit), Mas, Subst)
  if CSplit := splitKContext(metadataParse(Max)) .
  eq resolveReplace(Flat, M, Max, Mas, Subst) 
   = resolveReplace(Flat, addMbs(Max, M), Mas, Subst) [owise] .


---------  Hack to get rid of the potential attribute large
  eq klarge = none . 
---------

  op addCxtReplace : Module Module KContextSplit ~> Module .
  eq addCxtReplace(Flat, M, CSplit) = addMbs(plugKContext(setContents(CSplit, replaceCxt(splitReplace(getContents(CSplit),1), getHoleReplacement(getContents(CSplit))))), M) .

  op addReplace : Module Module KRuleSplit Substitution ~> Module .
  eq addReplace(Flat, M,{krl,T,empty,AS kstructural}, Subst)
   = addEqs((eq normalize(Flat,splitReplace(T,1)) = (normalize(Flat,splitReplace(T,2))[Subst]) [metadata(kstructural AS)] .), M) . 
  eq addReplace(Flat, M, {kcrl, T, C, AS kstructural}, Subst)
   = addEqs((ceq normalize(Flat,splitReplace(T,1)) = (normalize(Flat,splitReplace(T,2))[Subst]) if C = trueCt [metadata(kstructural AS)] .), M) .
  eq addReplace(Flat, M, {krl, T, empty, AS}, Subst)
    = addRls((rl normalize(Flat,splitReplace(T,1)) => (normalize(Flat,splitReplace(T,2))[Subst]) [metadata(kcomputational AS)] .), M) [owise] .
  eq addReplace(Flat, M, {kcrl, T, C, AS}, Subst) 
    = addRls((crl normalize(Flat,splitReplace(T,1)) => (normalize(Flat, splitReplace(T,2))[Subst]) if makeCondition(C)  [metadata(kcomputational AS)] .), M) [owise] .


  op makeCondition : Term -> Condition .
 ceq makeCondition(O'[O[T1,T2]])
   = T1 => T2 
  if O' = searchS /\ O = replaceS .
  eq makeCondition(T) = T = trueCt [owise] .

  var CSplit : KContextSplit .
endfm

