fmod ANONYMOUS-CONSTANTS is
  including META-MODULE-EXTRAS .
  including META-TERM-EXTRAS .
  including META-LEVEL-EXTRAS .
  including META-K-RULES .
  including META-ANONYMOUS-VARIABLE .

  var M Flat : Module . var Q : Qid .
  var Mbs : MembAxSet . var Mb : MembAx .  
  var Eqs : EquationSet . var Eq : Equation .
  var Rls : RuleSet . var Rl : Rule .
  var Trm Trm' : Term .   var Trms : TermList .  
  var TLS : TypeListSet .  var Tl : TypeList .  var NeTl : NeTypeList .  var T : Type .
  var V : Variable . var Ct : Constant . var Cond : Condition .
  var N : Nat .  var AS : AttrSet .  
  var SS : TypeSet .
  op resolveAnonymousConsts : Qid Module Module ~> Module .
  eq resolveAnonymousConsts(Q, M, Flat) 
   = resolveAnonymousConsts(Q, M , Flat, getAnonConsts(Flat)) .
  op resolveAnonymousConsts : Qid Module Module TypeSet ~> Module .
  eq resolveAnonymousConsts(Q,M,Flat, SS) = setName(setRls(setEqs(setMbs(removeImports(M,(including 'K-ANONYMOUS-VARIABLES .)),resolveConstsMbs(Flat, SS, getMbs(M))),resolveConstsEqs(Flat, SS, getEqs(M))),resolveConstsRls(Flat, SS, getRls(M))), Q) .

  op resolveConstsMbs : Module TypeSet MembAxSet ~> MembAxSet .
  eq resolveConstsMbs(M, SS, none) = none .
  eq resolveConstsMbs(M, SS, Mbs Mb) = resolveConstsMbs(M, SS, Mbs) resolveConstsMb(M, SS, Mb) .

  op resolveConstsEqs : Module TypeSet EquationSet ~> EquationSet .
  eq resolveConstsEqs(M, SS, none) = none .
  eq resolveConstsEqs(M, SS, Eqs Eq) = resolveConstsEqs(M, SS, Eqs) resolveConstsEq(M, SS, Eq) .

  op resolveConstsRls : Module TypeSet RuleSet ~> RuleSet .
  eq resolveConstsRls(M, SS, none) = none .
  eq resolveConstsRls(M, SS, Rls Rl) = resolveConstsRls(M, SS, Rls) resolveConstsRl(M, SS, Rl) .

  op resolveConstsMb : Module TypeSet MembAx ~> MembAx .
  eq resolveConstsMb(M, SS, (mb Trm : T [AS] .))
   = (mb resolveConstsT(M,SS, Trm) : T [AS] .) .
  eq resolveConstsMb(M, SS, (cmb Trm : T if Cond [AS] .))
   = (cmb resolveConstsT(M,SS, Trm) : T if Cond [AS] .) .

  op resolveConstsEq : Module TypeSet Equation ~> Equation .
  eq resolveConstsEq(M, SS, (eq Trm = Trm' [AS] .))
   = (eq resolveConstsT(M,SS, Trm) = Trm' [AS] .) .
  eq resolveConstsEq(M, SS, (ceq Trm = Trm' if Cond [AS] .))
   = (ceq resolveConstsT(M,SS, Trm) = Trm' if Cond [AS] .) .

  op resolveConstsRl : Module TypeSet Rule ~> Rule .
  eq resolveConstsRl(M, SS, (rl Trm => Trm' [AS] .))
   = (rl resolveConstsT(M,SS, Trm) => Trm' [AS] .) .
  eq resolveConstsRl(M, SS, (crl Trm => Trm' if Cond [AS] .))
   = (crl resolveConstsT(M,SS, Trm) => Trm' if Cond [AS] .) .

  op resolveConstsT : Module TypeSet Term ~> Term .
  eq resolveConstsT(M, SS, Trm) =  resolveConstsT(M, Trm, 0, none, SS) .

  op resolveConstsT : Module Term Nat TypeListSet TypeSet  ~> Term .
 ceq resolveConstsT(M, Q[Trm,Trm'], N, TLS, SS)
   = Q[resolveConstsT(M,Trm, N, TLS, SS), resolveConstsT(M,Trm', N, TLS, SS)] 
  if Q == replaceS . 
  eq resolveConstsT(M, Q[Trms], N, TLS, SS)
   = Q[resolveConstsTl(M,Trms, 0,maximalAritySet(M,Q[Trms]), SS)] [owise] . 
  eq resolveConstsT(M, V, N, TLS, SS) = V .
  eq resolveConstsT(M, Ct, N, TLS, SS) 
   = if getName(Ct) in SS then mkVariable(getName(Ct), getNthType(N, TLS)) else Ct fi .

  op resolveConstsTl : Module TermList Nat TypeListSet TypeSet ~> TermList .
  eq resolveConstsTl(M, empty, N, TLS, SS) = empty .
  eq resolveConstsTl(M, (Trm,Trms), N, TLS, SS) = resolveConstsT(M, Trm, N, TLS, SS),resolveConstsTl(M,Trms,s N, TLS, SS) .

  op getNthType : Nat TypeListSet ~> Type .
  eq getNthType(0,TLS) = checkCommonType(TLS) .
  eq getNthType(s N, TLS) = getNthType(N, removeFirst(TLS)) .

  op removeFirst : TypeListSet ~> TypeListSet .
  eq removeFirst(T ; TLS) = T ; TLS .
  eq removeFirst(T NeTl ; TLS) = NeTl ; removeFirst(TLS) .
  eq removeFirst(none) = none .

  op checkCommonType : TypeListSet ~> Type .
  eq checkCommonType(T Tl ; TLS) = checkCommonType(T, TLS) .
  
  op checkCommonType : Type TypeListSet ~> Type .
  eq checkCommonType(T, none) = T .
  eq checkCommonType(T, T Tl ; TLS) = checkCommonType(T, TLS) .
endfm
