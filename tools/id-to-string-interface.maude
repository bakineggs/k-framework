load id-to-string

mod ID-TO-STRING-META is
  including ID-TO-STRING .
  including META-LEVEL-EXTRAS .
  var NoInSane : String .  var M : Module .  var Q QNoInSane : Qid . 
  op id2String : String ~> Module .
  eq id2String(NoInSane) = id2String(qid(NoInSane)) .
  op id2String : Qid ~> Module .
  eq id2String(QNoInSane) = id2String(upModule(QNoInSane, false), upModule(QNoInSane, true)) .
  
  op compileID-TO-STRING : Module ~> Module .
  eq compileID-TO-STRING(M) = id2String(M, flatten(M)) .
endm

mod ID-TO-STRING-LOOP is 
  including LOOP-MODE + META-LEVEL .
  including MODULE-META-PRETTY-PRINT .
  op id-to-string : -> System .
  op idle : -> State .
  var Q NoInSane : Qid . var QIL QIL' : QidList . var FM : Module .
  eq id-to-string = [nil, idle, 
 'Usage: 'id2String '<Name> '.] .


  op wrapper : Qid -> Module .
  eq wrapper(Q) = (mod 'MKKR is including Q . 
                    sorts none . none none none none none endm) .
  op error : -> [Module] .
  op print : [Module] -> QidList .
  var Str : String . var M FM' : Module . 
  eq print(moduleError(QIL)) = QIL '\n .
  eq print(FM) = eMetaPrettyPrint(setRls(setEqs(FM,none),none), FM) .
  rl ['id2String NoInSane QIL, idle, QIL'] 
   => [QIL, idle, print(downTerm(getTerm(
             metaReduce(wrapper('ID-TO-STRING-META),
                        'id2String[upTerm(string(NoInSane))])), error))] .
endm
