What it does:
  Filters the output of the k-framework such that only desired information is
  shown. Control over this process is specified in the yaml configuration file,
  which is the second command-line argument. See example.yml
How to build:
  make clean ; make
  This assumes that you have the necessary dependencies installed. See
  OutputFilter.cabal for a list of the dependencies. These dependencies can be
  easily installed via the "cabal" tool that comes with most Haskell
  distributions. To build with cabal, simply type
  cabal install
  and cabal will fetch and install the needed dependencies, and create an
  executable in your cabal directory (e.g. ~/.cabal/bin). You can either use
  that executable, or now use the make commands normally, now that you have all
  the dependencies installed.
  If you do not wish to go through the build process yourself, you can find
  statically linked binaries for your system under the static-bins directory.
  To build a statically linked binary, run:
  make clean ; make static
How to run:
  ./filterOutput <output-file> <yaml-config-file>

Configuration file format:
  Configuration is specified in a yaml document, and has the form:
  <cellname>: <cell-config>
  Where <cell-config> may be be a single command, or a set of options.

  Available single commands are:
    hide                         -- This is the default behavior if a cell is
                                    not specified. Hide the cell and its
                                    immediate content (but proceed as normal for
                                    the cell's children)
    show                         -- Show the cell and it's content (but says
                                    nothing about its children)
    recursively-hide             -- Hide the cell and forcefully hide its
                                    children, undoing any explic shows

  Available options in the set of options:
    keep: <int>                  -- keep only the first <int> number of lines
                                    in the content-text
    keep-chars: <int>            -- keep only the first <int> characters in a
                                    line in the content-text
    cell-style: <cell-style>     -- specify a style for the cell (see below)
    text-style: <text-style>     -- specify a style for the text (see below)

  <cell-style> or <text-style> is a set of any of the following:
    bold: <bold-value>           -- If a true value or "bold", will bold the
                                    cell/text. This can also be "debold", which
                                    will (recursively) undo any previously set
                                    boldening
    underline: <underline-value> -- If a true value or "underline", will
                                    underline the cell/text. This can also be
                                    "deunderline", which will (recursively) undo
                                    any previously set underlineing
    foreground <color>           -- Make the text have <color> as foreground
                                    (see below)
    background <color>           -- Make the text have <color> as background
                                    (see below)

  <color> can be any of the following:
     Black, Red, Green, Yellow, Blue, Magenta, Cyan, White, Dullblack, Dullred,
     Dullgreen, Dullyellow, Dullblue, Dullmagenta, Dullcyan, Dullwhite

  Global options can be defined in the special-case cellname: "options", where
  you can specify the following:
    global-substitutions:        -- Substitute oldn with newn wherever it may
      - old1: new1                  arise. This now uses perl-compatible regular
      - old2: new2                  expressions. The patterns use ` instead of \
      - old3: new3                  for escape, and backreferences in the
      ...                           replacement are supported (`1,`2,...)
    spaceless-cells: yes         -- Don't wrap cell names in spaces
    infixify: yes                -- Parse operators, and represent the infix
                                    ones as infix, prefix as prefix, and mixfix
                                    as mixfix. For mixfix, this enforces the
                                    arity of the operator.
    line-end: <string>           -- If a line is truncated, will put <string> at
                                    the end of the line
    indent: <int>                -- Indent cells by <int> spaces (default 1)
    end-cell-linebreak: yes      -- Put a linebreak before closing a cell
  See example.yml in the examples directory
