function init(n) {
	var x[n];
	for i = 0 to n - 1 do
	x[i] = i;
	return x;
}

function writeArray(x) {
	for i = 0 to sizeOf(x) - 1 do
		write(x[i]);
}

function reverse(x) {
	var n = sizeOf(x);
	for i = 0 to n/2 - 1 do {
		var t = x[i];
		x[i] = x[n - i - 1];
		x[n - i - 1] = t;
	}
}

function map(f,x) {
	for i = 0 to sizeOf(f) - 1 do {
		f[i](x);
	}
}

function insertionSort(x) {
	for i = 1 to sizeOf(x) - 1 do {
		var v = x[i], j = i - 1;
		while (j >= 0) do {
			if x[j] > v then
			x[j+1] = x[j];
			j = j - 1;
		}
		x[j+1] = v;
	}
}

function bubbleSort(v) {
	var n = sizeOf(v);
	for i = 0 to n - 1 do
		for j = 0 to n - 2 do
			if v[j] > v[j+1] then {
				var t = v[j+1];
				v[j+1] = v[j];
				v[j] = t;
			}
}

function siftDown(x, root, bottom) {
	var done = false, maxChild;
	while (root*2 <= bottom and not done) do {
		if (root*2 == bottom) then {
			maxChild = root*2;
		}
		else if (x[root*2] > x[root*2 + 1]) then {
			maxChild = root*2;
		}
		else {
			maxChild = root*2 + 1;
		}
		if (x[root] < x[maxChild]) then {
			var t = x[root];
			x[root] = x[maxChild];
			x[maxChild] = t;
			root = maxChild;
		}
		else {
			done = true;
		}
	}
}

function heapSort(x) {
	var n = sizeOf(x), i = n/2 - 1;
	while (i >= 0) do {
		siftDown(x, i, n - 1);
		i = i - 1;
	}
	i = n - 1;
	while (i >= 1 ) do {
		var t = x[0];
		x[0] = x[i] ;
		x[i] = t;
		siftDown(x, 0, i - 1);
		i = i - 1;
	}
}

function main() {
	var n = 10, x = init(n), f[11];
	f[ 0] = writeArray;
	f[ 1] = reverse;
	f[ 2] = writeArray;
	f[ 3] = insertionSort;
	f[ 4] = writeArray;
	f[ 5] = reverse;
	f[ 6] = bubbleSort;
	f[ 7] = writeArray;
	f[ 8] = reverse;
	f[ 9] = heapSort;
	f[10] = writeArray;
	map(f,x);
}