var numbers[100];

function siftDown(root, bottom) {
	var done = false, maxChild, temp;

	while (root*2 <= bottom and not done) do {
		if (root*2 == bottom) then {
			maxChild = root*2;
		}
		else if (numbers[root*2] > numbers[root*2 + 1]) then {
			maxChild = root*2;
		}
		else { maxChild = root*2 + 1; }
		if (numbers[root] < numbers[maxChild]) then {
			temp = numbers[root];
			numbers[root] = numbers[maxChild];
			numbers[maxChild] = temp;
			root = maxChild;
		}
		else {done = true;}
	}
}

function heapSort(size){
	var temp, i = (size/2) - 1;
	while (i >= 0) do {
		siftDown(i, size - 1);
		i = i - 1;
	}
	i = size - 1;
	while (i >= 1 ) do {
		temp = numbers[0];
		numbers[0] = numbers[i];
		numbers[i] = temp;
		siftDown(0, i - 1);
		i = i - 1;
	}
}

function main() {
	var x = read() ;
	for i = 0 to (x - 1) do {
		numbers[i] = read();
	}
	heapSort(x) ;
	for i = 0 to (x - 1) do {
		write(numbers[i]);
	}
}
