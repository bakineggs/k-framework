module filter

imports
	libstratego-lib
	libstratego-sglr
	libstratego-gpp
	libstratego-aterm
	libstratego-xtc
	include/K
	lib/editor-common.generated
  
 

// |[ i + j ]| -> |[ k ]| where <add>(i, j) => k 

	
// unquote = ?Unquote(Quote(x)); 
// 
// rules(use:+ amb([a, b]) -> a)


// with
//     	 //<debug(!"recordvar: ")> x;
//       // For a name 'x', GetVar will return the original 'x' tree node
//       rules(
//         GetVar :+ x -> x
//       )

// disamb = unquote <+ use <+ all(disamb)
//  
// filter = io-wrap(disamb)



// decl = ?|d[ type i ]|;
// rules(use:+ amb(as) -> t where
// !|t[ i ]| => t; <getfirst(?|u[ t ]|)> as)
// decl = ?|d[ enum i ]|;
// rules(use:+ amb(as) -> e where
// !|e[ i ]| => e; <getfirst(?|u[ e ]|)> as)
// core-disamb = io-wrap(alltd(decl <+ use))


// decl = ?|d[ class i ]|;
// rules(use:+ amb(as) -> c where
// !|c[ i ]| => c; <getfirst(?|u[ c ]|)> as)
// extension-disamb = io-wrap(alltd(decl <+ use))





// decl = ?VarDecl(IntType(), x)
// ; rules(use:+ amb(as) -> t where
// <getfirst(?IntUse(x))> as => t)
// 
// decl = ?VarDecl(FloatType(), x)
// ; rules(use:+ amb(as) -> t where
// <getfirst(?FloatUse(x))> as => t)

// disamb = decl <+ use <+ all(disamb)
// 
// core-disamb = io-wrap(disamb)