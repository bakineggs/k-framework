%% Grammar for the K language
module K
imports Common %% For Comments and whitespace
imports Simple[K][Exported => SyntacticK]
exports
context-free start-symbols
	Start

context-free syntax

%% K Module syntax
"kmod" ModName "is" KModHeader KSentence* "endkm" -> Start {cons("KModule"),left}
KModHeaderItem* -> KModHeader
"including" KModExp -> KModHeaderItem {cons("Including")}  
{ModName "+"}+ -> KModExp {cons("ModuleSum")}  

%% K Sentences
"configuration" Config -> KSentence {cons("Configuration")}
"macro" CellContents "=" CellContents -> KSimpleSentence {cons("Macro")}
"rule" CellContents -> KSimpleSentence {cons("Rule")}
"context" K -> KSimpleSentence {cons("Context")}
"predicate" K -> KSimpleSentence {cons("Predicate")}


%% K Conditional Sentences
KSimpleSentence "if" K -> KCondSentence {cons("RuleCond")}
KSimpleSentence -> KNonAttrSentence
KCondSentence -> KNonAttrSentence

%% K Attributed Sentences
KNonAttrSentence -> KSentence
KNonAttrSentence "[" KSentenceAttr* "]" -> KSentence {cons("AttributedSentence")}

"structural" -> KSentenceAttr {cons("Structural")}    

%% Configurations
ConfigItem* -> Config
StartCellClosed CellContents EndCellClosed -> ConfigItem {cons("ClosedCell")}  
StartCellClosed CellContents EndCellOpen -> ConfigItem {cons("PrefixCell")}  
StartCellOpen CellContents EndCellClosed -> ConfigItem {cons("SuffixCell")}  
StartCellOpen CellContents EndCellOpen -> ConfigItem {cons("MiddleCell")}  

K -> CellContents {cons("K")}
Map -> CellContents {cons("Map")}
List -> CellContents {cons("List")}
Bag -> CellContents {cons("Bag")}
Set -> CellContents {cons("Set")}
Config -> CellContents {cons("Config")}

"<" CellLabel CellProperties ">" -> StartCellClosed
"<" CellLabel CellProperties "_>" -> StartCellOpen
"<" CellLabel CellProperties ">..." -> StartCellOpen
"</" CellLabel ">" -> EndCellClosed
"<_/" CellLabel ">" -> EndCellOpen
"...</" CellLabel ">" -> EndCellOpen

ID "=" "\"" CellValue "\"" -> CellProperty
CellProperty* -> CellProperties

%% K
".K" -> K {cons("EmptyK")}
NeK -> K
INT -> K
"`" SyntacticK -> K {cons("Quote")} %% {prefer}

{K "~>"}+ "~>" {K "~>"}+ -> NeK {left,cons("SeqK")}
KLabel "(" KList ")" -> NeK {cons("AppK")}
K "=>" K -> NeK {prefer, cons("ReplaceK")}
"(" K ")" -> NeK {bracket}
"[" "]" -> NeK {cons("Hole")}
"[" "]" ":" Type -> NeK {cons("TypedHole")}

{K ","}* -> KList {cons("KList")}
KList "=>" KList -> KList {cons("ReplaceKList")}


%% Lists
ListItem+ -> List
".List" -> List
"ListItem" "(" K ")" -> ListItem {cons("ListItem")}
List "=>" List -> List {cons("ReplaceList")}
"(" List ")" -> List {bracket}

%% Maps
MapItem+ -> Map {cons("MapItemList")}
".Map" -> Map
K "|->" K -> MapItem {cons("MapsTo")}
Map "=>" Map -> Map {cons("ReplaceMap")}
Map "[" K "/" K "]" -> Map {cons("MapReplace")}
"(" MapItem ")" -> MapItem {bracket}
"(" Map ")" -> Map {bracket}

%% Bags
BagItem+ -> Bag {cons("BagItemList")}
".Bag" -> Bag
"BagItem" "(" K ")" -> BagItem {cons("BagItem")}
Bag "=>" Bag -> Bag {cons("ReplaceBag")}
"(" Bag ")" -> Bag {bracket}

%% Sets
SetItem+ -> Set
".Set" -> Set
"SetItem" "(" K ")" -> SetItem {cons("SetItem")}
Set "=>" Set -> Set {cons("ReplaceSet")}
"(" Set ")" -> Set {bracket}

%% Variables
VarId ":" Type -> Variable {cons("KVariable")}

VarId ":" "Config" -> ConfigVariable {prefer, cons("ConfigVariable")}
VarId ":" "List" -> ListVariable {prefer, cons("ListVariable")}
VarId ":" "Bag" -> BagVariable {prefer, cons("BagVariable")}
VarId ":" "Map" -> MapVariable {prefer, cons("MapVariable")}
VarId ":" "Set" -> SetVariable {prefer, cons("SetVariable")}

context-free restrictions
Variable -/- [\:]
context-free syntax

Variable -> K {prefer, cons("KVariable")}
Variable -> KLabel {cons("KLabelVariable")}

Variable -> ConfigItem {avoid, cons("ConfigItemVariable")}
Variable -> Config {cons("ConfigVariable")}

Variable -> ListItem {avoid, cons("ListItemVariable")}
Variable -> List {cons("ListVariable")}

Variable -> BagItem {avoid, cons("BagItemVariable")}
Variable -> Bag {cons("BagVariable")}

Variable -> MapItem {avoid, cons("MapItemVariable")}
Variable -> Map {cons("MapVariable")}

Variable -> SetItem {avoid, cons("SetItemVariable")}
Variable -> Set {cons("SetVariable")}

%% Booleans
%%K "=/=Bool" K -> Bool {cons("BoolKNeq")}

%% Instead of the subsorts from imp
BOOL -> KLabel {cons("Bool")}
INT -> KLabel {cons("Int")}

"notsurewhyineedthisitisreallysilly" -> SyntacticK

lexical syntax

"'" ~[\(\)\ ]+ -> KLabel

[A-Za-z] ~[\<\>\_\ ]* -> CellLabel

[A-Za-z0-9\*]* -> CellValue

[A-Z\-]+ -> ModName

%% Variables and the Anonymous Variable
[A-Z] ~[\:\(\)\<\>\~\n\,\ \[\]]*  -> VarId
"_" -> VarId

%% Types and Parameterized Types
[A-Z][A-Za-z]*("{" [A-Z][A-Za-z]* "}")? -> Type 
%% BasicType -> Type
%% BasicType "{" BasicType "}" -> Type

VarId -> Variable {cons("Variable")}

