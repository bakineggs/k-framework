load strict-cxt2eqs-nd

mod STRICTCXT2EQS-METADATA-META is
  including STRICTCXT2EQS .
  including PARSE-METADATA .
  var M : Module . var AS : AttrSet . var Str : String . var T : Term . var Sort : Type .  var Cond : TermList .
  var MAS : MembAxSet . var Eqs : EquationSet . var Rls : RuleSet .
  eq strictCxt2eq(M, MAS, Eqs, Rls, T, AS metadata(Str), Cond)
   = strictCxt2eq(M, MAS, Eqs, Rls, T, metadataParse(Str), Cond) .
endm

mod STRICTCXT2EQS-META is
  including STRICTCXT2EQS-METADATA-META .
  including STRICTCXT2EQS .
  including META-LEVEL-EXTRAS .
  var StrictCxt StrictEqs : String .  var M : Module .
  var QStrictCxt QStrictEqs : Qid .
  op strictCxt2eqs : String String ~> Module .
  eq strictCxt2eqs(StrictCxt, StrictEqs) 
   = strictCxt2eqs(qid(StrictCxt), qid(StrictEqs)) .

  op strictCxt2eqs : Qid Qid ~> Module .
  eq strictCxt2eqs(QStrictCxt, QStrictEqs) 
   = setName(addModule(setImports(strictCxt2eqs(QStrictCxt, QStrictCxt, upModule(QStrictCxt,false), upModule(QStrictCxt,true), 'k), including 'K-STRICTNESS .),setMbs(removeImports(upModule(QStrictCxt, false), including 'K-CONTEXTS .),none)), QStrictEqs)
 .

  op compileSTRICTCXT2EQS : Module ~> Module .
  eq compileSTRICTCXT2EQS(M) = addModule(setImports(strictCxt2eqs(getName(M), getName(M), M, flatten(M), 'k), including 'K-STRICTNESS .),setMbs(removeImports(M, including 'K-CONTEXTS .),none)) .
endm

mod STRICTCXT2EQS-LOOP is 
  including LOOP-MODE + META-LEVEL .
  including MODULE-META-PRETTY-PRINT .
  op strict-cxt2eqs : -> System .
  op idle : -> State .
  var Q Syntax StrictCxt StrictEqs : Qid . var QIL QIL' : QidList . var FM : Module .
  eq strict-cxt2eqs = [nil, idle, 
 'Usage: 'strictCxt2eqs '<Syntax> '<StrictCxt> '<StrictEqs> '. ] .

  op wrapper : Qid -> Module .
  eq wrapper(Q) = (mod 'MKKS is including Q . 
                    sorts none . none none none none none endm) .
  op error : -> [Module] .
  op print : Module [Module] -> QidList .
  var Str : String . var M FM' : Module . var OPDS : OpDeclSet .  
  eq print(M,FM) = eMetaPrettyPrint(setRls(setEqs(FM,none),none), FM) [owise] .
  crl ['strictCxt2eqs StrictCxt StrictEqs QIL, idle, QIL'] 
   => [QIL, idle, print(upModule(StrictCxt,false), FM )] 
   if FM := downTerm(getTerm(
             metaReduce(wrapper('STRICTCXT2EQS-META),
                        'strictCxt2eqs[upTerm(string(StrictCxt)),upTerm(string(StrictEqs))])),error) .
endm

---(
mod STRICTOPS2EQ-META is
  including STRICTOPS2EQ .
  including  STRICT-METADATA-INTERFACE .
  including META-LEVEL .
  op strictOps2eq : String String ~> Module .
  var Syntax StrictEq : String .
  eq strictOps2eq(Syntax, StrictEq)
   = strictOps2eq(qid(StrictEq), upModule(qid(Syntax),true)) .
endm
---)


