fmod MAKE-ALL-LABELS is
 including META-TERM-EXTRAS .
 including META-MODULE-EXTRAS .
 including META-LEVEL-EXTRAS .
 including META-K-LABELS .
 including META-K-WRAPPERS .
 including K-META-OPS .
 including METADATA-EXTRAS .
 including CONVERSION .
 including META-K-LEAST-SORTS .

 var Q Q' : Qid . var T T' T'' : Type . var Tl Tl' : TypeList . 
 var N : Nat . var Nl : NatList .
 var MS : ModuleSet .  var M Flat : Module .
 vars Mbs : MembAxSet . var Mb : MembAx .
 var Eqs : EquationSet . var Eq : Equation .
 var Rls : RuleSet . var Rl : Rule .
 var Trms : TermList . vars T1 T2 Trm : Term .  var Cond : Condition .
 var C : Constant . var V : Variable .
 vars OPDS Wrappers Labels : OpDeclSet . var Op Op' : OpDecl .
 var AS AS' : AttrSet .
 var OPDM : OpDeclOpDeclSetMap .  var LabelOp : OpDeclSet .

 op allLabelsImports : ModuleSet ~> ImportList .
 eq allLabelsImports(M MS) = allLabelsImports(MS, getName(M), pseudoKOps(getOps(M))) .

 op allLabelsImports : ModuleSet Qid OpDeclSet ~> ImportList .
 eq allLabelsImports(MS, Q, OPDS) 
  = if OPDS == none
    then allLabelsImports(MS)
    else allLabelsImports(MS) (including Q .) 
    fi [print Q "(" OPDS ")" ] .
 eq allLabelsImports(empty) = nil .

 op makeAllLabels : Qid Module Module ModuleSet ~> Module .
 eq makeAllLabels(Q, M, Flat, MS)
  = makeAllLabels(setName(suffixImports(Q,removeImports(M, including 'K-QUOTED-LABELS . including 'PL-IF-THEN-ELSE .),allLabelsImports(MS)), qid(string(getName(M)) + string(Q))), Flat, processOps(pseudoKOps(getOps(Flat)))) .

 op makeAllLabels : Module Module OpDeclOpDeclSetMap ~> Module .
 eq makeAllLabels(M, Flat, OPDM) 
  = addImports(including 'MAUDE-IF-THEN-ELSE .,applyLabels(addOps(filteredProject(OPDM,getOps(M)), removeOps(M, getKeys(OPDM))), Flat, OPDM)) .

 op filteredProject : OpDeclOpDeclSetMap OpDeclSet -> OpDeclSet .
 eq filteredProject((empty).OpDeclOpDeclSetMap, OPDS) = none .
 eq filteredProject(OPDM (Op |-> LabelOp), OPDS) 
  = if Op in OPDS then LabelOp filteredProject(OPDM,OPDS) 
    else filteredProject(OPDM,OPDS) fi .

 op applyLabels : Module  Module OpDeclOpDeclSetMap ~> Module .
 eq applyLabels(M, Flat, OPDM)
  = 
   setRls(
   setEqs(
   setMbs(
       M 
    , labelsMbs(Flat, getOps(Flat), OPDM, getMbs(M)))
    , labelsEqs(Flat, getOps(Flat), OPDM, getEqs(M)))
    , labelsRls(Flat, getOps(Flat), OPDM, getRls(M)))
  .

 op labelsMbs : Module OpDeclSet OpDeclOpDeclSetMap MembAxSet ~> MembAxSet .
 eq labelsMbs(M, OPDS, OPDM, Mbs Mb)
  =  labelsMbs(M, OPDS, OPDM, Mbs) labelsMb(Mb, M, OPDS, OPDM) .
 eq labelsMbs(M, OPDS, OPDM, none) = none .

 op labelsMb : MembAx Module OpDeclSet OpDeclOpDeclSetMap ~> MembAx .
 eq labelsMb((mb T1 : T [AS] .), M, OPDS, OPDM)
  = (mb labelsT(T1, getKind(M,T), M, OPDS, OPDM) : T [AS] .) .
 eq labelsMb((cmb T1 : T if Cond [AS] .), M, OPDS, OPDM)
  = (cmb labelsT(T1, getKind(M,T), M, OPDS, OPDM) : T if labelsCond(Cond, M, OPDS, OPDM) [AS] .) .

 op labelsEqs : Module OpDeclSet OpDeclOpDeclSetMap EquationSet ~> EquationSet .
 eq labelsEqs(M, OPDS, OPDM, Eqs Eq)
  =  labelsEqs(M, OPDS, OPDM, Eqs) labelsEq(Eq, M, OPDS, OPDM) .
 eq labelsEqs(M, OPDS, OPDM, none) = none .

 op labelsEq : Equation Module OpDeclSet OpDeclOpDeclSetMap ~> Equation .
 eq labelsEq((eq T1 = T2 [AS] .), M, OPDS, OPDM)
  = (eq labelsT(T1, getKind(M,leastSortsT(M,T1)), M, OPDS, OPDM) 
      = labelsT(T2, getKind(M,leastSortsT(M,T1)), M, OPDS, OPDM) [AS] .) .
 eq labelsEq((ceq T1 = T2 if Cond [AS] .), M, OPDS, OPDM)
  = (ceq labelsT(T1, getKind(M,leastSortsT(M,T1)), M, OPDS, OPDM) 
       = labelsT(T2, getKind(M,leastSortsT(M,T1)), M, OPDS, OPDM) 
      if labelsCond(Cond, M, OPDS, OPDM) [AS] .) .

 op labelsRls : Module OpDeclSet OpDeclOpDeclSetMap RuleSet ~> RuleSet .
 eq labelsRls(M, OPDS, OPDM, Rls Rl)
  =  labelsRls(M, OPDS, OPDM, Rls) labelsRl(Rl, M, OPDS, OPDM) .
 eq labelsRls(M, OPDS, OPDM, none) = none .

 op labelsRl : Rule Module OpDeclSet OpDeclOpDeclSetMap ~> Rule .
 eq labelsRl((rl T1 => T2 [AS] .), M, OPDS, OPDM)
  = (rl labelsT(T1, getKind(M,leastSortsT(M,T1)), M, OPDS, OPDM) 
     => labelsT(T2, getKind(M,leastSortsT(M,T1)), M, OPDS, OPDM) [AS] .) .
 eq labelsRl((crl T1 => T2 if Cond [AS] .), M, OPDS, OPDM)
  = (crl labelsT(T1, getKind(M,leastSortsT(M,T1)), M, OPDS, OPDM) 
      => labelsT(T2, getKind(M,leastSortsT(M,T1)), M, OPDS, OPDM) 
      if labelsCond(Cond, M, OPDS, OPDM) [AS] .) .

 op labelsCond : Condition Module OpDeclSet OpDeclOpDeclSetMap ~> Condition .
 eq labelsCond(T1 = T2 /\ Cond, M, OPDS, OPDM)
  = labelsT(T1, getKind(M,leastSortsT(M,T1)), M, OPDS, OPDM) = labelsT(T2, getKind(M,leastSortsT(M,T1)), M, OPDS, OPDM)
    /\ labelsCond(Cond, M, OPDS, OPDM) .
 eq labelsCond(T1 := T2 /\ Cond, M, OPDS, OPDM)
  = labelsT(T1, getKind(M,leastSortsT(M,T1)), M, OPDS, OPDM) := labelsT(T2, getKind(M,leastSortsT(M,T1)), M, OPDS, OPDM)
    /\ labelsCond(Cond, M, OPDS, OPDM) .
 eq labelsCond(T1 => T2 /\ Cond, M, OPDS, OPDM)
  = labelsT(T1, getKind(M,leastSortsT(M,T1)), M, OPDS, OPDM) => labelsT(T2, getKind(M,leastSortsT(M,T1)), M, OPDS, OPDM)
    /\ labelsCond(Cond, M, OPDS, OPDM) .
 eq labelsCond(Trm : T /\ Cond, M, OPDS, OPDM)
  = labelsT(Trm, getKind(M,T), M, OPDS, OPDM) : T
    /\ labelsCond(Cond, M, OPDS, OPDM) .
 eq labelsCond(nil, M, OPDS, OPDM) = nil .

 op labelsTs : TermList TypeList Module OpDeclSet OpDeclOpDeclSetMap ~> TermList  .
 eq labelsTs((Trm,Trms), T Tl, M, OPDS, OPDM)
  = labelsT(Trm,T,M,OPDS,OPDM), labelsTs(Trms,Tl, M,OPDS,OPDM) .
 eq labelsTs(empty,nil,M,OPDS,OPDM) = empty .

 op labelsT : Term Type Module OpDeclSet OpDeclOpDeclSetMap ~> Term .
 eq labelsT(C, T, M, OPDS, OPDM ) 
  = if getType(C) == 'Qid then mkConstant(downKLabel(getName(C)),KLabel) 
    else labelsT(C, T, M, OPDS, OPDM, findOp(M, OPDS, getName(C), nil, getType(C))) fi .
 eq labelsT(V, T, M, OPDS, OPDM) = V .
 eq labelsT('if_then_else_fi[Trms],T,M,OPDS,OPDM)
  = 'if_then_else_fi[labelsTs(Trms, 'Bool T T, M, OPDS,OPDM)] .
--- eq labelsT('_==Bool_[T1,T2],T,M,OPDS,OPDM)
---  = '_==Bool_[labelsTs((T1,T2), leastSort(M,T1) leastSort(M, T2), M, OPDS,OPDM)] .
 eq labelsT(Q[Trms], T, M, OPDS, OPDM)
  = labelsT(Q[Trms], T, M, OPDS, OPDM, findOp(M, OPDS,Q, leastSortsTs(M, Trms), T)) [owise] .

 op labelsT : Term Type Module OpDeclSet OpDeclOpDeclSetMap OpDecl ~> Term .
--- subsorted terms becoming klabels
 eq labelsT(Q[Trms], T, M, OPDS, OPDM (Op |-> none), Op)
  =  kApply(mkListLabel(Q), labelsTs(Trms, getTypes(countTerms(Trms), Op), M, OPDS, OPDM (Op |-> none))) .
 eq labelsT(Q[Trms], T, M, OPDS, OPDM (Op |-> (op Q' : nil -> T' [AS] .)), Op)
  =  kApply(mkConstant(Q',T'), labelsTs(Trms, getTypes(countTerms(Trms), Op), M, OPDS, OPDM (Op |-> (op Q' : nil -> T' [AS] .)))) .
 eq labelsT(Q[Trm], T, M, OPDS, OPDM (Op |-> (op Q : T' -> T'' [AS] .)), Op)
  =  kApply(Q[labelsT(Trm, T', M, OPDS, OPDM (Op |-> (op Q : T' -> T'' [AS] .)))],empty) .
 eq labelsT(Q[Trms], T, M, OPDS, OPDM, Op)
  = Q[labelsTs(Trms, getTypes(countTerms(Trms), Op), M, OPDS, OPDM)] [owise] .
 eq labelsT(C, T, M, OPDS, OPDM (Op |-> (op Q' : nil -> T' [AS] .)), Op)
  =  kApply(mkConstant(Q',T'), empty) .
 eq labelsT(C, T, M, OPDS, OPDM, Op)
  = C [owise] .

 sort OpDeclOpDeclSetMap .
 op _|->_ : OpDecl OpDeclSet -> OpDeclOpDeclSetMap .
 op __ : OpDeclOpDeclSetMap OpDeclOpDeclSetMap -> OpDeclOpDeclSetMap [assoc comm id: empty] .
 op empty : -> OpDeclOpDeclSetMap .

 op _[_] : OpDeclOpDeclSetMap OpDecl -> OpDeclSet .
 eq ((Op |-> LabelOp) OPDM)[Op] = LabelOp .
 eq OPDM[Op] = none [owise] .

 op getKeys : OpDeclOpDeclSetMap ~> OpDeclSet .
 eq getKeys((Op |-> OPDS) OPDM) = Op getKeys(OPDM) .
 eq getKeys(empty) = none .

 op pseudoKOps : OpDeclSet -> OpDeclSet .
 eq pseudoKOps(OPDS) = getOps(removeOps(OPDS,kops), ksorts) .
 
 op processOps : OpDeclSet ~> OpDeclOpDeclSetMap .
 eq processOps(Op OPDS) = (Op |-> processOp(Op)) processOps(OPDS) .
 eq processOps(none) = empty .

 op processOp : OpDecl ~> OpDeclSet .
 eq processOp(op Q : T -> T' [AS metadata("builtin wrapper")] .)
  = (op Q : T -> mkKLabelSort(T',"") [AS metadata("builtin wrapper")] .) .
 eq processOp(op Q : T -> T' [AS metadata("list wrapper")] .)
  = none .
 eq processOp(op Q : Tl -> T [AS] .)
  = (op mkKLabel(Q) : nil -> mkKLabelSort(T,metadataString(AS)) [removeNaryAttrs(AS) metadata("arity " + string(arity(Tl),10))] .) [owise] .
endfm


