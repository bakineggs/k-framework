# add java (.java, and .class), and antlr (.g, and .tokens) extensions
# to the list of known file extentions
.SUFFIXES: .java .class .g .tokens

# generic 
JC = javac
JVM = java
CLASSPATH=antlrworks-1.4.jar:.
JFLAGS = -classpath $(CLASSPATH)
ANTLR_ROOT_DIR = ~/antlr
ANTLR_TOOL = org.antlr.Tool

# generate .java and .tokens files for a .g file
.g.tokens:
	$(JVM) $(JFLAGS) $(ANTLR_TOOL) $<

# compile a .java file into one or more .class files
.java.class:
	$(JC) $(JFLAGS) $<


#
LEXER_GRAMMARS = 
GRAMMARS = antlr.g \
           unwrapBuiltins.g
TREE_GRAMMARS = antlrTreePass1.g \
                antlrTreePass2.g \
                antlrTreePass3.g
TOKENS = $(LEXER_GRAMMARS:.g=.tokens) \
         $(GRAMMARS:.g=.tokens) \
         $(TREE_GRAMMARS:.g=.tokens)
LEXERS = $(LEXER_GRAMMARS:.g=.java) \
         $(GRAMMARS:.g=Lexer.java)
PARSERS = $(GRAMMARS:.g=Parser.java)
WALKERS = $(TREE_GRAMMARS:.g=.java)
JAVA_GEN = $(LEXERS) $(PARSERS) $(WALKERS)
JAVA_SRC = $(JAVA_GEN) \
           antlrTest.java \
           unwrapBuiltinsMain.java
CLASSES = $(JAVA_SRC:.java=.class)
MAIN = antlrTest 

# targets
# default target is all
all: build

# build target
build: classes

classes: tokens $(CLASSES)

tokens: $(TOKENS)

# run target (depends on build)
run: build
	$(JVM) $(JFLAGS) $(MAIN)

# clean target removes the .class files and the files generated by antlr
clean:
	rm -rf *.class $(JAVA_GEN) *.tokens *~

