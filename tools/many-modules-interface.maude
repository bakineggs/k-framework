load many-modules

mod MANY-MODULES-META is
  including MANY-MODULES .
  including META-LEVEL-EXTRAS .
  including META-K-MODULES .
  including META-K-BUILTINS .
  var NoManyModules ManyModules : String .
  var Q QNoManyModules QManyModules : Qid .
  var M : Module . var MS : ModuleSet .
  op manyModules : String String ~> Module .
  eq manyModules(NoManyModules, ManyModules) = manyModules(qid(NoManyModules), qid(ManyModules)) .
  op manyModules : Qid Qid ~> Module .
  eq manyModules(QNoManyModules,QManyModules) = manyModules(QManyModules,  getAllImportsBut(QNoManyModules, kModules ; builtinModules ; 'K-LATEX , "-BUILTIN-MODULE")) .

  op compileMANY-MODULES : Module ~> Module .
  eq compileMANY-MODULES(M) = manyModules(getName(M), getAllImportsBut(M,  nil, kModules ; builtinModules ; getName(M), "-BUILTIN-MODULE", none, empty, nil)) .


  eq modules(MS, IL (including 'K-LATEX .) IL') = modules(MS, IL IL') .
  eq '@latex[Ct:Constant] = empty .

  var IL IL' : ImportList .
endm

mod MANY-MODULES-LOOP is 
  including LOOP-MODE + META-LEVEL .
  including MODULE-META-PRETTY-PRINT .
  op many-modules : -> System .
  op idle : -> State .
  var Q NoManyModules ManyModules : Qid . var QIL QIL' : QidList . var FM : Module .
  eq many-modules = [nil, idle, 
 'Usage: 'manyModules '<Name> '<Suffix> '.] .


  op wrapper : Qid -> Module .
  eq wrapper(Q) = (mod 'MKKR is including Q . 
                    sorts none . none none none none none endm) .
  op error : -> [Module] .
  op print : Module [Module] -> QidList .
  var Str : String . var M FM' : Module .
  eq print(M,FM) = eMetaPrettyPrint(setRls(setEqs(FM,none),none), FM) [owise] .
  crl ['manyModules NoManyModules ManyModules QIL, idle, QIL'] 
   => [QIL, idle, print(upModule(NoManyModules,false), FM )] 
   if FM := downTerm(getTerm(
             metaReduce(wrapper('MANY-MODULES-META),
                        'manyModules[upTerm(string(NoManyModules)),upTerm(string(ManyModules))])),error) .
endm
