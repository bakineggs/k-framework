load sanity-checks
load id-to-string
load compile-program

mod COMPILE-PROGRAM-META is
  including COMPILE-PROGRAM .
  including META-LEVEL-EXTRAS .
  var NoCompiledPgm CompiledPgm Pgm : String . 
  var QNoCompiledPgm QCompiledPgm QPgm : Qid . 
  op compileProgram : String String String ~> Module .
  eq compileProgram(CompiledPgm, NoCompiledPgm, Pgm) = compileProgram(qid(CompiledPgm), qid(NoCompiledPgm), qid(Pgm)) .
  op compileProgram : Qid Qid Qid ~> Module .
  eq compileProgram(QCompiledPgm,QNoCompiledPgm, QPgm) = $compileProgram(upModule(QNoCompiledPgm, true), compileProgram(upModule(QCompiledPgm,true), upModule(QNoCompiledPgm, true), QPgm)) .
  var Trm : Term . var T : Type .  var Q : Qid .  var M M' : Module .
  op $compileProgram : Module Module ~> Module .
  eq $compileProgram(M, M') = M' .
  eq $compileProgram(M, errorM(Trm, T, Q))
   = moduleError('\r 'Error: '\o 'The 'sanity 'checks 'phase 'of 'compilation 'failed 'for 'program '\g Q '\o '. '\n '\s '\s 'Term '\n '\t '\r metaPrettyPrint(M, Trm) '\o '\n '\s '\s 'does 'not 'parse 'to 'a 'sort 'but 'rather 'to 'kind '\n '\t '\r T '\o '. '\n '\s '\s 'Please 'resolve 'that 'before 'continuing.) .
endm

mod COMPILE-PROGRAM-LOOP is 
  including LOOP-MODE + META-LEVEL .
  including MODULE-META-PRETTY-PRINT .
  op compile-program : -> System .
  op idle : -> State .
  var Q NoCompiledPgm CompiledPgm Pgm : Qid . var QIL QIL' : QidList . var FM : [Module] .
  eq compile-program = [nil, idle, 
 'Usage: 'compileProgram '<CompiledModule> '<ProgramModule> '<programName> '.] .


  op wrapper : Qid -> Module .
  eq wrapper(Q) = (mod 'MKKR is including Q . 
                    sorts none . none none none none none endm) .
  op error : -> [Module] .
  op print : [Module] -> QidList .
  var M : Module .
  eq print(M) = eMetaPrettyPrint(setEqs(M,none), M) .
  eq print(moduleError(QIL)) = QIL .
 
  crl ['compileProgram CompiledPgm NoCompiledPgm Pgm QIL, idle, QIL'] 
   => [QIL, idle, print(FM )] 
   if FM := downTerm(getTerm(
             metaReduce(wrapper('COMPILE-PROGRAM-META),
                        'compileProgram[upTerm(string(CompiledPgm)),upTerm(string(NoCompiledPgm)),upTerm(string(Pgm))])),error) .
endm
