load lists-to-wrappers

mod LISTS-TO-WRAPPERS-META is
  including LISTS-TO-WRAPPERS .
  including META-LEVEL-EXTRAS .
  including META-K-BUILTINS .
  including META-K-MODULES .
  var NoLists2wrappers Lists2wrappers : String .  var M : Module .
  var Q QNoLists2wrappers QLists2wrappers : Qid .  var IL : ImportList .
  op makeLists2wrappers : String String ~> Module .
  eq makeLists2wrappers(NoLists2wrappers, Lists2wrappers) = makeLists2wrappers(qid(NoLists2wrappers), qid(Lists2wrappers)) .
  op makeLists2wrappers : Qid Qid ~> Module .
  eq makeLists2wrappers(QNoLists2wrappers,QLists2wrappers) = makeLists2wrappers(QLists2wrappers, upModule(QNoLists2wrappers, false), upModule(QNoLists2wrappers, true), empty) .

  op compileLISTS-TO-WRAPPERS : Module AttrSet ~> Module .
  eq compileLISTS-TO-WRAPPERS(M, AS:AttrSet) = setName(makeLists2wrappers(getName(M), M, flatten(M), empty), getName(M)) .
endm

mod LISTS-TO-WRAPPERS-LOOP is 
  including LOOP-MODE + META-LEVEL .
  including MODULE-META-PRETTY-PRINT .
  op lists-to-wrappers : -> System .
  op idle : -> State .
  var Q NoLists2wrappers Lists2wrappers : Qid . var QIL QIL' : QidList . var FM : Module .
  eq lists-to-wrappers = [nil, idle, 
 'Usage: 'makeLists2wrappers '<Name> '<Suffix> '.] .


  op wrapper : Qid -> Module .
  eq wrapper(Q) = (mod 'MKKR is including Q . 
                    sorts none . none none none none none endm) .
  op error : -> [Module] .
  op print : Module [Module] -> QidList .
  var Str : String . var M FM' : Module .
  eq print(M,FM) = eMetaPrettyPrint(setRls(setEqs(FM,none),none), FM) [owise] .
  crl ['makeLists2wrappers NoLists2wrappers Lists2wrappers QIL, idle, QIL'] 
   => [QIL, idle, print(upModule(NoLists2wrappers,false), FM )] 
   if FM := downTerm(getTerm(
             metaReduce(wrapper('LISTS-TO-WRAPPERS-META),
                        'makeLists2wrappers[upTerm(string(NoLists2wrappers)),upTerm(string(Lists2wrappers))])),error) .
endm
