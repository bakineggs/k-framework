load make-k-rules-nd

mod MAKE-K-RULES-META is
  including MAKE-K-RULES .
  including META-LEVEL .
  var KRules NoKRules : String .
  var QKRules QNoKRules : Qid .  var M : Module .
  op resolveKRules : String String ~> Module .
  eq resolveKRules(KRules, NoKRules) = resolveKRules(qid(KRules), qid(NoKRules)) .
  op resolveKRules : Qid Qid ~> Module .
  eq resolveKRules(QKRules,QNoKRules) = resolveKRules(QNoKRules, upModule(QKRules, false), upModule(QKRules, true), 'k) .

  op compileMAKE-K-RULES : Module ~> Module .
  eq compileMAKE-K-RULES(M) = resolveKRules(getName(M), M, flatten(M), 'k) .
endm

mod MAKE-K-RULES-LOOP is 
  including LOOP-MODE + META-LEVEL .
  including MODULE-META-PRETTY-PRINT .
  op make-k-rules : -> System .
  op idle : -> State .
  var Q KRules NoKRules : Qid . var QIL QIL' : QidList . var FM : Module .
  eq make-k-rules = [nil, idle, 
 'Usage: 'resolveKRules '<Name> '.] .


  op wrapper : Qid -> Module .
  eq wrapper(Q) = (mod 'MKKR is including Q . 
                    sorts none . none none none none none endm) .
  op error : -> [Module] .
  op print : Module [Module] -> QidList .
  var Str : String . var M FM' : Module .
  eq print(M,FM) = eMetaPrettyPrint(setRls(setEqs(FM,none),none), FM) [owise] .
  crl ['resolveKRules KRules NoKRules QIL, idle, QIL'] 
   => [QIL, idle, print(upModule(KRules,false), FM )] 
   if FM := downTerm(getTerm(
             metaReduce(wrapper('MAKE-K-RULES-META),
                        'resolveKRules[upTerm(string(KRules)),upTerm(string(NoKRules))])),error) .
endm
