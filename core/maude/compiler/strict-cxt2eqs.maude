mod STRICTCXT2EQS is
  including K-SORTS .
  including K-META-OPS .
  including STRICT-ATTRS .
  including K-STRICTNESS-OPS .
  including META-TERM-EXTRAS .
  including STRING-EXTRAS .
  including META-MODULE-EXTRAS .
  including META-K-MODULE .
  including META-K-CONTEXTS .
  including META-K-COOL .
  including META-K-RULES .
  including METADATA-EXTRAS .
  including COMPILATION-ATTRS .
  including META-K-WRAPPERS .
  var T : Term . var V : Variable .  var Trl : TermList .  
  var Sort S : Sort .  var Ss : SortSet .
  var AS AS' AS'' : AttrSet . var A : Attr .
  var MAS : MembAxSet . var Mb : MembAx .
  var Eqs Eqs' : EquationSet . var Rls Rls' : RuleSet . var Q : Qid .
  vars Type Type' : Type .  var OPDS : OpDeclSet . var KCS : KContextSplit .
  vars T1 T2 : Term . var Cond : TermList .
  sort MASEqsPair .


  op coolOps : -> OpDeclSet .
  eq coolOps 
   = (op 'cool : K -> K [none] .) 
  .

  op defaultCoolEqs : SortSet -> EquationSet .
  eq defaultCoolEqs(S ; Ss)
   = (eq mkCell(cool(S), mkVariable('K,K)) 
       = mkCell(S, 'cool[mkVariable('K,K)]) 
      [metadata(pair("supercool","start"))] .)
     defaultCoolEqs(Ss) .
  eq defaultCoolEqs(none) 
   = (eq 'cool[mkVariable('zk,K)] = mkVariable('zk,K) 
      [owise metadata(pair("supercool","end"))] .) .

  op {_,_,_} : MembAxSet EquationSet RuleSet -> MASEqsPair [ctor] .

  op strictCxt2eqs : Module MembAxSet AttrSet ~> MASEqsPair .
  eq strictCxt2eqs(M,MAS, AS) = strictCxt2eqs(M, MAS, none, none, AS) .
  op strictCxt2eqs : Module MembAxSet EquationSet RuleSet AttrSet ~> MASEqsPair . 
 ceq strictCxt2eqs(M, Mb MAS, Eqs, Rls, AS)
   = strictCxt2eq(M, MAS, Eqs, Rls, pReplaceCxt(T,1),pReplaceCxt(T,2), getAttrs(KCS), getCondition(KCS), AS)
  if KCS := splitKContext(Mb) /\ T := getContents(KCS) .
  eq strictCxt2eqs(M, MAS,Eqs, Rls, AS) = {MAS,Eqs, Rls} [owise] . 

  op strictCxt2eq : Module MembAxSet EquationSet RuleSet Term Term AttrSet TermList AttrSet ~> MASEqsPair .
  eq strictCxt2eq(M, MAS, Eqs, Rls, T1, T2, kstrict(nil,Q) AS, Cond, AS') 
   = strictCxt2eqs(M, MAS, Eqs coolingEqs(M, T1, T2, Q, AS), Rls, heating(M, T1, T2, Q, Cond, AS, AS'), AS') .

  eq strictCxt2eq(M, MAS, Eqs, Rls, T1, T2, AS, Cond, AS')
   = strictCxt2eq(M, MAS, Eqs, Rls, T1, T2, kstrict(nil,klabel) AS, Cond, AS') [owise] .

  op strictCxt2eqs : Module MembAxSet EquationSet RuleSet MASEqsPair AttrSet ~> MASEqsPair . 
  eq strictCxt2eqs(M, MAS, Eqs, Rls, {none, Eqs', Rls'}, AS)
   = strictCxt2eqs(M, MAS, Eqs Eqs', Rls Rls', AS) [print "Eqs: " Eqs' " and Rls: " Rls'] .
   
  
  op heating : Module Term Term Qid TermList AttrSet AttrSet -> MASEqsPair .
  eq heating(M, T1, T2, Q, Cond, AS, AS')
   = strictCxtHeat(kWrap(Q, T1[hole <- mkVariable('Kcxt,NeK)]), kWrap(Q, kra(T2[hole <- mkVariable('Kcxt,NeK)], freezeTerm(M, T1))), andBool(strictCond(mkVariable('Kcxt,NeK),Q),Cond[hole <- mkVariable('Kcxt,NeK)]), AS, AS') .

  op coolingEqs : Module Term Term Qid AttrSet -> EquationSet .
  eq coolingEqs(M, T1, T2, Q, AS)
   =  (ceq kWrap(Q, kra(mkVariable('Kcxt,NeK), freezeTerm(M, T1)))
         = kWrap(Q, T1[hole <- mkVariable('Kcxt,NeK)])
        if strictCondTerm(mkVariable('Kcxt,NeK),Q) = bool2K(trueCt)
       [metadata(AS pair("cooling",""))] .) 
      if T2 == hole then 
          (eq 'cool[kra(kra('_`(_`)[mkVariable('KcxtL,KLabel),mkVariable('Kcxt,KList)], freezeTerm(M, T1)),'Rest:K)]
        = 'cool[kra(T1[hole <- '_`(_`)[mkVariable('KcxtL,KLabel),mkVariable('Kcxt,KList)]],'Rest:K)]
       [metadata(AS pair("supercool",""))] .)
      else 
     (ceq 'cool[kra(kra('_`(_`)[mkVariable('KcxtL,KLabel),mkVariable('Kcxt,KList)], freezeTerm(M, T1)),'Rest:K)]
        = 'cool[kra(T1[hole <- '_`(_`)[mkVariable('KcxtL,KLabel),mkVariable('Kcxt,KList)]],'Rest:K)]
        if '_=/=Bool_[getTopLabel(T2),mkVariable('KcxtL,KLabel)] = 'true.Bool 
       [metadata(AS pair("supercool", "result"))] .)
     (ceq 'cool[kra(kra(T2[hole <- '_`(_`)[mkVariable('KcxtL,KLabel),mkVariable('Kcxt,KList)]], freezeTerm(M, T1)),'Rest:K)]
        = 'cool[kra(T1[hole <- '_`(_`)[mkVariable('KcxtL,KLabel),mkVariable('Kcxt,KList)]],'Rest:K)]
        if neqBool(strictCondTerm('_`(_`)[mkVariable('KcxtL,KLabel),mkVariable('Kcxt,KList)],Q), bool2K(trueCt)) = bool2K(trueCt)  
       [metadata(AS pair("supercool", "wrapper"))] .)
     fi  
     placeHolder(Q) .

  op strictCxtHeat : Term Term TermList AttrSet AttrSet ~> MASEqsPair .
  eq strictCxtHeat(T1,T2,empty, AS A, AS' computationals(A AS''))
   = {none, none, (rl T1 => T2 [metadata(AS A pair("heating",""))] .)} .
  eq strictCxtHeat(T1,T2,T, AS A, AS' computationals(A AS''))
   = {none, none, (crl T1 => T2 if T = bool2K(trueCt) [metadata(AS A pair("heating",""))] .)} .
  eq strictCxtHeat(T1,T2,empty, AS, AS' computationals(pair("default","") AS''))
   = {none, none, (rl T1 => T2 [metadata(AS pair("default","") pair("heating",""))] .)} .
  eq strictCxtHeat(T1,T2,T, AS, AS' computationals(pair("default","") AS''))
   = {none, none, (crl T1 => T2 if T = bool2K(trueCt) [metadata(AS pair("default","") pair("heating",""))] .)} .
  eq strictCxtHeat(T1,T2,empty, AS, AS')
   = {none, (eq T1 = T2 [metadata(AS pair("heating",""))] .), none} [owise] .
  eq strictCxtHeat(T1,T2,T, AS, AS')
   = {none, (ceq T1 = T2 if T = bool2K(trueCt) [metadata(AS pair("heating",""))] .), none} [owise] .



  op freezeTerm : Module Term -> Term .
  eq freezeTerm(M, T) = kApply(
   freezeLabel(untokenize(metaPrettyPrint(M,T, mixfix flat number rat))),
   freezeVariables(M, removeHole(noDuplicates(getVars(T))))) .

  op freezeVariables : Module TermList ~> TermList .
  op freezeVariable : Module Variable ~> Variable .
  eq freezeVariables(M, (V,Trl)) 
   = (freezeVariable(M, V),freezeVariables(M, Trl)) .
  eq freezeVariables(M, empty) = empty .

  eq freezeVariable(M, V) = freezeVariable(string(V),makeK(M,V, getType(V))) .

  op makeK : Module Variable Type ~> Term . 
  eq makeK(M, V, Type) = makeK(M, V, Type, sortLeq(M, Type, KList)) .

  op makeK : Module Variable Type Bool ~> Term . 
  eq makeK(M, V, Type, true) = V .
  eq makeK(M, V, Type, B:[Bool]) 
   = kApply(findWrapper(getOps(M), Type)[V],empty) .


  op strictCondTerm : Term Qid ~> Term .
  eq strictCondTerm(T, Q) = kApply(resultLabel(Q),T) .

  op strictCond : Term Qid ~> Term .
  eq strictCond(T, Q)
   = neqBool(strictCondTerm(T,Q),bool2K(trueCt)) .
  

  op strictCxt2eqs : Qid Qid Module Module SortSet AttrSet ~> Module .
  var Syntax StrictEqs : Qid . var M Flat : Module .

  eq strictCxt2eqs(Syntax,StrictEqs,M,Flat, Ss, AS) 
   = strictCxt2eqs(Syntax,StrictEqs,strictCxt2eqs(Flat, getMbs(M), AS), Ss) . --- [print "Syntax: " Syntax ", StrictEqs: " StrictEqs ", StrictCxt: " M] .

  op strictCxt2eqs : Qid Qid MASEqsPair SortSet ~> Module .
  eq strictCxt2eqs(Syntax, StrictEqs, {MAS,Eqs, Rls}, Ss) 
   = addOps(declareResultLabels(Eqs) coolOps,setMbs(addRls(Rls, addEqs(defaultCoolEqs(Ss), 
        addEqs(generateResultEquations(Eqs), addImports((including Syntax . including 'K-STRICTNESS .), setName(emptySModule, StrictEqs))))), MAS)) .


  op placeHolder : Qid -> Equation .


  op declareResultLabels : EquationSet -> OpDeclSet .
  eq declareResultLabels(placeHolder(Q) Eqs) = (op getName(resultLabel(Q)) : nil -> KLabel [none] .) declareResultLabels(Eqs) .
  eq declareResultLabels(Eqs) = none [owise] .


  op generateResultEquations : EquationSet -> EquationSet .
  eq generateResultEquations(placeHolder(Q) Eqs)
   = generateResultEquations(Eqs) (eq kApply(resultLabel(Q), (mkVariable('K1,K),mkVariable('K2,K), mkVariable('L,KList))) = andBool(kApply(resultLabel(Q), (mkVariable('K1,K))), kApply(resultLabel(Q), (mkVariable('K2,K), mkVariable('L,KList)))) [none] .) .
---(
   = generateResultEquations(Eqs) (eq kApply(resultLabel(Q),mkVariable('L,KList)) = bool2K(falseCt) [owise] .) .
---)
  eq generateResultEquations(Eqs) = Eqs [owise] .
endm

