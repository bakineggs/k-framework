fmod K-SORTS is including QID .
  ops KSentence : -> Qid .
  eq KSentence = 'KSentence .
endfm

fmod K-META-OPS is including META-TERM .
  op nilKList : -> Qid .
  eq nilKList = '.List`{K`}.List`{KResult`} .

  op nilK : -> Qid .
  eq nilK = '..K .

  op kra_ : TermList -> Term .
  eq kra(Trl1,'_~>_[Trl],Trl2) = kra(Trl1,Trl,Trl2) .
  eq kra(empty) = nilK .
  eq kra(T) = T [owise] .
  eq kra(Trl) = '_~>_[Trl] [owise] .
 
  op klabel : -> Qid .
  eq klabel = 'k .
 
  var T : Term .  var Trl Trl1 Trl2 : TermList . 

  op kList : TermList -> Term .
  eq kList(T) = T .
  eq kList(empty) = nilKList .
  eq kList(Trl) = '_`,`,_[Trl] [owise] .

  op kApplyS : -> Qid .
  eq kApplyS = '_`(_`) .

  op kApply : Term TermList -> Term .
  eq kApply(T, Trl) = kApplyS[T,kList(Trl)] .
endfm

fmod META-K-BUILTINS is
  including META-LEVEL-EXTRAS .
  including META-MODULE-EXTRAS .
  op Builtins : -> Sort .
  eq Builtins = 'Builtins .
  op builtinSorts : Module -> SortSet [memo] .
---  eq builtinSorts = getSorts(upModule('PL-BUILTINS, true)) .
  eq builtinSorts(M:Module) = getSubsorts(flatten(M:Module), Builtins) .
  op builtinModules : ~> SortSet [memo] .
  eq builtinModules 
   = getImportNames(getImports(upModule('PL-BUILTINS, false))) .
  
  op isBuiltin : Module ~> Bool .
  eq isBuiltin(M) = isBuiltinModule(string(getName(M))) .
  op isBuiltinModule  : String -> Bool .
  eq isBuiltinModule(S) = find(S, "-BUILTINS",0) :: Nat .

  var M : Module . var S : String .
endfm

fmod META-K-MODULES is
  including META-MODULE .
  op kModules : ~> SortSet [memo] .
  eq kModules 
   = 'K-TECHNIQUE ; 'K-RESULT ; 'K-SENTENCE ; 'K-WHERE ; 'K-PROPER ; 'K-STRICNESS ; 'K-CONTEXTS ; 
     'K-WRAPPERS-LABELS ; 'K-WRAPPERS ; 'K-RULES ; 'K-POLYMORPHIC-VARIABLES ; 
     'K-OPEN-CELLS ; 'K-CONFIG ; 'K-DESTRUCTORS ; 'K-QUOTED-LABELS ;
     'K-CONDITION-SEARCH ; 'K-LATEX .
endfm

fmod META-K-MODULE is
  including META-LEVEL-EXTRAS .
  including META-K-BUILTINS .
  var S : Sort .  var T T' T1 T2 : Type .  var SSDS : SubsortDeclSet . 
  vars OPDS : OpDeclSet .  var Op : OpDecl .  var Q : Qid . 
  var AS : AttrSet .  var M : Module . var SS : SortSet .  var Tl : TypeList .

  ops KProper KResult NeK K KLabel KProperLabel KResultLabel KHybridLabel : -> Sort .
  ops NeProperList ResultList NeResultList NeKList KList : -> Sort .
  eq KProper = 'KProper .  eq KResult = 'KResult .
  eq NeK = 'NeK .  eq K = 'K .
  eq KLabel = 'KLabel .  eq KHybridLabel = 'KHybridLabel .
  eq KProperLabel = 'KProperLabel .  eq KResultLabel = 'KResultLabel .
  eq ResultList = 'List`{KResult`} .  eq NeProperList = 'NeKProperList .  eq NeResultList = 'NeList`{KResult`} .  eq KList = 'List`{K`} .  eq NeKList = 'NeList`{K`} .
  ops ksorts klabelsorts : -> SortSet [memo] .
  eq ksorts = KProper ; KResult ; NeK ; K .
  
  eq klabelsorts = KProperLabel ; KResultLabel ; KLabel ; KHybridLabel .

  op klistSorts : -> SortSet [memo] .
  eq klistSorts = NeProperList ; ResultList ; NeResultList ; NeKList ; KList .

  op isKSort : Type -> Bool [memo] .
  eq isKSort(T) = T in (ksorts ; Builtins) .

  op isKListSort : Type -> Bool [memo] .
  eq isKListSort(T) = T in klistSorts .

  op ksubsorts : -> SubsortDeclSet [memo] .
  eq ksubsorts = (
    subsort KProper < NeK .
    subsort KResult < NeK .
    subsort KProper < K .
    subsort KResult < K .
    subsort NeK < K .
    subsort Builtins < NeK .
    ) .

  op klabelsubsorts : -> SubsortDeclSet [memo] .
  eq klabelsubsorts = (
    subsort KProperLabel < KLabel .
    subsort KResultLabel < KLabel .
    subsort KHybridLabel < KLabel .
    ) .

  op ksupersorts : -> SubsortDeclSet [memo] .
  eq ksupersorts = (
    subsort KProper < NeK .
    subsort KProper < K .
    subsort KProper < NeProperList .
    subsort KResult < NeK .
    subsort KResult < K .
    subsort NeK < K .
      subsort K < KList .
      subsort K < NeKList .
      subsort KResult < NeResultList .
      subsort KResult < ResultList .
      subsort KResult < NeKList .
      subsort KResult < NeK .
     ) .

  op kops : -> OpDeclSet [memo] .
  eq kops = (
    op '. : nil -> K [none] .
    op '_`(_`) : KLabel KList -> NeK [none] .
    op '_`(_`) : KProperLabel KList -> KProper [none] .
    op '_`(_`) : KResultLabel KList -> KResult [none] .
    op '_`(_`) : KHybridLabel NeProperList -> KProper [none] .
    op '_`(_`) : KHybridLabel ResultList -> KResult [none] .
    op '_~>_ : K K -> K [none] .
    op '`[HOLE`] : nil -> K [none] .
    op '_`(_`) : 'Map K -> K [none] .
    
  ) .

 op pseudoKSubsorts : SubsortDeclSet -> SubsortDeclSet .
 eq pseudoKSubsorts(SSDS) = getSubsorts(removeSubsorts(SSDS,ksubsorts), ksorts) .
 
 op pseudoKLabelSubsorts : SubsortDeclSet -> SubsortDeclSet .
 eq pseudoKLabelSubsorts(SSDS) = getSubsorts(removeSubsorts(SSDS,klabelsubsorts), klabelsorts) . 

 op maximalKSubsorts : Module -> SubsortDeclSet .
 eq maximalKSubsorts(M)
  = getSubsorts(getSupersorts(getSubsorts(M),getMaximalSorts(M, getSubsorts(pseudoKSubsorts(getSubsorts(M))))), ksorts) .
 
 op pseudoKSupersorts : SubsortDeclSet -> SubsortDeclSet .
 eq pseudoKSupersorts(SSDS) = getSupersorts(removeSubsorts(SSDS,ksupersorts), ksorts) . 
 
  op pseudoKOps : OpDeclSet -> OpDeclSet .
  eq pseudoKOps(OPDS) = getOps(removeOps(OPDS,kops), ksorts) .

  op pseudoKListSorts : SubsortDeclSet OpDeclSet -> SubsortDeclSet .
  eq pseudoKListSorts(SSDS, OPDS)
   = (getSupersorts(removeSubsorts(SSDS,ksupersorts), K ; KResult)) .

  op syntaxSorts :  Module ~> SortSet .
  eq syntaxSorts(M) = removeSorts(getSubsorts(M, K),ksorts ; builtinSorts(M) ; getSubsorts(getList2KSubsorts(M))) .

  op syntaxOps : Module -> OpDeclSet .
  eq syntaxOps(M) = getOps(getOps(M), syntaxSorts(M)) .

  op getList2KSubsorts : Module -> SubsortDeclSet .
  eq getList2KSubsorts(M) = getList2KSubsorts(M, getSubsorts(M,K)) .

  op metaAssocSorts : -> SortSet [memo] .
  eq metaAssocSorts = klistSorts ; K ; KProper ; KResult ; NeK ; 'Bag ; 'NeBag ; 'Set ; 'NeSet ; 'List ; 'NeList ; 'Map ; 'NeMap .

  op getListSorts : Module -> SortSet .
  eq getListSorts(M) = removeSorts(getListSorts(getOps(M)), metaAssocSorts ; builtinSorts(M)) .

  op isListSort : Module Type -> Bool .
  eq isListSort(M,T) = isListSort(getListSorts(M),T) .
  
  op isListSort : SortSet Type -> Bool .
  eq isListSort(SS ; S , S) = true  .
  eq isListSort(SS, T) = false [owise].

  op getListSorts : OpDeclSet -> TypeSet .
  eq getListSorts(none) = none .
  eq getListSorts(Op OPDS) = getListSortsOp(Op) ;  getListSorts(OPDS) .
  
  op getListSortsOp : OpDecl -> TypeSet .
  eq getListSortsOp(op Q : T1 T2 -> T [assoc AS] .) = T1 ; T2 ; T .
  eq getListSortsOp(Op) = none [owise] .

  op getListSubsorts : Module -> SubsortDeclSet .
  eq getListSubsorts(M) = makeSubsorts(M, getListSorts(M), getMaximalSorts(M, getListSorts(M))) .

  op getResultLists : Module -> SortSet .
  eq getResultLists(M) = getSubsorts(makeSubsorts(M,getListSorts(M),KResult)) .


  op getNoResultListSubsorts : Module -> SubsortDeclSet .
  eq getNoResultListSubsorts(M) = removeSubsorts(getListSubsorts(M), getResultLists(M)) .

  
  op getList2KSubsorts : Module SortSet -> SubsortDeclSet .
  eq getList2KSubsorts(M, none) = none .
  eq getList2KSubsorts(M, T ; SS) 
   = if isListSort(M, T)
     then (subsort T < (if sortLeq(M,T,KResult) then KResult else K fi) .) 
        getList2KSubsorts(M, SS) 
     else getList2KSubsorts(M, SS) fi .

  op getK2ListSubsorts : Module SubsortDeclSet -> SubsortDeclSet .
  eq getK2ListSubsorts(M, none) = none .
  eq getK2ListSubsorts(M, (subsort T < T' .) SSDS) 
   = if isListSort(M, T') 
     then (subsort T < T' .)  getK2ListSubsorts(M, SSDS) 
     else getK2ListSubsorts(M, SSDS) fi .
endfm

fmod META-K-RULES is including K-SORTS .
  including META-MODULE-EXTRAS .
  var O Q : Qid . var T T' T1 T2 Trm Cxt : Term . var S : Type . var C : Term . 
  var Cond Cond' Tl : TermList . var N : Nat . var V : Variable . var Ct : Constant .
  var AS : AttrSet .  var RK : KRuleKind . var Str : String .

  sort KRuleKind .
  ops krl kcrl : -> KRuleKind .
  op error : Qid -> [KRuleKind] .

  ops symbol_ : KRuleKind -> Qid .
  eq symbol krl = 'rule_ .
  eq symbol kcrl = 'rule_if_ .  

  op replaceS : -> Qid .
  eq replaceS = '_=>_ .

  op getKRuleKind : Qid ~> KRuleKind . 
  eq getKRuleKind(Q) = if Q == symbol krl then krl else if Q == symbol kcrl then kcrl else error(Q) fi fi .

  sort KRuleSplit .
  op {_,_,_,_} : KRuleKind Term TermList AttrSet -> KRuleSplit .

  
  op splitKRule : MembAx ~> KRuleSplit .
 ceq splitKRule((mb Q[T] : S [AS] .))
   = {getKRuleKind(Q),T,empty,AS} if S := KSentence . 
 ceq splitKRule((mb Q[T,C] : S [AS] .))
   = {getKRuleKind(Q),T,C,AS} if S := KSentence . 

  op getContents : KRuleSplit -> Term .
  op getRuleKind : KRuleSplit -> KRuleKind .
  op getCondition : KRuleSplit -> TermList .
  op getAttrs : KRuleSplit -> AttrSet .
  eq getContents({RK,T,Cond,AS}) = T .
  op getKind : KRuleSplit -> KRuleKind .
  eq getKind({RK,T,Cond,AS}) = RK .
  eq getCondition({RK,T,Cond,AS}) = Cond .
  eq getAttrs({RK,T,Cond,AS}) = AS .

  op setContents : KRuleSplit Term -> KRuleSplit .
  eq setContents({RK,T,Cond,AS}, T') = {RK,T',Cond,AS} .
  eq setContents({RK,T,Cond,AS}, errorT(Trm,Cxt,Str)) 
   = {RK,errorT(Trm,T,Str),Cond,AS} .

  op setCondition : KRuleSplit TermList -> KRuleSplit .
  eq setCondition({RK,T,Cond,AS}, Cond') = {RK,T,Cond',AS} .

  op plugKRule : KRuleSplit ~> MembAx .
  eq plugKRule({RK,T,empty,AS}) = (mb symbol(RK)[T] : KSentence [AS] .) .
  eq plugKRule({RK,T,C,AS}) = (mb symbol(RK)[T,C] : KSentence [AS] .) [owise] .
  eq plugKRule({RK,errorT(Trm,Cxt,Str),Cond,AS})
   = errorMb(Trm, Cxt, Str, AS) .


  op splitReplace : Module Term Nat -> Term .
 ceq splitReplace(M, O[T1, T2],N) = if N == 1 then checkReplaceFreeTl(M, T1) else checkReplaceFreeTl(M, T2) fi
  if O == replaceS .
  eq splitReplace(M, O[Tl],N) = O[splitReplaceL(M, Tl,N)] [owise] .
  eq splitReplace(M, Ct,N) = Ct .
  eq splitReplace(M, V, N) = V .

  op splitReplaceL : Module TermList Nat -> TermList .
  eq splitReplaceL(M, (T, Tl),N) = splitReplace(M, T,N), splitReplaceL(M, Tl,N) .
  eq splitReplaceL(M, empty,N) = empty .


  op checkReplaceFreeTl : Module TermList ~> TermList .
  eq checkReplaceFreeTl(M, (O[Tl], Tl')) = if O == replaceS then errorT(O[Tl],mkVariable('`[`], leastSort(M,nth(Tl,0))), "K local rewrite could not be eliminated here.  maybe you have a rewrite within another rewrite?"), Tl' else $checkReplaceFreeTl(M, O[checkReplaceFreeTl(M, Tl)],Tl') fi .
  eq checkReplaceFreeTl(M, (Ct,Tl')) = Ct, checkReplaceFreeTl(M,Tl') .
  eq checkReplaceFreeTl(M, (V,Tl')) = V, checkReplaceFreeTl(M,Tl') .
  eq checkReplaceFreeTl(M, empty) = empty .

  op $checkReplaceFreeTl : Module Term TermList ~> TermList .
  eq $checkReplaceFreeTl(M, T, Tl) = T, checkReplaceFreeTl(M, Tl) .
  eq $checkReplaceFreeTl(M, T:[Term], Tl) = T:[Term], Tl [owise] .

  var M : Module .  var Tl' : TermList .
endfm

fmod K-META-CONFIG is 
  including META-K-RULES .
  including META-K-MODULE .
  including META-TERM-EXTRAS .
  including META-LEVEL .
  including INT .
  var Label Label' Ct MKey MVal : Constant . var LabelT LabelT' Contents Contents' T : Term .
  var Q Q' : Qid .  var B B' : Multiplicity . var E E' : Ellipses .  var M : Module .  
  var AS AS' : AttrSet .  var MAS : MembAxSet .  var S : Sort .  var Str : String .
  var SC : SplitCell .



  op attrsCtorS : -> Qid . eq attrsCtorS = '__ .
  op attrCtorS : -> Qid . eq attrCtorS = '_=_ .
  op colorKeyS : -> Qid .
  eq colorKeyS = 'color .
  op multiplicityKeyS : -> Qid .
  eq multiplicityKeyS = 'multiplicity .
  op ellipsesKeyS : -> Qid .
  eq ellipsesKeyS = 'ellipses .


  op extractConfTerm : Module ~> Term .
  eq extractConfTerm(M) = extractConfTerm(getMbs(M)) .
  op extractConfTerm : MembAxSet ~> Term .
  eq extractConfTerm((mb 'configuration_[T] : 'KSentence [AS] .) MAS) = T .

  op removeConfTerm : Module -> Module .
  eq removeConfTerm(M) = setMbs(M,removeConfTerm(getMbs(M))) .
  op removeConfTerm : MembAxSet -> MembAxSet .
  eq removeConfTerm((mb 'configuration_[T] : 'KSentence [AS] .) MAS) = MAS .
  eq removeConfTerm(MAS) = MAS [owise] .
  
  sort Ellipses .
  ops none : -> Ellipses .
  op error : -> [Ellipses] .
  op symbolE_ : Ellipses -> Qid .
  eq symbolE none = '<_>_</_> .

  op symbolES_ : Ellipses -> String .
  eq symbolES none = "none" .


  sort Multiplicity .
  ops maybe one some any : -> Multiplicity .

  sorts AttrKey AttrVal .

  var AK : AttrKey .
  var AV AV' : AttrVal .
  var CA : Term .

  op _|->_ : AttrKey AttrVal -> Attr [prec 0] .
  op cellLabel:_ : Term -> Attr .
  ops multiplicity ellipses color : -> AttrKey  .
  subsort Multiplicity Ellipses String < AttrVal .
  
  op symbolAK_ : AttrKey ~> Qid .
  eq symbolAK multiplicity = 'multiplicity .
  eq symbolAK ellipses = 'ellipses .
  eq symbolAK color = 'color .

  op symbolM_ : Multiplicity ~> String .
  eq symbolM maybe = "?" .
  eq symbolM some = "+" .
  eq symbolM any = "*" .  
  eq symbolM one = "" .
  op error : -> [AttrVal] .
  op error : -> [AttrKey] .

  op parseAttribute : Term -> Attr . 
 ceq parseAttribute(Q[MKey,MVal]) = (getAttributeKey(getName(MKey))) |-> parseAttributeVal(getAttributeKey(getName(MKey)),downTerm(MVal,""))
  if Q = attrCtorS /\ getType(MKey) = CellKey .

  op getAttributeKey_ : Qid -> AttrKey .
  eq getAttributeKey(Q) = if Q == symbolAK multiplicity then multiplicity else if Q == symbolAK color then color else if Q == symbolAK ellipses then ellipses else error fi fi fi .

  op parseAttributeVal : AttrKey String ~> AttrVal .
  eq parseAttributeVal(color, Str) = Str .
  eq parseAttributeVal(ellipses, Str) = getEllipsesValue(Str) .
  eq parseAttributeVal(multiplicity, Str) = getMultiplicityValue(Str) .

  op parseAttributes : Term -> AttrSet .
  eq parseAttributes(Label) = cellLabel: Label [print "parsed Attributes done: " Label] .
 ceq parseAttributes(Q[Label,Label']) = cellLabel: (Q[Label,Label'])
  if Q = replaceS [print "parsed Attributes done: " Q "[" Label "," Label' "]"] .
 ceq parseAttributes(Q[LabelT,CA]) = parseAttributes(LabelT) parseAttribute(CA) 
  if  Q = attrsCtorS [print "parsing attribute " CA] .

  
  op initialCellAttrs : -> AttrSet .
  eq initialCellAttrs = multiplicity |-> one ellipses |-> none color |-> "black" .

  op _[[_]] : AttrSet AttrSet ~> AttrSet .
  eq (AK |-> AV  AS)[[AK |-> AV' AS']] = (AK |-> AV' AS)[[AS']] .
  eq AS[[none]] = AS .

  op _[_] : AttrSet AttrKey ~> AttrVal .
  eq (AK |-> AV AS)[AK] = AV .

  op _-_ : AttrSet AttrSet -> AttrSet .
  eq (A  AS) - (A AS') = AS - AS' .
  eq (AS - AS') = (AS) [owise] .
  var A : Attr .

  op getMultiplicityValue : String -> Multiplicity .
  eq getMultiplicityValue(Str) = if Str == symbolM one then one else if Str == symbolM maybe then maybe else if Str == symbolM some then some else if Str == symbolM any then any else error fi fi fi fi .

  op getEllipsesValue : String -> Ellipses .
 ceq getEllipsesValue(Str) = none if Str == symbolES none .

  sort SplitCell .
  op {_,_,_} : Term Term AttrSet -> SplitCell .

  op splitKCell : Term ~> SplitCell .
  eq splitKCell(Q[LabelT,Contents,LabelT']) = splitKCell(Contents,getEllipses(Q), parseAttributes(LabelT)) [print "splitting 1: " Q " " LabelT] .

  op splitKCell : Term Ellipses AttrSet ~> SplitCell .
  eq splitKCell(Contents, E, (cellLabel: LabelT) AS)
   = {LabelT, Contents, initialCellAttrs[[ellipses |-> E]][[AS]]} .
---  [print "splitting 2: " LabelT " " B " " AS] .
---  eq splitKCell(Contents:[Term], B:[Ellipses], AS:[AttrSet]) = {'error.Big, none, none} [owise print "error " Contents:[Term] ", " B:[Ellipses] ", " AS:[AttrSet]] .

  op getEllipses : Qid -> Ellipses .
  ceq getEllipses(Q) = none if Q = symbolE none .

  op getEllipses : SplitCell -> Ellipses .
  eq getEllipses({T,Contents,AS}) = AS[ellipses] .
  op setEllipses : SplitCell Ellipses -> SplitCell .
  eq setEllipses({T,Contents,AS}, E') = {T,Contents,AS[[ellipses |-> E']]} .

  op getName : SplitCell -> Qid .
  eq getName({Label,Contents,AS}) = getName(Label) . 
 ceq getName({Q'[Label,Label'],Contents,AS}) = getName(Label) if Q' = replaceS .
  op setName : SplitCell Qid -> SplitCell .
  eq setName({T,Contents,AS},Q) = {mkCellLabel(Q),Contents,AS} .

  op getContents : SplitCell -> Term .
  eq getContents({T,Contents,AS}) = Contents .
  op setContents : SplitCell Term -> SplitCell .
  eq setContents({T,Contents,AS}, Contents') = {T,Contents',AS} .

  op getMultiplicity : SplitCell -> Multiplicity .
  eq getMultiplicity({T,Contents,AS}) = AS[multiplicity] .
  op setMultiplicity : SplitCell Multiplicity -> SplitCell .
  eq setMultiplicity({T,Contents,AS}, B') = {T,Contents,AS[[multiplicity |-> B']]} .

  op plugCell : SplitCell -> Term .
  eq plugCell({T,Contents,AS}) = symbolE none[plugAttributes(T,AS - initialCellAttrs),Contents,T] .

  op plugAttributes : Term AttrSet ~> Term .
  eq plugAttributes(LabelT, AK |-> AV AS)
   = plugAttributes(attrsCtorS[LabelT,attrCtorS[mkConstant(symbolAK AK,CellKey), upTerm(mkString(AK,AV))]],AS) .
  eq plugAttributes(LabelT, none) = LabelT .
  
  op mkString : AttrKey AttrVal ~> String .
  eq mkString(color, Str) = Str .
  eq mkString(ellipses, E) = symbolES(E) .
  eq mkString(multiplicity, B) = symbolM(B) .


  op getAttributes : SplitCell -> AttrSet .
  eq getAttributes({T,Contents,AS}) = AS .  

  op setAttributes : SplitCell AttrSet -> SplitCell .
  eq setAttributes({T,Contents,AS}, AS') = {T,Contents,AS'} .

  op mkCell : Qid Term -> Term .
  eq mkCell(Q,Contents) = plugCell({mkCellLabel(Q),Contents,initialCellAttrs}) .

  op mkCellLabel : Qid -> Constant . 
  eq mkCellLabel(Q) = qid(string(Q) + ".CellLabel") .

  ops Map Bag List Set : -> Sort .
  eq Map = 'Map . eq Bag = 'Bag . eq List = 'List . eq Set = 'Set .
  op CellLabel : -> Sort .
  eq CellLabel = 'CellLabel .
  op CellKey : -> Sort .
  eq CellKey = 'CellKey .


  op emptyCt : Sort -> Constant .
  eq emptyCt(S) = if S == Bag then mkConstant('.,Bag) else if S == Map then mkConstant('.,Map) else if S == List then mkConstant('., List) else if S == K then mkConstant('., K) else if S == Set then mkConstant('., Set) else 'error.K fi fi fi fi fi .

  op ctor : Sort -> Qid .
  eq ctor(S) = if S == Bag then '__ else if S == Map then '__ else if S == List then '__ else if S == K then '_~>_ else if S == Set then '__ else 'error fi fi fi fi fi .
  
  op itemCtor : Sort -> Qid .
  eq itemCtor(S) = if S == Bag then 'BagItem else if S == Map then 'MapItem else if S == List then 'ListItem else if S == Set then 'SetItem else 'error fi fi fi fi .

  var Ty : Type .

  op getCellType : Module Type ~> Sort .
 ceq getCellType(M, Ty) = Bag if sameKind(M, Ty, Bag) .
 ceq getCellType(M, Ty) = Set if sameKind(M, Ty, Set) .
 ceq getCellType(M, Ty) = Map if sameKind(M, Ty, Map) .
 ceq getCellType(M, Ty) = List if sameKind(M, Ty, List) .
 ceq getCellType(M, Ty) = K if sameKind(M, Ty, K) .
endfm

fmod K-META-OPEN-CELLS is 
  including K-META-CONFIG .
  ops left right both : -> Ellipses .
  eq symbolE left = '<_>..._</_> .
  eq symbolE right = '<_>_...</_> .
  eq symbolE both = '<_>..._...</_> .
  eq symbolES left = "left" .
  eq symbolES right = "right" .
  eq symbolES both = "both" .
  var Q : Qid .  var Str : String .
  eq getEllipses(Q) = if (Q == symbolE left) then left else if (Q == symbolE right) then right else if (Q == symbolE both) then both else if (Q == symbolE none) then none else error fi fi fi fi .
  eq getEllipsesValue(Str) = if (Str == symbolES left) then left else if (Str == symbolES right) then right else if (Str == symbolES both) then both else if (Str == symbolES none) then none else error fi fi fi fi .
endfm

fmod META-ANONYMOUS-VARIABLE is
  including META-LEVEL .
  including CONVERSION .
  var T : Type . var N : Nat .
  var M : Module .  var Op : OpDecl . var OPDS : OpDeclSet . 
  var Q : Qid .   var AS : AttrSet .

  op anyVarS : -> Qid .
  eq anyVarS = '? .

  op Anonymous : -> Sort .
  eq Anonymous = 'Anonymous .

  op anyVar : Type -> Variable .
  eq anyVar(T) = qid(string(anyVarS) + ":" + string(T)) .

  op anyVar : Nat Type -> Variable .
  eq anyVar(N, T) = qid(string(anyVarS) + string(N,10) + ":" + string(T)) .


  op getAnonConsts : Module ~> TypeSet .
  eq getAnonConsts(M) = '`[HOLE`] ; '? . ---getAnonConsts(getOps(M)) .

  op getAnonConsts : OpDeclSet ~> SortSet .
  eq getAnonConsts(Op OPDS) = getAnonConsts(Op, OPDS) .
  eq getAnonConsts(none) = none .
  
  op getAnonConsts : OpDecl OpDeclSet ~> SortSet .
  eq getAnonConsts(op Q : nil -> T [poly(0) AS] ., OPDS) 
   = if T == Anonymous then Q ; getAnonConsts(OPDS) else getAnonConsts(OPDS) fi  .
  eq getAnonConsts(Op, OPDS) = getAnonConsts(OPDS) [owise] .
endfm

fmod META-K-WRAPPERS is
  including META-LEVEL-EXTRAS .
  including META-K-MODULE .
  including K-META-CONFIG  .
  vars T T' : Type . var Q : Qid . var AS : AttrSet . var OPDS : OpDeclSet .

  op builtin-wrappers : -> OpDeclSet [memo] .
  eq builtin-wrappers = getOps(upModule('K-WRAPPERS, false)) .

  op getWrappers : OpDeclSet -> OpDeclSet .
  eq getWrappers((op Q : T -> T' [metadata("builtin wrapper") AS] .) OPDS)
   = (op Q : T -> T' [metadata("builtin wrapper") AS] .) getWrappers(OPDS) .
  eq getWrappers((op Q : T -> T' [metadata("list wrapper") AS] .) OPDS)
   = (op Q : T -> T' [metadata("list wrapper") AS] .) getWrappers(OPDS) .
  eq getWrappers(OPDS) = none [owise] .

  op mkSubsortWrapper : Type Type -> Qid .
  eq mkSubsortWrapper(T,T') 
   = qid(string(T) + "_") .

  op isWrapped : Module Type -> Bool [memo] .
  eq isWrapped(M, T) = T in (klabelsorts ; 'CellLabel ; 'Bag ; 'NeBag ; 'BagItem ; 'Set ; 'NeSet ; 'SetItem ; 'List ; 'NeList ; 'ListItem ; 'Map ; 'NeMap ; 'MapItem ; 'List`{K`} ; 'NeList`{K`} ; 'List`{KResult`} ; 'NeKProperList) 
     or-else isWrapped(getWrappers(getOps(flatten(M))), T) .

  op isWrapped : OpDeclSet Type -> Bool .
  eq isWrapped(OPDS (op Q : T -> T' [AS] .), T) = true .
  eq isWrapped(OPDS, T) = false [owise] .

  var M : Module . var Op : OpDecl . 
endfm


fmod META-K-LABELS is
  including META-K-MODULE .
  including META-LEVEL .
  var Q : Qid . var T T' : Type .  var Str : String .

  op klistLabelS : -> Qid .
  eq klistLabelS = 'kList .

  op mkKLabel : Qid -> Qid .
  eq mkKLabel(Q) = qid("'" + string(Q)) .

  op downKLabel : Qid -> Qid .
  eq downKLabel(Q) = Q .

  op mkListLabel : Qid -> Term .
  eq mkListLabel(Q) = klistLabelS[upTerm(string(Q))] .

  op mkKLabelSort : Type String -> Type .
  eq mkKLabelSort(T,Str) 
   = if find(Str,"hybrid",0) :: Nat then KHybridLabel
     else if T == KProper then KProperLabel
     else if T == KResult then KResultLabel else KLabel fi fi fi .

  op getAuxKLabels : OpDeclSet OpDeclSet -> OpDeclSet .
  eq getAuxKLabels(OPDS, Op OPDS') = getAuxKLabel(OPDS, Op) getAuxKLabels(OPDS, OPDS') .
  eq getAuxKLabels(OPDS, none) = none [print "Done finding aux labels for " OPDS].

  op getAuxKLabel : OpDeclSet OpDecl -> OpDeclSet .
  eq getAuxKLabel(OPDS (op Q : nil -> T [metadata("generated label")] .), op Q : nil -> T' [AS] .) 
   =  (op Q : nil -> T [metadata("generated label")] .) [print "generated label " Q] .
  eq getAuxKLabel(OPDS, Op) = none [owise print "no generated label for " Op] .

  op getGeneratedLabels : OpDeclSet -> OpDeclSet .
  eq getGeneratedLabels(Op OPDS) = if isGeneratedLabel(Op) then Op  getGeneratedLabels(OPDS) else getGeneratedLabels(OPDS) fi .
  eq getGeneratedLabels(none) = none .

  op isGeneratedLabel : OpDecl -> Bool .
  eq isGeneratedLabel((op Q : nil -> T [metadata("generated label")] .)) = true .
  eq isGeneratedLabel(Op) = false [owise] . 
  

  var OPDS OPDS' : OpDeclSet .  var Op : OpDecl .  var AS : AttrSet .
endfm

fmod K-STRICTNESS-OPS is including META-LEVEL .
  including K-META-OPS .
  including K-META-CONFIG .
  var S : String .  var T T' : Term . var Trl : TermList . var Q : Qid .

  op hole : -> Term .
  eq hole = '`[HOLE`]:K .

  op removeHole : TermList ~> TermList .
  eq removeHole((T, Trl)) = if T == hole then removeHole(Trl) else T,removeHole(Trl) fi .
  eq removeHole(empty) = empty .

  op freezeLabel : String -> Term .
  eq freezeLabel(S) = 'freezer[upTerm(S)] .

  op freezeVariable : String Term -> Term .
  eq freezeVariable(S, V:Term) = kApply('freezeVar[upTerm(S)],V:Term) .

  op kWrap : Term -> Term .
  eq kWrap(T) = kWrap(klabel,T) .

   op kWrap : Qid Term -> Term .
   eq kWrap(Q, T) = mkCell(Q, kra(T,'Rest:K)) .
--- replace the line above with the one below to get unrestricted strictness
---  eq kWrap(T) = T .


  op getTopLabel : Term ~> Term .
  eq getTopLabel('_`(_`)[T,T']) = T . 
endfm


fmod META-K-CONTEXTS is including K-SORTS .
  including META-MODULE-EXTRAS .
  including K-STRICTNESS-OPS .
  var Q : Qid . var T T' : Term . var S : Type . var C : Term .  var Cond : TermList .
  var AS AS' : AttrSet .  var RK : KContextKind .

  sort KContextKind .
  ops kcxt kccxt : -> KContextKind .
  op cxterror : Qid -> [KContextKind] .

  ops symbol_ : KContextKind -> Qid .
  eq symbol kcxt = 'context_ .
  eq symbol kccxt = 'context_if_ .  

  op getKContextKind : Qid ~> KContextKind . 
  eq getKContextKind(Q) = if Q == symbol kcxt then kcxt else if Q == symbol kccxt then kccxt else cxterror(Q) fi fi .

  sort KContextSplit .
  op {_,_,_,_} : KContextKind Term TermList AttrSet -> KContextSplit .

  
  op splitKContext : MembAx ~> KContextSplit .
 ceq splitKContext((mb Q[T] : S [AS] .))
   = {getKContextKind(Q),T,empty,AS} if S := KSentence . 
 ceq splitKContext((mb Q[T,C] : S [AS] .))
   = {getKContextKind(Q),T,C,AS} if S := KSentence . 

  op getContents : KContextSplit -> Term .
  op getContextKind : KContextSplit -> KContextKind .
  op getCondition : KContextSplit -> TermList .
  eq getContents({RK,T,Cond,AS}) = T .
  op getKind : KContextSplit -> KContextKind .
  eq getKind({RK,T,Cond,AS}) = RK .
  eq getCondition({RK,T,Cond,AS}) = Cond .
  op getAttrs : KContextSplit -> AttrSet .
  eq getAttrs({RK,T,Cond,AS}) = AS .

  op setAttrs : KContextSplit AttrSet -> KContextSplit .
  eq setAttrs({RK,T,Cond,AS}, AS') = {RK,T,Cond,AS'} .

  op setContents : KContextSplit Term -> KContextSplit .
  eq setContents({RK,T,Cond,AS}, T') = {RK,T',Cond,AS} .

  op plugKContext : KContextSplit ~> MembAx .
  eq plugKContext({RK,T,empty,AS}) = (mb symbol(RK)[T] : KSentence [AS] .) .
  eq plugKContext({RK,T,C,AS}) = (mb symbol(RK)[T,C] : KSentence [AS] .) [owise] .

  op getHoleReplacement_ : TermList ~> Term .
 ceq getHoleReplacement(O[T1, T2],Tl) = T2 if O = replaceS /\ getName(T1) = getName(hole) .
  eq getHoleReplacement(O[Tl],Tl') = getHoleReplacement(Tl,Tl') [owise] .
  eq getHoleReplacement(Ct,Tl) = getHoleReplacement(Tl) .
  eq getHoleReplacement(V, Tl) = getHoleReplacement(Tl) .
  eq getHoleReplacement(empty) = hole .


  var O : Qid . var Ct : Constant . var V : Variable .
  var T1 T2 : Term . var Tl Tl' : TermList .  

  op replaceCxt : Term Term -> Term .
  eq replaceCxt(T1, T2) = 'wrap-with[T1,T2] .
  
  
  op pReplaceCxt : Term Nat -> Term .
  eq pReplaceCxt('wrap-with[T1, T2], 1) = T1 .
  eq pReplaceCxt('wrap-with[T1, T2], 2) = T2 .
  eq pReplaceCxt('_`(_`)[''wrap-with.KLabel,'_`,`,_[T1,T2]], 1) = T1 .
  eq pReplaceCxt('_`(_`)[''wrap-with.KLabel,'_`,`,_[T1,T2]], 2) = T2 .

endfm



---(
fmod LIST-ATTRS is
  including META-MODULE .
  op klist : Nat Qid Type -> Attr .
  op klist : Nat Term -> Attr .
endfm
---)

fmod META-ATTRS is
  including META-MODULE .
  op metadata : AttrSet -> AttrSet .
  op pair : String String -> Attr .
  eq metadata(pair(Key,Value) AS) 
   = metadata(metadata(Key + "=(" + Value + ")") AS) .
  eq metadata(metadata(S) AS) = metadata(S) AS [owise] .
  var S : String .  var AS : AttrSet . var Key Value : String .
endfm

fmod STRICT-ATTRS is
  including META-ATTRS .
  including NAT-LIST-EXTRAS .
  including QID-EXTRAS .
---  including LIST-ATTRS .
  ops kstrict seqkstrict : IntList QidList -> Attr .
  op karity : Nat -> Attr .
  op khybrid : -> Attr .

  eq metadata(khybrid AS) = metadata(metadata("hybrid") AS) .
  eq metadata(karity(N) AS) = metadata(metadata("arity " + string(N,10)) AS) .
  
  eq metadata(kstrict(nil, Ql) AS) = metadata(metadata("strict in (" + QidList2String(Ql) + ")") AS) . 
  eq metadata(seqkstrict(nil, Ql) AS) = metadata(metadata("seqstrict in (" + QidList2String(Ql) + ")") AS) . 
  eq metadata(kstrict(NeIl, Ql) AS) = metadata(metadata("strict(" + IntList2String(NeIl) + ") in (" + QidList2String(Ql) + ")") AS) . 
  eq metadata(seqkstrict(NeIl, Ql) AS) = metadata(metadata("seqstrict(" + IntList2String(NeIl) + ") in (" + QidList2String(Ql) + ")") AS) . 

  var AS : AttrSet . var A : Attr .  var N : Nat .  var Ql : QidList . 
  var NeIl : NeIntList .
endfm

fmod SYNTAX-ATTRS is
  including META-ATTRS .
  ops kaux kdisolve : -> Attr .
  op krenameTo : Qid -> Attr .
  op ksyntax : -> Attr .
  op klatex : AttrSet -> Attr .
  op kcolor : Qid -> Attr .
  op kditto : -> Attr .

  eq metadata(kditto AS) = metadata(metadata("ditto") AS) .
  eq metadata(kaux AS) = metadata(metadata("aux") AS) .
  eq metadata(kdisolve AS) = metadata(metadata("disolve") AS) .
  eq metadata(ksyntax AS) = metadata(metadata("syntax") AS) .
  eq metadata(krenameTo(Q) AS) = metadata(metadata("renameTo " + string(Q)) AS) .
  eq metadata(kcolor(Q) AS) = metadata(metadata("color: " + string(Q)) AS) .
  ceq metadata(klatex(AS') AS) = metadata(metadata("latex(" + S + ")") AS) 
   if metadata(S) := metadata(AS') .


  var AS AS' : AttrSet . var Q : Qid . var S : String .
endfm

fmod CONFIGURATION-ATTRS is
  including META-ATTRS .
  op kwrapping : Qid -> Attr .

  eq metadata(kwrapping(Q) AS) 
   = metadata(metadata("wrapping " + string(Q)) AS) .

  var AS : AttrSet . var Q : Qid .
endfm

fmod RULES-ATTRS is
  including META-ATTRS .
  ops kcomputational kstructural klarge : -> Attr . 

  eq metadata(kcomputational AS) = metadata(metadata("computational") AS) .
  eq metadata(kstructural AS) = metadata(metadata("structural") AS) .
  eq metadata(klarge AS) = metadata(metadata("large") AS) .

  var AS : AttrSet .
endfm

fmod LOCATION-ATTRS is
  including META-ATTRS .
  op klocation : String -> Attr .

  eq metadata(klocation(S) AS) = metadata(metadata("location(" + S + ")") AS) .

  var AS : AttrSet . var S : String .
endfm

fmod K-ATTRS is 
  including SYNTAX-ATTRS .
  including STRICT-ATTRS .
  including CONFIGURATION-ATTRS .
  including RULES-ATTRS .
  including LOCATION-ATTRS .
endfm

fmod K-META-LISTS is including K-META-OPS .
  including META-K-MODULE .
  including META-TERM-EXTRAS .
---  including LIST-ATTRS .
  including META-K-LABELS .

  var Q : Qid . var T : Type . var Tl : TypeList . var AS : AttrSet .
  var Trm : Term . var Trms : TermList .  var OPDS : OpDeclSet .
  var N : Nat .
  op klistType : Type ~> Type .
  eq klistType('K) = KList  .
  eq klistType('KResult) = ResultList .
  eq klistType(T) = KList [owise] .

  op klabelType : Type ~> Type .
  eq klabelType(Q) = if Q == K then KLabel else if Q ==  KResult then KResultLabel else if Q == KProper then KProperLabel else KHybridLabel fi fi fi .
  
  op wrapList : Type Term TermList ~> Term .
  eq wrapList(T, Q[Trm], Trms) = kApply(mkConstant(listWrapperS(Q),T),Trms) .

  op listWrapperS : Qid -> Qid .
  eq listWrapperS(Q) = mkKLabel(Q) .
  op listWrapperT : Qid Type -> Constant .
  eq listWrapperT(Q,T) = mkConstant(listWrapperS(Q),klabelType(T)) .

  ---eq klist(N,Q,T) = klist(N, listWrapperT(Q,T)) .


  op getListConstructor : OpDeclSet Type ~> OpDecl .
  eq getListConstructor(OPDS op Q : Tl -> T [assoc AS] ., T)
   = (op Q : Tl -> T [assoc AS] .) .

 sort CTORSMap .  var CTORS : CTORSMap .  var SSD : SubsortDecl .
 op _|->_ : SubsortDecl Term -> CTORSMap .
 op __ : CTORSMap CTORSMap -> CTORSMap [assoc comm id: empty] .
 op empty : -> CTORSMap .

 op getKeys : CTORSMap -> SubsortDeclSet .
 eq getKeys(empty) = none .
 eq getKeys(CTORS SSD |-> Trm) = getKeys(CTORS) SSD .

  op getListTerm : Type OpDeclSet ~> Term .
  eq getListTerm(T, (op Q : T T -> T [assoc id(Trm) AS] .) OPDS) = Q[Trm] .
  eq getListTerm(T, (op Q : T T -> T [assoc AS] .) OPDS) = Q[mkConstant('dummy,T)] [owise] .
endfm

fmod META-K-CONDITION-SEARCH is
  including QID .
  op searchS : -> Qid .
  eq searchS = 'search_ .
endfm


fmod META-K-LATEX is
  including QID .
  op latexS : -> Qid .
  eq latexS = '@latex .
endfm

fmod META-K-LEAST-SORTS is
  including META-LEVEL-EXTRAS .
  including META-K-RULES .
  including META-K-BUILTINS .
  including META-K-MODULE .


 op leastSortsT : Module Term ~> Type .
 eq leastSortsT(M,C) = leastSort(M,C) .
 eq leastSortsT(M,V) = getType(V) .
 eq leastSortsT(M,Q[Trms]) = leastSortsT(M,Q[Trms],leastSortsTs(M, Trms)) .

 op leastSortsTs : Module TermList ~> TypeListSet .
 op leastSortsTs : Module TermList TypeListSet ~> TypeListSet .
 op leastSortsTs : Module TermList SortSet TypeListSet ~> TypeListSet .
 eq leastSortsTs(M, Trms) = leastSortsTs(M, Trms, nil) .
 eq leastSortsTs(M, empty, TlS) = TlS .
 eq leastSortsTs(M, (Trm, Trms), TlS) = leastSortsTs(M, Trms, leastSortsT(M, Trm), TlS) .
 eq leastSortsTs(M, Trms, errorS(Trm,T,Str), TlS) = errorS(Trm,T, Str) .
 eq leastSortsTs(M, Trms, SS, TlS) = leastSortsTs(M, Trms, TlS # SS) [print "leastSortsTs " Trms "; " TlS "; " SS].

 op leastSortsT : Module Term TypeListSet ~> SortSet .
 op leastSortsT : Module Term SortSet TypeListSet ~> SortSet .
 op leastSortsT : Module Term SortSet SortSet TypeListSet ~> SortSet .
 op $leastSortsT : Module Term TypeListSet ~> SortSet .


 eq leastSortsT(M, Trm, TlSK) = leastSortsT(M, Trm, none, TlSK) .
 eq leastSortsT(M, Trm, SS, Tl ; TlSK) 
  = leastSortsT(M, Trm, $leastSortsT(M, Trm, Tl), SS, TlSK) . 
 
 eq leastSortsT(M, Trm, NSS, TlSK) = NSS .
--- eq leastSortsT(M, Trm, none, errorT(Trm',T) ; TlSK) = errorT(Trm',T) .
 eq leastSortsT(M, 'context_[Trm], none, TlSK) 
  = errorS('context_[Trm],leastSort(M, Trm), "All contexts should have sort K") [owise] .
 eq leastSortsT(M, Trm, none, TlSK) = errorS(Trm, leastSort(M,Trm),"no suitable least sorts found") [owise print "no sorts found. generating error. unchecked " TlSK] .

 eq leastSortsT(M, Trm, SS, SS', TlSK) = leastSortsT(M, Trm, SS ; SS', TlSK)  .
 eq leastSortsT(M, Trm, SS:[SortSet], SS', TlSK) 
  = leastSortsT(M, Trm, SS', TlSK) [print "Defaulting to " SS' "; reason: " SS:[SortSet] owise] .


 op removeBuiltins : SortSet -> SortSet .
 eq removeBuiltins(SS) = removeSorts(SS, Builtins) .

 eq $leastSortsT(M, 'if_then_else_fi[Trms], T T' T'') 
  = leastSortsIf('if_then_else_fi[Trms], leastSort(M, 'if_then_else_fi[Trms]), sortLeq(M, T, 'Bool), removeBuiltins(lubSorts(M, T', T''))) .

 eq $leastSortsT(M, 'configuration_[Trm], S) = 'KSentence .
 eq $leastSortsT(M, 'rule_[Trm], S) = 'KSentence .
ceq $leastSortsT(M, 'rule_if_[Trms], S T') = 'KSentence if sortLeq(M,T','Bool).
ceq $leastSortsT(M, 'context_[Trm], S) = 'KSentence if sortLeq(M,S,'K) .
ceq $leastSortsT(M, 'context_if_[Trms], S T') = 'KSentence if sortLeq(M,T','Bool).

ceq $leastSortsT(M, Q[T1,T2], T T') 
  = leastSortsRed(M, Q[T1,T2], leastSort(M, Q[T1,T2]), removeBuiltins(lubSorts(M, T, T'))) 
 if Q == replaceS [print "leastSortsRed: " T1 "; " T2 "; " T "; " T'] . 
 eq $leastSortsT(M, Q[Trms], Tl) = leastSort(M, Q[genXVars(Tl)]) [owise ] .

 op leastSortsIf : Term Type Bool TypeSet ~> SortSet .
 eq leastSortsIf(Trm, T, true, NSS) = NSS .
 eq leastSortsIf(Trm, T, B:[Bool], TS:[TypeSet]) = errorS(Trm, T, "condition not of sort Bool") [owise] .

 op leastSortsRed : Module Term Type SortSet ~> SortSet .
 eq leastSortsRed(M, Trm, T, S) = S .
 eq leastSortsRed(M, Trm, T, NSS) = if checkSubsorts(M, NSS, K) then K else  errorS(Trm, T,"More than one minimal subsort. ") fi [owise print "More than one minimal subsort: " NSS] .



  vars M : Module . var Q : Qid . var Trms : TermList . 
  var Trm Trm' T1 T2 : Term .  var C : Constant . var V : Variable .
  var T T' T'' : Type . var S : Sort .   var Tl : TypeList .
  var SS SS' : SortSet . var NSS : NeSortSet . var TS : TypeSet .
  var TlS : TypeListSet .  var TlSK : [TypeListSet] .  var Str : String .
endfm


fmod META-K-COOL is
  including META-TERM-EXTRAS .
  including  K-META-CONFIG .
  op cool : Qid -> Qid .
  eq cool(Q) = qid(string(Q) + "-cool") .
  
  var Q : Qid .
endfm



