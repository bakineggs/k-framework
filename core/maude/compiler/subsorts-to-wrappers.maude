fmod SUBSORTS-TO-WRAPPERS is
 including META-TERM-EXTRAS .
 including META-MODULE-EXTRAS .
 including META-LEVEL-EXTRAS .
 including META-K-MODULE .
 including META-K-WRAPPERS .
 including META-K-LEAST-SORTS .
 including META-ATTRS .
  var IL : ImportList .
 var OPDS : OpDeclSet .  var Op Op' : OpDecl .
 var SSDS : SubsortDeclSet .  var SSD : SubsortDecl . var S S' : Sort .
 var Q O : Qid . var Tl : TypeList . var T T' T'' : Type .  var NTl : NeTypeList .
 var AS AS' : AttrSet .  var HL : HookList .
 var MS : ModuleSet . var M M' Flat : Module .  var SSDM : SubsortDeclMap . 
 var Trm : Term . var Trms : TermList . var V : Variable . var C : Constant .
var Mbs : MembAxSet . var Mb : MembAx .
 var Eqs : EquationSet .  var Eq : Equation . 
 var Rls : RuleSet . var Rl : Rule .
 var T1 T2 : Term . var Cond : Condition .
 var KRS : KRuleSplit .


 op resolveKSubsorts : Qid Module Module ModuleSet ~> Module .
 eq resolveKSubsorts(Q, M, Flat, MS) 
  = setName(subsorts2wrappers(suffixImports(Q, M,subsorts2wrappersImports(MS)), Flat,  pseudoKSubsorts(getSubsorts(M)), subsorts2wrappers(maximalKSubsorts(Flat))), qid(string(getName(M)) + string(Q))) .


 op resolveKSubsortsDeclare : Qid Module Module ModuleSet ~> Module .
 eq resolveKSubsortsDeclare(Q, M, Flat, MS) 
  = setName(subsorts2wrappersDeclare(M, Flat,  pseudoKSubsorts(getSubsorts(M)), subsorts2wrappers(maximalKSubsorts(Flat))), qid(string(getName(M)) + string(Q))) .

 op subsorts2wrappersDeclare : Module Module SubsortDeclSet SubsortDeclMap ~> Module .
 eq subsorts2wrappersDeclare(M, Flat, SSDS, SSDM)
  = addOps(filteredProject(SSDM,SSDS), M)  .
 

 sorts SubsortDeclMapItem SubsortDeclMap .
 subsort SubsortDeclMapItem < SubsortDeclMap .
 op [_|->_] : SubsortDecl OpDecl -> SubsortDeclMapItem .
 op empty : -> SubsortDeclMap .
 op __ : SubsortDeclMap SubsortDeclMap -> SubsortDeclMap [assoc comm id: empty ] .
 op projectFirst : SubsortDeclMap -> SubsortDeclSet .
 eq projectFirst((empty).SubsortDeclMap) = none .
 eq projectFirst(SSDM [SSD |-> Op']) = SSD projectFirst(SSDM) .

 op filteredProject : SubsortDeclMap SubsortDeclSet -> OpDeclSet .
 eq filteredProject((empty).SubsortDeclMap, SSDS) = none .
 eq filteredProject(SSDM [SSD |-> Op'], SSDS) 
  = if SSD in SSDS then Op' replaceOp(Op') ruleOps(Op') filteredProject(SSDM,SSDS) 
    else filteredProject(SSDM,SSDS) fi .

 op replaceOp : OpDecl ~> OpDecl .
 eq replaceOp(op Q : T -> T' [AS] .) = (op replaceS : T T -> T [prec(125)] .) .

 op ruleOps : OpDecl ~> OpDecl .
 eq ruleOps(op Q : T -> T' [AS] .) = (op symbol kcrl : T 'Bool -> '`[KSentence`] [prec(126) format('b 'o 'b 'o 'd)] .) (op symbol krl : T -> '`[KSentence`] [prec(126) format('b 'o 'd)] .) .

 op subsorts2wrappersImports : ModuleSet ~> ImportList .
 eq subsorts2wrappersImports(M' MS)
  = if none == pseudoKSubsorts(getSubsorts(M'))
    then subsorts2wrappersImports(MS)
    else subsorts2wrappersImports(MS) (including getName(M') .) 
    fi .
 eq subsorts2wrappersImports(empty) = nil .
 
 op subsorts2wrappers : Module Module SubsortDeclSet SubsortDeclMap ~> Module .
 eq subsorts2wrappers(M, Flat, SSDS, SSDM)
  = setMbs(setRls(setEqs(removeSubsorts(addOps(filteredProject(SSDM,SSDS), M),SSDS), subsorts2wrappersEqs(getEqs(M), Flat, getOps(Flat), SSDM)), subsorts2wrappersRls(getRls(M), Flat, getOps(Flat), SSDM)),subsorts2wrappersMbs(getMbs(M), Flat, getOps(Flat), SSDM))  .
 
 op subsorts2wrappers : SubsortDeclSet ~> SubsortDeclMap .
 eq subsorts2wrappers((subsort S < S' .) SSDS)
  = [(subsort S < S' .) |-> (op mkSubsortWrapper(S,S') : S -> S' [metadata(pair("wrapper","builtin"))] .)]
    subsorts2wrappers(SSDS) .
 eq subsorts2wrappers(none) = empty .

 op subsorts2wrappersMbs : MembAxSet Module OpDeclSet SubsortDeclMap ~> MembAxSet .
 eq subsorts2wrappersMbs(Mbs Mb, M, OPDS, SSDM)
  =  subsorts2wrappersMbs(Mbs, M, OPDS, SSDM) subsorts2wrappersMb(Mb, M, OPDS, SSDM) .
 eq subsorts2wrappersMbs(none, M, OPDS, SSDM)  = none .

 op subsorts2wrappersMb : MembAx Module OpDeclSet SubsortDeclMap ~> MembAx .
ceq subsorts2wrappersMb(Mb, M, OPDS, SSDM)
  = plugKRule(setContents(setCondition(KRS, findPurifyRedexCond(getCondition(KRS),M, OPDS, SSDM)),Q[findPurifyRedex(T1, rewriteType(M, T1, T2), M, OPDS, SSDM), findPurifyRedex(T2, rewriteType(M, T1, T2), M, OPDS, SSDM)]))
 if KRS := splitKRule(Mb) /\  Q[T1,T2] := getContents(KRS) /\ Q = replaceS [print "applying subsorts2wrappers with replace on " Mb].
 eq subsorts2wrappersMb((mb T1 : T [AS] .), M, OPDS, SSDM)
  = (mb findPurifyRedex(T1, getKind(M,T), M, OPDS, SSDM) : T [AS] .) [print "finding purify redexes for " T1 owise].
 eq subsorts2wrappersMb((cmb T1 : T if Cond [AS] .), M, OPDS, SSDM)
  = (cmb findPurifyRedex(T1, getKind(M,T), M, OPDS, SSDM) : T if subsort2wrappersCond(Cond,M,OPDS,SSDM) [AS] .) .

 op subsorts2wrappersEqs : EquationSet Module OpDeclSet SubsortDeclMap ~> EquationSet .
 eq subsorts2wrappersEqs(Eqs Eq, M, OPDS, SSDM)
  =  subsorts2wrappersEqs(Eqs, M, OPDS, SSDM) subsorts2wrappersEq(Eq, M, OPDS, SSDM) .
 eq subsorts2wrappersEqs(none, M, OPDS, SSDM)  = none .

 op subsorts2wrappersEq : Equation Module OpDeclSet SubsortDeclMap ~> Equation .
 eq subsorts2wrappersEq((eq T1 = T2 [AS] .), M, OPDS, SSDM)
  = (eq findPurifyRedex(T1, rewriteType(M, T1, T2), M, OPDS, SSDM) 
      = findPurifyRedex(T2, rewriteType(M, T1, T2), M, OPDS, SSDM) [AS] .) . 
 eq subsorts2wrappersEq((ceq T1 = T2 if Cond [AS] .), M, OPDS, SSDM)
  = (ceq findPurifyRedex(T1, rewriteType(M, T1, T2), M, OPDS, SSDM) 
      = findPurifyRedex(T2, rewriteType(M, T1, T2), M, OPDS, SSDM) if subsort2wrappersCond(Cond,M,OPDS,SSDM) [AS] .) . 


 op subsort2wrappersCond : Condition Module OpDeclSet SubsortDeclMap ~> Condition .
 eq subsort2wrappersCond(nil,M, OPDS, SSDM) = nil .
 eq subsort2wrappersCond(T1 = T2 /\ Cond, M, OPDS, SSDM)
  =  (findPurifyRedex(T1, rewriteType(M, T1, T2), M, OPDS, SSDM) 
      = findPurifyRedex(T2, rewriteType(M, T1, T2), M, OPDS, SSDM))
    /\ subsort2wrappersCond(Cond, M, OPDS, SSDM) .
 eq subsort2wrappersCond(T1 := T2 /\ Cond, M, OPDS, SSDM)
  =  (findPurifyRedex(T1, rewriteType(M, T1, T2), M, OPDS, SSDM) 
      := findPurifyRedex(T2, rewriteType(M, T1, T2), M, OPDS, SSDM))
    /\ subsort2wrappersCond(Cond, M, OPDS, SSDM) .
 eq subsort2wrappersCond(T1 => T2 /\ Cond, M, OPDS, SSDM)
  =  (findPurifyRedex(T1, rewriteType(M, T1, T2), M, OPDS, SSDM) 
      => findPurifyRedex(T2, rewriteType(M, T1, T2), M, OPDS, SSDM))
    /\ subsort2wrappersCond(Cond, M, OPDS, SSDM) .
 eq subsort2wrappersCond(T : S /\ Cond, M, OPDS, SSDM)
  =  (findPurifyRedex(T, kind-if-not-k(M,leastSortsT(M,T))
, M, OPDS, SSDM) : S)
    /\ subsort2wrappersCond(Cond, M, OPDS, SSDM) .

 op kind-if-not-k : Module Type -> Type .
 eq kind-if-not-k(M, T) = if isKSort(T) or-else isKListSort(T) then T else getKind(M,T) fi [print "Of type: " T] .

 op subsorts2wrappersRls : RuleSet Module OpDeclSet SubsortDeclMap ~> RuleSet .
 eq subsorts2wrappersRls(Rls Rl, M, OPDS, SSDM)
  =  subsorts2wrappersRls(Rls , M, OPDS, SSDM) subsorts2wrappersRl(Rl, M, OPDS, SSDM) .
 eq subsorts2wrappersRls(none, M, OPDS, SSDM)  = none .

 op subsorts2wrappersRl : Rule Module OpDeclSet SubsortDeclMap ~> Rule .
 eq subsorts2wrappersRl((rl T1 => T2 [AS] .), M, OPDS, SSDM)
  = (rl findPurifyRedex(T1, rewriteType(M, T1, T2), M, OPDS, SSDM) 
     => findPurifyRedex(T2, rewriteType(M, T1, T2)
, M, OPDS, SSDM) [AS] .) [print "rl " T1 " => " T2] . 
 eq subsorts2wrappersRl((crl T1 => T2 if Cond [AS] .), M, OPDS, SSDM)
  = (crl findPurifyRedex(T1, rewriteType(M, T1, T2)
, M, OPDS, SSDM) 
     => findPurifyRedex(T2, rewriteType(M, T1, T2)
, M, OPDS, SSDM) if subsort2wrappersCond(Cond,M,OPDS,SSDM) [AS] .) . 


 op rewriteType : Module Term Term -> Type .
 eq rewriteType(M, T1, T2) 
  = kind-if-not-k(M,lubSorts(M,leastSortsT(M,T1),leastSortsT(M,T2))) [print "rewriteType " T1 "; " T2 ] .

 op findPurifyRedexes : TermList TypeList Module OpDeclSet SubsortDeclMap ~> TermList .
 eq findPurifyRedexes((Trm,Trms),(T Tl),M,OPDS, SSDM)
  = findPurifyRedex(Trm,T, M, OPDS, SSDM),
    findPurifyRedexes(Trms,Tl,M,OPDS, SSDM) .
 eq findPurifyRedexes(empty, nil, M, OPDS, SSDM) = empty .


 op findPurifyRedexCond : TermList Module OpDeclSet SubsortDeclMap ~> TermList .
 eq findPurifyRedexCond(empty, M, OPDS, SSDM) = empty .
 eq findPurifyRedexCond(Trm, M, OPDS, SSDM) = findPurifyRedex(Trm, K, M, OPDS, SSDM) .

 op findPurifyRedex : Term Type Module OpDeclSet SubsortDeclMap ~> Term .
ceq findPurifyRedex('if_then_else_fi[Trm,T1,T2], T, M, OPDS, SSDM)
  = 'if_then_else_fi[findPurifyRedex(Trm, 'Bool, M, OPDS, SSDM), findPurifyRedex(T1, T, M, OPDS, SSDM), findPurifyRedex(T2, T, M, OPDS, SSDM)]
 if sortLeq(M, leastSortsT(M, Trm), 'Bool) [print "if " Trm " then " T1 " else " T2 " fi. target type: " T] .

---(
ceq findPurifyRedex(Q[T1,T2], T, M ,OPDS, SSDM)
  = Q[findPurifyRedex(T1, upgradeToK(M,T), M, OPDS, SSDM), findPurifyRedex(T2, upgradeToK(M,T), M, OPDS, SSDM)]
 if Q = replaceS [print "replaceS " T1 "; " T2 "; " T] .
---)
 eq findPurifyRedex(Trm, T, M, OPDS, SSDM)
  = findPurifyRedex(Trm, T, M, OPDS, SSDM, isKSort(T) or-else isKListSort(T))
 [owise] .

 op upgradeToK : Module Type -> Type .
 eq upgradeToK(M, T) = if sortLeq(M, T, K) then K else T fi .

 op findPurifyRedex : Term Type Module OpDeclSet SubsortDeclMap Bool ~> Term .
 eq findPurifyRedex(Trm, T, M, OPDS, SSDM, true)  
  = kPurifyTerm(Trm,T,M, OPDS, SSDM) [print "starting to purify " Trm] .
 eq findPurifyRedex(Q[Trms], T, M, OPDS, SSDM, false)
  = Q[findPurifyRedexes(Trms, getTypes(countTerms(Trms),findOp(M, OPDS, Q, leastSortsTs(M,Trms), T)), M, OPDS, SSDM)] .
 eq findPurifyRedex(C, T, M, OPDS, SSDM, false) = C .
 eq findPurifyRedex(V, T, M, OPDS, SSDM, false) = V .

 op kPurifyTerms : TermList TypeList Module OpDeclSet SubsortDeclMap -> TermList  .
 eq kPurifyTerms((Trm,Trms), T Tl, M, OPDS, SSDM)
  = kPurifyTerm(Trm,T,M,OPDS,SSDM), kPurifyTerms(Trms,Tl, M,OPDS,SSDM) .
 eq kPurifyTerms(empty,nil,M,OPDS,SSDM) = empty .

 op kPurifyTerm : Term Type Module OpDeclSet SubsortDeclMap -> Term .
 eq kPurifyTerm(Trm, T, M, OPDS, SSDM) 
  = kPurifyTerm(Trm, T, M, OPDS, SSDM, isKSort(T) or-else isKListSort(T)) .
 op kPurifyTerm : Term Type Module OpDeclSet SubsortDeclMap Bool -> Term .
--- subsorted terms becoming klabels
ceq kPurifyTerm(Trm, T, M, OPDS, SSDM [(subsort S < S' .) |-> (op Q : S -> T' [AS] .)], true)
  = Q[findPurifyRedex(Trm,S,M,OPDS, SSDM [(subsort S < S' .) |-> (op Q : S -> T' [AS] .)])] 
 if getTopSymbol(Trm) =/= replaceS /\ matchTermSorts(M, Trm, S) [print "wrapping " Trm " of type " T " with " Q] .

--- applied operators 
 eq kPurifyTerm(Q[Trms], T, M, OPDS, SSDM, true)
  = Q[kPurifyTerms(Trms, getTypes(countTerms(Trms),findOp(M, OPDS, Q, leastSortsTs(M,Trms), T)), M, OPDS, SSDM)] [owise] .

 eq kPurifyTerm(Trm, T, M, OPDS, SSDM, false) 
  = findPurifyRedex(Trm, T, M, OPDS, SSDM) . 
 eq kPurifyTerm(C, T, M, OPDS, SSDM, true) = C [owise] .
 eq kPurifyTerm(V, T, M, OPDS, SSDM, true) = V [owise] .
endfm
