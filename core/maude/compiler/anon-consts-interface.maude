load anon-consts

mod ANONYMOUS-CONSTANTS-META is
  including ANONYMOUS-CONSTANTS .
  including META-LEVEL .
  var AnonConsts NoAnonConsts : String .
  var QAnonConsts QNoAnonConsts : Qid .  var M : Module .
  op resolveAnonConsts : String String ~> Module .
  eq resolveAnonConsts(AnonConsts, NoAnonConsts) 
   = resolveAnonConsts(qid(AnonConsts), qid(NoAnonConsts)) .
  op resolveAnonConsts : Qid Qid ~> Module .
  eq resolveAnonConsts(QAnonConsts,QNoAnonConsts) 
   = resolveAnonymousConsts(QNoAnonConsts, upModule(QAnonConsts, false), upModule(QAnonConsts, true)) .
  op compileANONYMOUS-CONSTANTS : Module ~> Module .
  eq compileANONYMOUS-CONSTANTS(M) = resolveAnonymousConsts(getName(M),M, flatten(M)) .
endm

mod ANONYMOUS-CONSTANTS-LOOP is 
  including LOOP-MODE + META-LEVEL .
  including MODULE-META-PRETTY-PRINT .
  op anon-consts : -> System .
  op idle : -> State .
  var Q AnonConsts NoAnonConsts : Qid . var QIL QIL' : QidList . var FM : Module .
  eq anon-consts = [nil, idle, 
 'Usage: 'resolveAnonConsts '<SourceModule> '<DestModule> '.] .


  op wrapper : Qid -> Module .
  eq wrapper(Q) = (mod 'MKKR is including Q . 
                    sorts none . none none none none none endm) .
  op error : -> [Module] .
  op print : Module [Module] -> QidList .
  var Str : String . var M FM' : Module .
  eq print(M,FM) = eMetaPrettyPrint(setRls(setEqs(FM,none),none), FM) [owise] .
  crl ['resolveAnonConsts AnonConsts NoAnonConsts QIL, idle, QIL'] 
   => [QIL, idle, print(upModule(AnonConsts,false), FM )] 
   if FM := downTerm(getTerm(
             metaReduce(wrapper('ANONYMOUS-CONSTANTS-META),
                        'resolveAnonConsts[upTerm(string(AnonConsts)),upTerm(string(NoAnonConsts))])),error) .
endm
