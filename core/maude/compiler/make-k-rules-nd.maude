fmod MAKE-K-RULES is
  including META-MODULE-EXTRAS .
  including  META-K-RULES .
  including  META-K-CONTEXTS .
  including META-K-COOL .
  including META-LEVEL-EXTRAS .
  including META-K-CONDITION-SEARCH .
  including PARSE-METADATA .
  including COMPILATION-ATTRS .
  var M Flat : Module .  var T T1 T2 : Term .  
  var AS AS' AS'' : AttrSet .  var A : Attr .
  var C : Term . var S : Sort .  var Ss : SortSet . var Subst : Substitution .
  var Ct : Constant . var V : Variable .
  var O O' Q : Qid . var N : Nat . var Tl : TermList .
  var KRuleType : KRuleKind .  var Split : KRuleSplit .
  var Mas : MembAxSet . var Max : MembAx .
  var OPDS : OpDeclSet . var Op : OpDecl .  var Ty : Type .
  
  op resolveKRules : Qid Module Module SortSet AttrSet -> Module .
  eq resolveKRules(O, M, Flat, Ss, AS) = setName(resolveReplace(setOps(setEqs(setRls(Flat,none),none),clearReductionAttrs(getOps(Flat)) coolCellOps(Ss)), addOps(coolCellOps(Ss),setMbs(removeImports(M, (including 'K-RULES .) (including 'K-CONDITION-SEARCH .)),none)), getMbs(M), coolSubst(Ss), AS), O) .
  
  op coolCellOps : SortSet -> OpDeclSet .
  eq coolCellOps(none) = none .
  eq coolCellOps(S ; Ss) 
   = (op cool(S) : nil -> CellLabel [none] .)
     coolCellOps(Ss) .

  op coolSubst : SortSet -> Substitution .
  eq coolSubst(none) = none .
  eq coolSubst(S ; Ss)
   = (mkCellLabel(S) <- mkCellLabel(cool(S))) ;
     coolSubst(Ss) .

  op resolveReplace : Module Module MembAxSet Substitution AttrSet -> Module .
  eq resolveReplace(Flat, M, none, Subst, AS) = removeReplaceOps(M) .
  eq resolveReplace(Flat, M, Max Mas, Subst, AS)
   = resolveReplace(Flat, M, Max, Mas, Subst, AS) .
  op resolveReplace : Module Module MembAx MembAxSet Substitution AttrSet -> Module .
 ceq resolveReplace(Flat, M, Max, Mas, Subst, AS)
   = resolveReplace(Flat, addReplace(Flat, M, Split, Subst, AS), Mas, Subst, AS)
  if Split := splitKRule(metadataParse(Max)) .
 ceq resolveReplace(Flat, M, Max, Mas, Subst, AS)
   = resolveReplace(Flat, addCxtReplace(Flat, M, CSplit), Mas, Subst, AS)
  if CSplit := splitKContext(metadataParse(Max)) .
  eq resolveReplace(Flat, M, Max, Mas, Subst, AS) 
   = resolveReplace(Flat, addMbs(Max, M), Mas, Subst, AS) [owise] .
  eq resolveReplace(Flat,  errorM(AS:AttrSet, Str:String, T:[Term], Cxt:[Term], U:Module), Mas, Subst, AS')
   = errorM(AS:AttrSet, Str:String, T:[Term], Cxt:[Term], Flat) .

  op removeReplaceOps : Module -> Module .
  eq removeReplaceOps(M) = setOps(M, removeReplaceOps(getOps(M))) .
  
  op removeReplaceOps : OpDeclSet -> OpDeclSet .
  eq removeReplaceOps((op Q : Ty Ty -> Ty [AS] .) OPDS) 
   = if Q == replaceS then removeReplaceOps(OPDS) else (op Q : Ty Ty -> Ty [AS] .) removeReplaceOps(OPDS) fi .
 ceq removeReplaceOps((op Q : Ty 'Bool -> '`[KSentence`] [AS] .) OPDS)
   = removeReplaceOps(OPDS) if Q = symbol kcrl .
 ceq removeReplaceOps((op Q : Ty -> '`[KSentence`] [AS] .) OPDS)
   = removeReplaceOps(OPDS) if Q = symbol krl .
  eq removeReplaceOps(Op OPDS) = Op removeReplaceOps(OPDS) [owise] .
  eq removeReplaceOps(none) = none .


---------  Hack to get rid of the potential attribute large
  eq klarge = none . 
---------

  op addCxtReplace : Module Module KContextSplit ~> Module .
  eq addCxtReplace(Flat, M, CSplit) = addMbs(plugKContext(setAttrs(setContents(CSplit, replaceCxt(splitReplace(Flat, getContents(CSplit),1), getHoleReplacement(getContents(CSplit)))),metadata(getAttrs(CSplit)))), M) .

  op addReplace : Module Module KRuleSplit Substitution AttrSet ~> Module .
  eq addReplace(Flat, M,{krl,T,empty,AS A}, Subst, AS' structurals(A AS''))
   = addEqs((eq normalize(Flat,splitReplace(Flat, T,1)) = handleTagSuperCooling(normalize(Flat,splitReplace(Flat, T,2)),Subst, AS A, AS') [metadata(A AS)] .), M) . 
  eq addReplace(Flat, M, {kcrl, T, C, AS A}, Subst, AS' structurals(A AS''))
   = addEqs((ceq normalize(Flat,splitReplace(Flat, T,1)) = handleTagSuperCooling(normalize(Flat,splitReplace(Flat, T,2)),Subst, AS A, AS') if C = trueCt [metadata(A AS)] .), M) .

  eq addReplace(Flat, M, {krl, T, empty, AS A}, Subst, AS' computationals(A AS''))
    = addRls((rl normalize(Flat,splitReplace(Flat, T,1)) => handleTagSuperCooling(normalize(Flat,splitReplace(Flat, T,2)), Subst, AS A, AS') [metadata(A AS)] .), M) .
  eq addReplace(Flat, M, {kcrl, T, C, A AS}, Subst, AS' computationals(A AS'')) 
    = addRls((crl normalize(Flat,splitReplace(Flat, T,1)) => handleTagSuperCooling(normalize(Flat, splitReplace(Flat, T,2)), Subst, A AS, AS') if makeCondition(C)  [metadata(A AS)] .), M) .

  eq addReplace(Flat, M, {krl, T, empty, AS}, Subst, AS' computationals(none))
    = addRls((rl normalize(Flat,splitReplace(Flat, T,1)) => handleTagSuperCooling(normalize(Flat,splitReplace(Flat, T,2)), Subst, AS kcomputational, AS') [metadata(kcomputational AS)] .), M) [owise] .
  eq addReplace(Flat, M, {kcrl, T, C, AS}, Subst, AS' computationals(none)) 
    = addRls((crl normalize(Flat,splitReplace(Flat, T,1)) => handleTagSuperCooling(normalize(Flat, splitReplace(Flat, T,2)), Subst, kcomputational AS, AS') if makeCondition(C)  [metadata(kcomputational AS)] .), M) [owise] .

 eq addReplace(Flat, M,{krl,T,empty,AS}, Subst, AS' computationals(A AS''))
   = addEqs((eq normalize(Flat,splitReplace(Flat, T,1)) = handleTagSuperCooling(normalize(Flat,splitReplace(Flat, T,2)),Subst, AS kstructural, AS') [metadata(kstructural AS)] .), M) [owise] . 
  eq addReplace(Flat, M, {kcrl, T, C, AS}, Subst, AS' computationals(A AS''))
   = addEqs((ceq normalize(Flat,splitReplace(Flat, T,1)) = handleTagSuperCooling(normalize(Flat,splitReplace(Flat, T,2)),Subst, AS kstructural, AS') if C = trueCt [metadata(kstructural AS)] .), M) [owise] .

  op handleTagSuperCooling : Term Substitution AttrSet AttrSet -> Term .
  eq handleTagSuperCooling(T, Subst, A AS, AS' supercools(A AS'')) = T[Subst] .
  eq handleTagSuperCooling(T, Subst, AS, AS') = T [owise] .

  op makeCondition : Term -> Condition .
 ceq makeCondition(O'[O[T1,T2]])
   = T1 => T2 
  if O' = searchS /\ O = replaceS .
  eq makeCondition(T) = T = trueCt [owise] .

  var CSplit : KContextSplit .
endfm

