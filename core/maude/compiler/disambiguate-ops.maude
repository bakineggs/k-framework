fmod DISAMBIGUATE-OPS is
 including META-TERM-EXTRAS .
 including META-MODULE-EXTRAS .
 including META-LEVEL-EXTRAS .
 including META-K-LABELS .
 including META-K-WRAPPERS .
 including K-META-OPS .
 including METADATA-EXTRAS .
 including CONVERSION .

 var Q Q' : Qid . var T T' T'' : Type . var Tl Tl' : TypeList . 
 var N : Nat . var Nl : NatList .
 var MS : ModuleSet .  var M Flat : Module .
 vars Mbs : MembAxSet . var Mb : MembAx .
 var Eqs : EquationSet . var Eq : Equation .
 var Rls : RuleSet . var Rl : Rule .
 var Trms : TermList . vars T1 T2 Trm : Term .  var Cond : Condition .
 var C : Constant . var V : Variable .
 vars OPDS Wrappers Unambiguous : OpDeclSet . var Op Op' : OpDecl .
 var AS AS' : AttrSet .
 var OPDM : OpDeclMap .  var LabelOp : OpDeclSet .

 op allUnambiguousImports : ModuleSet ~> ImportList .
 eq allUnambiguousImports(M MS) = allUnambiguousImports(MS, getName(M), pseudoKOps(getOps(M))) .

 op allUnambiguousImports : ModuleSet Qid OpDeclSet ~> ImportList .
 eq allUnambiguousImports(MS, Q, OPDS) 
  = if OPDS == none
    then allUnambiguousImports(MS)
    else allUnambiguousImports(MS) (including Q .) 
    fi [print Q "(" OPDS ")" ] .
 eq allUnambiguousImports(empty) = nil .

 op makeUnambiguous : Qid Module Module ModuleSet ~> Module .
 eq makeUnambiguous(Q, M, Flat, MS)
  = makeUnambiguous(setName(suffixImports(Q,M,allUnambiguousImports(MS)), qid(string(getName(M)) + string(Q))), Flat, processOps(Flat,syntaxOps(Flat))) .

 op makeUnambiguous : Module Module OpDeclMap ~> Module .
 eq makeUnambiguous(M, Flat, OPDM) 
  = applyUnambiguous(addOps(filteredProject(OPDM,getOps(M)), removeOps(M, getKeys(OPDM))), Flat, OPDM) .

 op filteredProject : OpDeclMap OpDeclSet -> OpDeclSet .
 eq filteredProject((empty).OpDeclMap, OPDS) = none .
 eq filteredProject(OPDM (Op |-> LabelOp), OPDS) 
  = if Op in OPDS then LabelOp filteredProject(OPDM,OPDS) 
    else filteredProject(OPDM,OPDS) fi .

 op applyUnambiguous : Module  Module OpDeclMap ~> Module .
 eq applyUnambiguous(M, Flat, OPDM)
  = 
   setRls(
   setEqs(
   setMbs(
       M 
    , makeUnambiguousMbs(Flat, getOps(Flat), OPDM, getMbs(M)))
    , makeUnambiguousEqs(Flat, getOps(Flat), OPDM, getEqs(M)))
    , makeUnambiguousRls(Flat, getOps(Flat), OPDM, getRls(M)))
  .

 op makeUnambiguousMbs : Module OpDeclSet OpDeclMap MembAxSet ~> MembAxSet .
 eq makeUnambiguousMbs(M, OPDS, OPDM, Mbs Mb)
  =  makeUnambiguousMbs(M, OPDS, OPDM, Mbs) makeUnambiguousMb(Mb, M, OPDS, OPDM) .
 eq makeUnambiguousMbs(M, OPDS, OPDM, none) = none .

 op makeUnambiguousMb : MembAx Module OpDeclSet OpDeclMap ~> MembAx .
 eq makeUnambiguousMb((mb T1 : T [AS] .), M, OPDS, OPDM)
  = (mb makeUnambiguousT(T1, getKind(M,T), M, OPDS, OPDM) : T [AS] .) .
 eq makeUnambiguousMb((cmb T1 : T if Cond [AS] .), M, OPDS, OPDM)
  = (cmb makeUnambiguousT(T1, getKind(M,T), M, OPDS, OPDM) : T if Cond [AS] .) .

 op makeUnambiguousEqs : Module OpDeclSet OpDeclMap EquationSet ~> EquationSet .
 eq makeUnambiguousEqs(M, OPDS, OPDM, Eqs Eq)
  =  makeUnambiguousEqs(M, OPDS, OPDM, Eqs) makeUnambiguousEq(Eq, M, OPDS, OPDM) .
 eq makeUnambiguousEqs(M, OPDS, OPDM, none) = none .

 op makeUnambiguousEq : Equation Module OpDeclSet OpDeclMap ~> Equation .
 eq makeUnambiguousEq((eq T1 = T2 [AS] .), M, OPDS, OPDM)
  = (eq makeUnambiguousT(T1, getKind(M,leastSort(M,T1)), M, OPDS, OPDM) 
      = makeUnambiguousT(T2, getKind(M,leastSort(M,T1)), M, OPDS, OPDM) [AS] .) .
 eq makeUnambiguousEq((ceq T1 = T2 if Cond [AS] .), M, OPDS, OPDM)
  = (ceq makeUnambiguousT(T1, getKind(M,leastSort(M,T1)), M, OPDS, OPDM) 
       = makeUnambiguousT(T2, getKind(M,leastSort(M,T1)), M, OPDS, OPDM) 
      if Cond [AS] .) .

 op makeUnambiguousRls : Module OpDeclSet OpDeclMap RuleSet ~> RuleSet .
 eq makeUnambiguousRls(M, OPDS, OPDM, Rls Rl)
  =  makeUnambiguousRls(M, OPDS, OPDM, Rls) makeUnambiguousRl(Rl, M, OPDS, OPDM) .
 eq makeUnambiguousRls(M, OPDS, OPDM, none) = none .

 op makeUnambiguousRl : Rule Module OpDeclSet OpDeclMap ~> Rule .
 eq makeUnambiguousRl((rl T1 => T2 [AS] .), M, OPDS, OPDM)
  = (rl makeUnambiguousT(T1, getKind(M,leastSort(M,T1)), M, OPDS, OPDM) 
     => makeUnambiguousT(T2, getKind(M,leastSort(M,T1)), M, OPDS, OPDM) [AS] .) .
 eq makeUnambiguousRl((crl T1 => T2 if Cond [AS] .), M, OPDS, OPDM)
  = (crl makeUnambiguousT(T1, getKind(M,leastSort(M,T1)), M, OPDS, OPDM) 
      => makeUnambiguousT(T2, getKind(M,leastSort(M,T1)), M, OPDS, OPDM) 
      if Cond [AS] .) .

 op makeUnambiguousTs : TermList TypeList Module OpDeclSet OpDeclMap ~> TermList  .
 eq makeUnambiguousTs((Trm,Trms), T Tl, M, OPDS, OPDM)
  = makeUnambiguousT(Trm,T,M,OPDS,OPDM), makeUnambiguousTs(Trms,Tl, M,OPDS,OPDM) .
 eq makeUnambiguousTs(empty,nil,M,OPDS,OPDM) = empty .

 op makeUnambiguousT : Term Type Module OpDeclSet OpDeclMap ~> Term .
 eq makeUnambiguousT(C, T, M, OPDS, OPDM ) 
  = makeUnambiguousT(C, T, M, OPDS, OPDM, findOp(M, OPDS, getName(C), nil, getType(C))) .
 eq makeUnambiguousT(V, T, M, OPDS, OPDM) = V .
 eq makeUnambiguousT('if_then_else_fi[Trms],T,M,OPDS,OPDM)
  = 'if_then_else_fi[makeUnambiguousTs(Trms, 'Bool T T, M, OPDS,OPDM)] .
--- eq makeUnambiguousT('_==Bool_[T1,T2],T,M,OPDS,OPDM)
---  = '_==Bool_[makeUnambiguousTs((T1,T2), leastSort(M,T1) leastSort(M, T2), M, OPDS,OPDM)] .
 eq makeUnambiguousT(Q[Trms], T, M, OPDS, OPDM)
  = makeUnambiguousT(Q[Trms], T, M, OPDS, OPDM, findOp(M, OPDS,Q, leastSorts(M, Trms), T)) [owise] .

 op makeUnambiguousT : Term Type Module OpDeclSet OpDeclMap OpDecl ~> Term .
--- subsorted terms becoming kmakeUnambiguous
 eq makeUnambiguousT(Q[Trms], T, M, OPDS, OPDM (Op |-> (op Q' : Tl -> T [AS] .)), Op)
  =  Q'[makeUnambiguousTs(Trms, getTypes(countTerms(Trms), Op), M, OPDS, OPDM (Op |-> (op Q' : Tl -> T' [AS] .)))] .
 eq makeUnambiguousT(Q[Trms], T, M, OPDS, OPDM, Op)
  = Q[makeUnambiguousTs(Trms, getTypes(countTerms(Trms), Op), M, OPDS, OPDM)] [owise] .
 eq makeUnambiguousT(C, T, M, OPDS, OPDM (Op |-> (op Q' : nil -> T' [AS] .)), Op)
  =  kApply(mkConstant(Q',T'), empty) .
 eq makeUnambiguousT(C, T, M, OPDS, OPDM, Op)
  = C [owise] .

 sort OpDeclMap .
 op _|->_ : OpDecl OpDeclSet -> OpDeclMap .
 op __ : OpDeclMap OpDeclMap -> OpDeclMap [assoc comm id: empty] .
 op empty : -> OpDeclMap .

 op _[_] : OpDeclMap OpDecl -> OpDeclSet .
 eq ((Op |-> LabelOp) OPDM)[Op] = LabelOp .
 eq OPDM[Op] = none [owise] .

 op getKeys : OpDeclMap ~> OpDeclSet .
 eq getKeys((Op |-> OPDS) OPDM) = Op getKeys(OPDM) .
 eq getKeys(empty) = none .

 op processOps : Module OpDeclSet ~> OpDeclMap .
 eq processOps(M, Op OPDS) = processOps(M, OPDS, Op relatedOps(M, Op, OPDS)) .
 eq processOps(M, none) = empty .

 op processOps : Module OpDeclDet OpDeclSet ~> OpDeclMap .
 eq processOps(M, OPDS, Op) = processOps(M, OPDS) .
 eq processOps(M, OPDS, OPDS') 
  = processOps(M, removeOps(OPDS, OPDS')) $processOps(M, minimalOps(M, OPDS'), OPDS') [owise] .

 op $processOps : Module OpDeclDet OpDeclSet ~> OpDeclMap .
 eq $processOps(M, Op, OPDS) = empty .
 eq $processOps(M, OPDS, Op OPDS') = Op |-> disambiguate(leastOp(M, Op, OPDS)) [owise] .
 eq $processOps(M, OPDS, none) = empty .
endfm


