mod RESULT-PREDICATES is
  including META-MODULE-EXTRAS .
  including META-K-RULES .
  including META-K-CONTEXTS .
  including META-LEVEL-EXTRAS .
  including PARSE-METADATA .

 
  op resultPredicates : Module -> Module .
  eq resultPredicates(M)
   = addImports(including 'K-RESULT-LABELS ., removeImports(setRls(setEqs(setMbs(setOps(M, flattenLabelsOps(getOps(M))), resultPredMbs(getMbs(M))  resultPredicates(getOps(M))), resultPredEqs(getEqs(M))), resultPredRls(getRls(M))), (including 'K-RESULT .)(including 'K-PROPER .))) .


 op resultPredicates : OpDeclSet ~> MembAxSet .

  eq resultPredicates((op Q : Tyl -> T [AS] .) OPDS)
   = if T == KResultLabel then resultPredicate(Q, Tyl, AS) resultPredicates(OPDS)
     else if T == KHybridLabel then hybridPredicate(Q, Tyl, AS) resultPredicates(OPDS)
     else resultPredicates(OPDS) fi fi .
  eq resultPredicates(OPDS) = none [owise] .

  
  op resultPredicate : Qid TypeList AttrSet ~> MembAx .
  eq resultPredicate(Q, nil, AS) = plugKRule(R{replaceS[kApply(kresultLabel,kApply(mkConstant(Q, KLabel), mkVariable('L,KList))),bool2K(trueCt)],empty, AS metadata(pair("predicate","") pair("KResult",""))}) .
  eq resultPredicate(Q, Tyl, AS) = plugKRule(R{replaceS[kApply(kresultLabel, kApply(Q[genVars(Tyl,"KVar")],nilKList)),bool2K(trueCt)],empty,AS metadata(pair("predicate","") pair("KResult",""))}) .

  op hybridPredicate : Qid TypeList AttrSet ~> MembAxSet .
  eq hybridPredicate(Q, nil, AS) = plugKRule(R{replaceS[kApply(kresultLabel,kApply(mkConstant(Q, KLabel), mkVariable('L,KList))),bool2K(trueCt)],kApply(kresultLabel,mkVariable('L,KList)), AS metadata(pair("predicate","") pair("KHybrid",""))}) .


  op flattenLabelsOps : OpDeclSet ~> OpDeclSet .
  eq flattenLabelsOps(Op OPDS)
   = flattenLabelsOps(OPDS, Op) .
  eq flattenLabelsOps(none) = none .

  op flattenLabelsOps : OpDeclSet OpDecl ~> OpDeclSet .
  eq flattenLabelsOps(OPDS, (op Q : Tyl -> T [AS] .))
   = if T == KProperLabel or-else T == KResultLabel or-else T == KHybridLabel
     then (op Q : flattenTypes(Tyl) -> KLabel [metadata(AS pair(string(T),""))] .)
     else if T == ResultList 
          then  (op Q : flattenTypes(Tyl) -> KList [metadata(AS pair(string(T),""))] .)
          else (op Q : flattenTypes(Tyl) -> T [AS] .)
          fi
     fi flattenLabelsOps(OPDS) .
  eq flattenLabelsOps(OPDS, Op) = Op flattenLabelsOps(OPDS) [owise] .

  op flattenTypes : TypeList -> TypeList .
  eq flattenTypes(nil) = nil .
  eq flattenTypes(T Tyl)
  = if T == KProperLabel 
     or-else T == KResultLabel 
     or-else T == KHybridLabel
     then KLabel 
     else if T == KProper or-else T == KResult
          then K
          else if T == ResultList 
               then KList
               else T 
               fi
          fi
     fi flattenTypes(Tyl) .


  op flattenResultsT_ : TermList ~> TermList .
  eq flattenResultsT(Q[Trms],Trms') = Q[flattenResultsT(Trms)],flattenResultsT(Trms') .
  eq flattenResultsT(empty) = empty .
  eq flattenResultsT(CV, Trms')  
   = if getType(CV) == KProperLabel 
     or-else getType(CV) == KResultLabel 
     or-else getType(CV) == KHybridLabel
     then setType(CV, KLabel) 
     else if getType(CV) == KProper or-else getType(CV) == KResult
          then setType(CV, NeK)
          else if getType(CV) == ResultList 
               then setType(CV, KList)
               else CV 
               fi
          fi
     fi, flattenResultsT(Trms') .

  op resultVars_ : TermList ~> TermList .
  eq resultVars(empty) = empty .
  eq resultVars(V,Trms) 
   = if getType(V) == KResult or-else getType(V) == ResultList
     then V,resultVars(Trms) else resultVars(Trms) fi .

  op resultCondition_ : TermList ~> TermList .
  eq resultCondition(empty) = empty .
  eq resultCondition(NTrms) = kApply(kresultLabel,kList(flattenResultsT(NTrms))) .


 op resultPredMbs : MembAxSet ~> MembAxSet .
 eq resultPredMbs(Mbs Mb)
  =  resultPredMbs(Mbs) resultPredMb(Mb) .
 eq resultPredMbs(none) = none .

 op resultPredMb : MembAx ~> MembAx .
ceq resultPredMb(Mb)
  = resultPredKRl(KRS, resultPredT(getContents(KRS)), resultCondition(resultVars(noDuplicates(getVars(getContents(KRS))))))
 if KRS := splitKRule(Mb) [print "resultPredMb splitKRule " KRS].
ceq resultPredMb(Mb)
  = resultPredKCxt(KCS, resultPredT(getContents(KCS)), resultCondition(resultVars(noDuplicates(getVars(getContents(KCS))))))
 if KCS := splitKContext(Mb) .
 eq resultPredMb(Mb)
  = plugMb(resultPredT(getTerm(Mb)), getType(Mb), getAttrs(Mb), mkCondition(resultCondition(resultVars(noDuplicates(getVars(getTerm(Mb)))))) /\ resultPredCond(getCond(Mb))) [owise] .

 op resultPredKCxt : KContextSplit Term TermList ~> MembAx .
 eq resultPredKCxt(KCS, T1, Trms) = plugKContext(setCondition(setContents(KCS, T1), andBool(flattenResultsT(Trms,getCondition(KCS))))) .

 op resultPredKRl : KRuleSplit Term TermList ~> MembAx .
 eq resultPredKRl(KRS, T1, Trms) = plugKRule(setCondition(setContents(KRS, T1), andBool(flattenResultsT(Trms,getCondition(KRS))))) .

 op resultPredEqs : EquationSet ~> EquationSet .
 eq resultPredEqs(Eqs Eq)
  =  resultPredEqs(Eqs) plugEq(resultPredT(getLhs(Eq)), resultPredT(getRhs(Eq)), getAttrs(Eq), mkCondition(resultCondition(resultVars(noDuplicates(getVars(getLhs(Eq)))))) /\ resultPredCond(getCond(Eq))) .
 eq resultPredEqs(none) = none .

 op resultPredRls : RuleSet ~> RuleSet .
 eq resultPredRls(Rls Rl)
  =  resultPredRls(Rls) plugRl(resultPredT(getLhs(Rl)), resultPredT(getRhs(Rl)), getAttrs(Rl), mkCondition(resultCondition(resultVars(noDuplicates(getVars(getLhs(Rl)))))) /\ resultPredCond(getCond(Rl))) .
 eq resultPredRls(none) = none .

 op resultPredCond : Condition ~> Condition .
 eq resultPredCond(T1 = T2 /\ Cond)
  = resultPredT(T1) = resultPredT(T2)
    /\ resultPredCond(Cond) .
 eq resultPredCond(T1 := T2 /\ Cond)
  = resultPredT(T1) := resultPredT(T2)
    /\ resultPredCond(Cond) .
 eq resultPredCond(T1 => T2 /\ Cond)
  = resultPredT(T1) => resultPredT(T2)
    /\ resultPredCond(Cond) .
 eq resultPredCond(Trm : T /\ Cond)
  = resultPredT(Trm) : T
    /\ resultPredCond(Cond) .
 eq resultPredCond(nil) = nil .


 op resultPredT : Term ~> Term .
 eq resultPredT(T1) = flattenResultsT(T1) .

  op mkCondition : TermList ~> Condition .
  eq mkCondition(empty) = nil .
  eq mkCondition(Trm) = (Trm = bool2K(trueCt)) .

  var CV T1 T2 Trm : Term .  var Trms Trms' : TermList . var NTrms : NeTermList .
  var V : Variable .  var Q : Qid .
  var Cond : Condition .
  var T : Type . var Tyl : TypeList .

  var OPDS : OpDeclSet . var Op : OpDecl .  var AS : AttrSet .
  var Mbs : MembAxSet . var Mb : MembAx . 
  var Eqs : EquationSet . var Eq : Equation .
  var Rls : RuleSet . var Rl : Rule .
  var KRS : KRuleSplit . var KCS : KContextSplit .
  var M : Module .
endm
