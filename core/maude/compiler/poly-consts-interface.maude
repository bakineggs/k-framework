load poly-consts

mod POLYMORPHIC-CONSTANTS-META is
  including POLYMORPHIC-CONSTANTS .
  including META-LEVEL .
  var PolyConsts NoPolyConsts : String .
  var QPolyConsts QNoPolyConsts : Qid .  var M : Module .
  op resolvePolyConsts : String String ~> Module .
  eq resolvePolyConsts(PolyConsts, NoPolyConsts) 
   = resolvePolyConsts(qid(PolyConsts), qid(NoPolyConsts)) .
  op resolvePolyConsts : Qid Qid ~> Module .
  eq resolvePolyConsts(QPolyConsts,QNoPolyConsts) 
   = resolvePolymorphicConsts(QNoPolyConsts, upModule(QPolyConsts, false), upModule(QPolyConsts, true)) .
  op compilePOLYMORPHIC-CONSTANTS : Module ~> Module .
  eq compilePOLYMORPHIC-CONSTANTS(M) = resolvePolymorphicConsts(getName(M),M, flatten(M)) .
endm

mod POLYMORPHIC-CONSTANTS-LOOP is 
  including LOOP-MODE + META-LEVEL .
  including MODULE-META-PRETTY-PRINT .
  op poly-consts : -> System .
  op idle : -> State .
  var Q PolyConsts NoPolyConsts : Qid . var QIL QIL' : QidList . var FM : Module .
  eq poly-consts = [nil, idle, 
 'Usage: 'resolvePolyConsts '<SourceModule> '<DestModule> '.] .


  op wrapper : Qid -> Module .
  eq wrapper(Q) = (mod 'MKKR is including Q . 
                    sorts none . none none none none none endm) .
  op error : -> [Module] .
  op print : Module [Module] -> QidList .
  var Str : String . var M FM' : Module .
  eq print(M,FM) = eMetaPrettyPrint(setRls(setEqs(FM,none),none), FM) [owise] .
  crl ['resolvePolyConsts PolyConsts NoPolyConsts QIL, idle, QIL'] 
   => [QIL, idle, print(upModule(PolyConsts,false), FM )] 
   if FM := downTerm(getTerm(
             metaReduce(wrapper('POLYMORPHIC-CONSTANTS-META),
                        'resolvePolyConsts[upTerm(string(PolyConsts)),upTerm(string(NoPolyConsts))])),error) .
endm
