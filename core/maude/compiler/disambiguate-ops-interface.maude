load disambiguate-ops

mod DISAMBIGUATE-OPS-META is
  including DISAMBIGUATE-OPS .
  including META-LEVEL-EXTRAS .
  var Ambiguous Unambiguous : String .  var M : Module .
  var Q QAmbiguous QUnambiguous : Qid .  var IL : ImportList .
  op makeUnambiguous : String String ~> Module .
  eq makeUnambiguous(Ambiguous, Unambiguous) = makeUnambiguous(qid(Ambiguous), qid(Unambiguous)) .
  op makeUnambiguous : Qid Qid ~> Module .
  eq makeUnambiguous(QAmbiguous,QUnambiguous) = makeUnambiguous(QUnambiguous, upModule(QAmbiguous, false), upModule(QAmbiguous, true), upImports(getImports(upModule(QAmbiguous, false)))) .

  op compileDISAMBIGUATE-OPS : Module AttrSet ~> Module .
  eq compileDISAMBIGUATE-OPS(M, AS:AttrSet) = setName(makeUnambiguous('-LABELS, M, flatten(M), upModule('K-WRAPPERS,false)), getName(M)) .
endm

mod DISAMBIGUATE-OPS-LOOP is 
  including LOOP-MODE + META-LEVEL .
  including MODULE-META-PRETTY-PRINT .
  op disambiguate-ops : -> System .
  op idle : -> State .
  var Q Ambiguous Unambiguous : Qid . var QIL QIL' : QidList . var FM : Module .
  eq disambiguate-ops = [nil, idle, 
 'Usage: 'makeUnambiguous '<Name> '<Suffix> '.] .


  op wrapper : Qid -> Module .
  eq wrapper(Q) = (mod 'MKKR is including Q . 
                    sorts none . none none none none none endm) .
  op error : -> [Module] .
  op print : Module [Module] -> QidList .
  var Str : String . var M FM' : Module .
  eq print(M,FM) = eMetaPrettyPrint(setRls(setEqs(FM,none),none), FM) [owise] .
  crl ['makeUnambiguous Ambiguous Unambiguous QIL, idle, QIL'] 
   => [QIL, idle, print(upModule(Ambiguous,false), FM )] 
   if FM := downTerm(getTerm(
             metaReduce(wrapper('DISAMBIGUATE-OPS-META),
                        'makeUnambiguous[upTerm(string(Ambiguous)),upTerm(string(Unambiguous))])),error) .
endm
