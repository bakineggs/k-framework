in ../../../k-prelude.maude
in exp-untyped-syntax.kmaude
in ../exp-programs.maude

kmod EXP-UNTYPED-SEMANTICS is including EXP-DESUGARED-SYNTAX + K 
  sort Val 
  subsort Int Bool < Val < Exp < K 
  subsort Val < KResult 
  configuration <T> <k> .K </k> <env> .Map </env> <store> .Map </store> <nextLoc> 0 </nextLoc> </T> 
  rule <k> X:Id => E:Exp <_/k> <env_> X |-> L:Nat <_/env> <store_> L |-> E <_/store> 
  rule I1:Int + I2:Int => I1 +Int I2 
  rule _-_(I1,I2) => _-Int_(I1,I2) 
  rule I1 * I2 => I1 *Int I2 
  rule I1 / I2 => I1 /Int I2 if I2 =/=Bool 0 
  rule I1 % I2 => I1 %Int I2 if I2 =/=Bool 0 
  rule - I:Int => -Int I 
  rule I1 < I2 => I1 <Int I2 
  rule I1 <= I2 => I1 <=Int I2 
  rule I1 > I2 => I1 >Int I2 
  rule I1 >= I2 => I1 >=Int I2 
  rule V1:Val == V2:Val => V1 ==Bool V2 
  rule V1 != V2 => V1 =/=Bool V2 
  rule T1:Bool and T2:Bool => T1 andBool T2 
  rule T1 or T2 => T1 orBool T2 
  rule not(T:Bool) => notBool(T) 
  rule if  true then E else  _  => E 
  rule if false then  _  else E => E 
  op closure-lambda : Map Id Exp -> Val [metadata "latex(renameTo closure\\subscript\\lambda)"]
  rule <k> lambda X . E => closure-lambda(Env:Map,X,E) <_/k> <env> Env </env> 
  rule <k> closure-lambda(Env,X,E) V => E ~> env(Env') <_/k> <env> Env':Map =>  Env[L / X] </env>
          <store_> . => L |-> V <_/store> <nextLoc> L => sNat L </nextLoc> 
  op closure-mu : Map Exp -> Exp [metadata "latex(renameTo closure\\subscript\\mu)"]
  rule <k> mu X . E => closure-mu(Env[L / X],E) <_/k> <env> Env </env>
          <store_> . => L |-> closure-mu(Env[L / X],E) <_/store> <nextLoc> L => sNat L </nextLoc> 
  rule <k> closure-mu(Env,E) => E ~> env(Env') <_/k> <env> Env' => Env </env> 

---( we need mu closures ... the rule below is wrong, because the free variables of E can be captured ... nastily ... argh; see p12
  rule <k> mu X . E => E ~> env(Env) <_/k> <env> Env => Env[L / X] </env>
          <store_> . => L |-> mu X . E <_/store> <nextLoc> L => sNat L </nextLoc> 
---)

----------------------------------------------
--- Auxilliary declarations and operations ---
----------------------------------------------
--- environment recovery
  op env : Map -> K 
  rule <k> V:Val ~> (env(Env) => .) <_/k> <env>  _  => Env </env> [structural] 
--- tail recursion
  rule env( _ ) ~> env(Env) => env(Env) [structural] 
endkm

kmod EXP-UNTYPED is including EXP-UNTYPED-SEMANTICS + EXP-PROGRAMS 
  op run : KLabel -> Bag 
  eq run(KL:KLabel) = run(KL,.List{K}) 
  op run : KLabel List{K} -> Bag 
  eq run(KL,L:List`{K`}) = <T_> <k> KL(L) </k> <_/T> 
endkm
