load ../../dist/c-total
mod C-PROGRAM is
including C-SYNTAX .
including MATCH-C-SYNTAX .
including COMMON-C-CONFIGURATION .
op tmpuuu4 : -> Id .
op tmpuuu3 : -> Id .
op tmpuuu2 : -> Id .
op tmpuuu1 : -> Id .
op tmpuuu0 : -> Id .
op tmp : -> Id .
op result : -> Id .
op f : -> Id .
op e : -> Id .
op d : -> Id .
op c : -> Id .
op b : -> Id .
op y : -> Id .
op x : -> Id .
op a : -> Id .
op putchar : -> Id .

op funcptr : -> Id .

------------END-OPERATORS------------
op program-fullNonDet : -> Program .
eq program-fullNonDet = (
((Global((Typedef ((int),  Direct-Function-Declarator((Pointer(typedefName(funcptr))),  Parameter-Type-List(Parameter-Declaration((int)  ))))) 
))((Global(Declaration((extern )(int),  Direct-Function-Declarator((putchar),  Parameter-Type-List()) )
))((Global((Declaration((int),  Direct-Function-Declarator(a,  Parameter-Type-List(Parameter-Declaration((int),  x ) ,.,  Parameter-Declaration((int),  y ))) )
{ 

Block((((((Apply((((putchar))), (((97))));))))  (((return ((((0))));))))
)
})
))((Global((Declaration((int),  Direct-Function-Declarator(b,  Parameter-Type-List(Parameter-Declaration((void)))) )
{ 

Block((((((Apply((((putchar))), (((98))));))))  (((return ((((0))));))))
)
})
))((Global((Declaration((int),  Direct-Function-Declarator(c,  Parameter-Type-List(Parameter-Declaration((int),  x ))) )
{ 

Block((((((Apply((((putchar))), (((99))));))))  (((return ((((0))));))))
)
})
))((Global((Declaration((int),  Direct-Function-Declarator(d,  Parameter-Type-List(Parameter-Declaration((void)))) )
{ 

Block((((((Apply((((putchar))), (((100))));))))  (((return ((((0))));))))
)
})
))((Global((Declaration((int),  Direct-Function-Declarator(e,  Parameter-Type-List(Parameter-Declaration((int),  x ))) )
{ 

Block((((((Apply((((putchar))), (((101))));))))  (((return ((((0))));))))
)
})
))((Global((Declaration(funcptr,  Direct-Function-Declarator(f,  Parameter-Type-List(Parameter-Declaration((void)))) )
{ 

Block((((((Apply((((putchar))), (((102))));))))  (((return (((& (e))));))))
)
})
))((Global((Declaration((int),  Direct-Function-Declarator(main,  Parameter-Type-List(Parameter-Declaration((void)))) )
{ (Local(Declaration((int),  result )))

Block((((((((((((result := Apply(((((Deref(Apply((((f))), (.List{Expression}))))))), Apply((((a))), (Apply((((b))), (.List{Expression})) .,.  Apply((((c))), Apply((((d))), (.List{Expression}))))));))))))))))  (((return ((((0))));))))
)
})
)))))))))))) .
endm

