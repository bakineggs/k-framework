mod CHALLENGE-SYNTAX is including PL-INT + PL-FLOAT + PL-ID .
  sorts Exp Stmt .
  subsorts Bool Int Float Id < Exp .

  op _+_ : Exp Exp -> Exp [gather(E e) prec 33 metadata "strict"] .
  op _*_ : Exp Exp -> Exp [gather(E e) prec 31 metadata "strict"] .
  op _/_ : Exp Exp -> Exp [gather(E e) prec 31 metadata "strict"] .
  op _<=_ : Exp Exp -> Exp [prec 37 metadata "seqstrict"] .
  op not_ : Exp -> Exp [prec 53 metadata "strict"] .
  op _and_ : Exp Exp -> Exp [gather(E e) prec 55 metadata "strict(1)"] .
  op randomBool : -> Exp .

  op vars_; : List{Id} -> Stmt [prec 2] .
  op _=_ : Exp Exp -> Exp [prec 80 gather (e E) metadata "strict(2)"] .
  op ++_ : Id -> Exp [prec 0] .

  op {} : -> Stmt .
  op {_} : Stmt -> Stmt [gather(&)] .
  op __ : Stmt Stmt -> Stmt [prec 100 gather(e E)] .
  op _; : Exp -> Stmt [prec 90 metadata "strict"] .
---  op _;_ : Stmt Exp -> Exp [prec 110] .
  op if_then_else_ : Exp Stmt Stmt -> Stmt [metadata "strict(1)"] .
  op while_do_ : Exp Stmt -> Stmt .
---  op __ : Stmt Exp -> Exp [prec 100 gather(e E)] .
  
--- Pointers
  op malloc(_) : Exp -> Exp [metadata "strict"] .
  op free(_); : Exp -> Stmt [metadata "strict"] .
  op &_ : Id -> Exp .
  op *_ : Exp -> Exp [metadata "strict"] .

--- Functions
  op lambda_._ : List{Id} Stmt -> Exp .
  op mu_._ : Id Exp -> Exp .
  op _() : Exp -> Exp .
  op _(_) : Exp List{Exp} -> Exp [prec 2 metadata "strict"] .
  op return_; : Exp -> Stmt [metadata "strict"] .
  op callcc : Exp -> Exp [metadata "strict"] .
  op aspect_ : Stmt -> Stmt .
  op read() : -> Exp .
  op print(_); : Exp -> Stmt [metadata "strict"] .

--- Threads
  op spawn_ : Stmt -> Stmt .
  op acquire_; : Exp -> Stmt [metadata "strict"] .
  op release_; : Exp -> Stmt [metadata "strict"] .
  op rv_; : Exp -> Stmt [metadata "strict"] .
  op halt-thread; : -> Stmt .

--- Agents
  op new-agent_ : Stmt -> Exp .
  op me : -> Exp .
  op parent : -> Exp .
  op receive : -> Exp .
  op receive-from_ : Exp -> Exp [metadata "strict"] .
  op send-asynch(_,_); : Exp Exp -> Stmt [metadata "strict"] .
  op send-synch(_,_); : Exp Exp -> Stmt [metadata "strict"] .
  op halt-agent; : -> Stmt .

--- Reflection
  op quote_ : Exp -> Exp .
  op unquote_ : Exp -> Exp .
  op eval_ : Exp -> Exp [metadata "strict"].

 
-----------------------------------------------------------------------------
--- Lists should be eventually builtin; for now, they need to be declared ---
-----------------------------------------------------------------------------
--- List{Id}
  sort List{Id} .  subsort Id < List{Id} .
  op `(`) : -> List{Id} .
  op _,_ : List{Id} List{Id} -> List{Id} [prec 70 assoc id: `(`)] .
--- List{Exp}
  sort List{Exp} .  subsort Exp List{Id} < List{Exp} .
  op _,_ : List{Exp} List{Exp} -> List{Exp} [ditto] .
-----------------------------------------------------------------------------
endm


mod CHALLENGE-DESUGARED-SYNTAX is including CHALLENGE-SYNTAX .
------------------------------------------------------------------------------------
--- This module desugars some of SIMPLE's language constructs into the core ones ---
--- The idea is that we only want to give semantics to the core constructs,      ---
--- so we get rid of the derived ones asap (before we start the semantics        ---
------------------------------------------------------------------------------------
  vars F X : Id .  vars Xl : List{Id} .  vars E E1 E2 : Exp .  vars S S' : Stmt .
  eq E() = E(`(`)) .
endm
