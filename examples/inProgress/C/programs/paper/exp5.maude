load /home/grosu/celliso2/k-framework/branches/2.0.1/examples/C/dist/c-total
mod C-PROGRAM is
including C-SYNTAX .
including MATCH-C-SYNTAX .
including COMMON-C-CONFIGURATION .
op tmpuuu2 : -> Id [ctor] .
op tmpuuu1 : -> Id [ctor] .
op tmpuuu0 : -> Id [ctor] .
op example : -> Id [ctor] .
op tmp : -> Id [ctor] .
op val : -> Id [ctor] .
op loc : -> Id [ctor] .
op set : -> Id [ctor] .
op x : -> Id [ctor] .
op f : -> Id [ctor] .
op r : -> Id [ctor] .
op format : -> Id [ctor] .
op printf : -> Id [ctor] .


------------END-OPERATORS------------
op program-expressions : -> Program .
eq program-expressions = (
((Global(Declaration((extern )(int),  Direct-Function-Declarator(printf,  Parameter-Type-List(Parameter-Declaration((char),  Pointer(format) ) ,., ...)) )
))((Global(Declaration((int),  r )  = InitItem((((0))))
))((Global((Declaration((int),  Direct-Function-Declarator(f,  Parameter-Type-List(Parameter-Declaration((int),  x ))) )
{ 

Block(((((((r) := (((x)));))))  (((return ((((r))));))))
)
})
))((Global((Declaration((int),  Direct-Function-Declarator(set,  Parameter-Type-List(Parameter-Declaration((int),  Pointer(loc) ) ,.,  Parameter-Declaration((int),  val ))) )
{ (Local(Declaration((int),  tmp )))

Block((((((((tmp) := (((val)));)  ((Deref((((loc))))) := (((tmp)));)))))  (((return ((((tmp))));))))
)
})
))((Global((Declaration((int),  Direct-Function-Declarator(main,  Parameter-Type-List(Parameter-Declaration((void)))) )
{ ((Local(Declaration((int),  x )))  ((Local(Declaration((int),  example )))  ((Local(Declaration((int),  tmp )))  ((Local(Declaration((int),  tmpuuu0 )))  ((Local(Declaration((int),  tmpuuu1 )))  (Local(Declaration((int),  tmpuuu2 ))))))))

Block((((((((x) := (((2)));)))))  ((((((((Apply(set, ((&(x)) .,.  (2 * x)))==(x ++))&&(Apply(set, ((&(x)) .,.  (x + 1)))== x);)  (Apply((((printf))), ((("result=%d, x=%d\n")) .,.  (((example))) .,.  (((x)))));)))))  (((return ((((0))));))))))
)
})
)))))))) .



endm

