mod FUN-SYNTAX is including PL-INT + PL-ID .
  sort Exp .
  subsort Id Int Bool < Exp .

  op _+_ : Exp Exp -> Exp [gather(E e) prec 33 metadata "strict"] .
  op _-_ : Exp Exp -> Exp [gather(E e) prec 33 metadata "strict"] .
  op _*_ : Exp Exp -> Exp [gather(E e) prec 31 metadata "strict"] .
  op _/_ : Exp Exp -> Exp [gather(E e) prec 31 metadata "strict"] .
  op _%_ : Exp Exp -> Exp [gather(E e) prec 31 metadata "strict"] .
  op -_ : Exp -> Exp  [metadata "strict"] .
  op _<_ : Exp Exp -> Exp [prec 37 metadata "strict"] .
  op _<=_ : Exp Exp -> Exp [prec 37 metadata "strict"] .
  op _>_ : Exp Exp -> Exp [prec 37 metadata "strict"] .
  op _>=_ : Exp Exp -> Exp [prec 37 metadata "strict"] .
  op _==_ : Exp Exp -> Exp [prec 37 metadata "strict"] .
  op _!=_ : Exp Exp -> Exp [prec 37 metadata "strict"] .
  op _and_ : Exp Exp -> Exp [gather(E e) prec 55 metadata "strict"] .
  op _or_ : Exp Exp -> Exp [gather(E e) prec 59 metadata "strict"] .
  op not_ : Exp -> Exp [prec 53 metadata "strict"] .

  op fun()->_ : Exp -> Exp .
  op fun_->_ : List{Id} Exp -> Exp .
  op fun_->_ : Exp Exp -> Exp .
  op __ : Exp List{Exp} -> Exp [prec 10 gather(E e) metadata "strict"] .
  op __ : List{Exp} List{Exp} -> Exp [ditto] .
  op _() : List{Exp} -> Exp [prec 10] .

  sort Binding .
  ops (let_in_) (letrec_in_) : Binding Exp -> Exp .
  op _=_ : List{Exp} List{Exp} -> Binding .
  op _and_ : Binding Binding -> Binding [prec 100 assoc] .

  op if_then_else_ : Exp Exp Exp -> Exp [metadata "strict(1)"] .

  op [] : -> Exp .
  op [_] : List{Exp} -> Exp [prec 0 metadata "strict hybrid"] .
  ops (car_) (cdr_) (null?_) : Exp -> Exp [prec 0 metadata "strict"] .
  op cons__ : Exp Exp -> Exp [metadata "strict"] .

  op ref_ : Exp -> Exp [metadata "strict"] .
  op &_ : Id -> Exp .
  op *_ : Exp -> Exp [metadata "strict"] .
  op _:=_ : Exp Exp -> Exp [metadata "strict"] .

  op _;_ : Exp Exp -> Exp [prec 110 gather(e E) metadata "seqstrict"] .

-----------------------------------------------------------------------------
--- Lists should be eventually builtin; for now, they need to be declared ---
-----------------------------------------------------------------------------
--- List{Id}
  sort List{Id} .  subsort Id < List{Id} .
  op .List{Id} : -> List{Id} .
  op _,_ : List{Id} List{Id} -> List{Id} [prec 70 assoc id: .List{Id}] .
--- List{Exp}
  sort List{Exp} .  subsort Exp List{Id} < List{Exp} .
  op _,_ : List{Exp} List{Exp} -> List{Exp} [ditto] .
-----------------------------------------------------------------------------
endm


mod FUN-DESUGARED-SYNTAX is including FUN-SYNTAX .
  vars E E' : Exp .  var Xl Xl' : List{Id} .  var El El' : List{Exp} .
  eq fun () -> E = fun (.List{Id}) -> E .
  eq fun E Xl -> E' = fun E -> fun Xl -> E' .
  eq fun E () -> E' = fun E -> fun () -> E' .
  eq E() = E(.List{Id}) .
  eq (E () = E') = (E = fun () -> E') .
  eq (E Xl = E') = (E = fun Xl -> E') .
  eq (Xl = El) and (Xl' = El') = ((Xl,Xl') = (El,El')) .
  eq [] = [.List{Id}] .
endm
