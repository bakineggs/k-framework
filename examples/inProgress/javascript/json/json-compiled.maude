load ../../../../tools/../k-prelude

mod JSON is including K-TECHNIQUE .
including K-CONFIG .
including K-POLYMORPHIC-VARIABLES .
including K-CONTEXTS .
including K-WHERE .
including K-DESTRUCTORS .
including PL-STRING .
including PL-INT .
including PL-ID .
including PL-FLOAT .
including K-TECHNIQUE .
including K-TECHNIQUE .
including K-TECHNIQUE .
including PL-BOOL .
including K-TECHNIQUE .
including PL-BOOL .
including K-TECHNIQUE .
including PL-IF-THEN-ELSE .
including K-TECHNIQUE .
including PL-IF-THEN-ELSE .
including K-TECHNIQUE .
including PL-STRING .
sorts Builtin JSObject JSProperties JsonArray JsonElem JsonName JsonObject JsonPair JsonValue List{JsonElem}. subsort Bool < JsonElem .
subsort Bool < JsonValue .
subsort Bool < K .
subsort Bool < KResult .
subsort Bool < List{JsonElem}.
subsort Builtin < K .
subsort Char < Builtin .
subsort Char < Builtins .
subsort Char < JsonElem .
subsort Char < JsonName .
subsort Char < JsonValue .
subsort Char < K .
subsort Char < KResult .
subsort Char < List{JsonElem}.
subsort FiniteFloat < Builtins .
subsort FiniteFloat < JsonElem .
subsort FiniteFloat < JsonValue .
subsort FiniteFloat < K .
subsort FiniteFloat < KResult .
subsort FiniteFloat < List{JsonElem}.
subsort Float < JsonElem .
subsort Float < JsonValue .
subsort Float < K .
subsort Float < KResult .
subsort Float < List{JsonElem}.
subsort Id < JsonElem .
subsort Id < JsonName .
subsort Id < JsonValue .
subsort Id < K .
subsort Id < List{JsonElem}.
subsort Int < JsonElem .
subsort Int < JsonValue .
subsort Int < K .
subsort Int < KResult .
subsort Int < List{JsonElem}.
subsort JSObject < K .
subsort JSProperties < K .
subsort JsonArray < JsonElem .
subsort JsonArray < JsonValue .
subsort JsonArray < K .
subsort JsonArray < List{JsonElem}.
subsort JsonElem < K .
subsort JsonElem < List{JsonElem}.
subsort JsonName < JsonElem .
subsort JsonName < JsonValue .
subsort JsonName < K .
subsort JsonName < List{JsonElem}.
subsort JsonObject < JsonElem .
subsort JsonObject < JsonValue .
subsort JsonObject < K .
subsort JsonObject < List{JsonElem}.
subsort JsonPair < JsonElem .
subsort JsonPair < K .
subsort JsonPair < List{JsonElem}.
subsort JsonValue < JsonElem .
subsort JsonValue < K .
subsort JsonValue < List{JsonElem}.
subsort List{JsonElem}< K .
subsort Nat < JsonElem .
subsort Nat < JsonValue .
subsort Nat < K .
subsort Nat < KResult .
subsort Nat < List{JsonElem}.
subsort NzInt < Builtins .
subsort NzInt < JsonElem .
subsort NzInt < JsonValue .
subsort NzInt < K .
subsort NzInt < KResult .
subsort NzInt < List{JsonElem}.
subsort NzNat < Builtins .
subsort NzNat < Int .
subsort NzNat < JsonElem .
subsort NzNat < JsonValue .
subsort NzNat < K .
subsort NzNat < KResult .
subsort NzNat < List{JsonElem}.
subsort String < Builtin .
subsort String < JsonElem .
subsort String < JsonName .
subsort String < JsonValue .
subsort String < K .
subsort String < KResult .
subsort String < List{JsonElem}.
subsort Zero < Builtins .
subsort Zero < Int .
subsort Zero < JsonElem .
subsort Zero < JsonValue .
subsort Zero < K .
subsort Zero < KResult .
subsort Zero < List{JsonElem}.
op @latex : String -> BagItem .
op Bag_ : List{K}-> Bag .
op List_ : List{K}-> List .
op _in_ : BagItem Bag -> Bool .
op _in_ : K Bag -> Bool .
op _in_ : K Set -> Bool .
op _in_ : SetItem Set -> Bool .
op _|->_ : List{K}List{K}-> Map .
op inKList : K K -> Bool .
op keys_ : Map -> Set .
op lengthList_ : List -> Nat .
op substKLabel : K KLabel KLabel -> K .
op substList`{K`}Label`(_`,_`,_`) : List{K}KLabel KLabel -> List{K}.
op $hasMapping : Map K -> Bool[metadata "latex(renameTo \$hasMapping\mybracket{_,_})"].
op .JSProperties : -> JSProperties[metadata "location(json.k:24)"].
op .List`{JsonElem`} : -> List{JsonElem}[metadata "location(json.k:18)"].
op Set_ : List{K}-> Set[metadata "latex(renameTo {\it{}Set}\mybracket{_})"].
op _-Bag_ : Bag Bag -> Bag[metadata "latex(renameTo _-\subscript{{\scriptstyle\it{}Bag}}_)"].
op _-Set_ : Set Set -> Set[metadata "latex(renameTo _-\subscript{{\scriptstyle\it{}Set}}_)"].
op _:_ : JsonName JsonValue -> JsonPair[metadata "location(json.k:14)"].
op __ : JSProperties JSProperties -> JSProperties[assoc comm id: .JSProperties prec 50 metadata "location(json.k:25)"].
op _`(_`) : Map K -> K[prec 0].
op _`(_`) : Map List{K}-> List{K}[prec 0].
op _`,_ : List{JsonElem}List{JsonElem}-> List{JsonElem}[assoc id: .List`{JsonElem`} prec 50 metadata "location(json.k:19)"].
op _`[_/_`] : Map K K -> Map[prec 0].
op _`[_/_`] : Map List{K}List{K}-> Map[prec 0].
op _`[_`] : Map Map -> Map[prec 0].
op _`[undef/_`] : Map List{K}-> Map[metadata "latex(renameTo _[\ensuremath{\bot\;}/_])"].
op `[_`] : List{JsonElem}-> JsonArray[metadata "location(json.k:21)"].
op `{_`} : List{JsonElem}-> JsonObject[metadata "location(json.k:12)"].
op `{`} : -> JsonObject[metadata "location(json.k:12)"].
op buildJsObj`(_`,_`) : List{JsonElem}JSObject -> JSObject[metadata "location(json.k:30)"].
op headList`{K`}_ : NeList{K}-> K[metadata "latex(renameTo head\subscript{{\scriptstyle\it{}List{K}}}mybracket{_})"].
op internalize`(_`) : JsonObject -> JSObject[metadata "location(json.k:28)"].
op js0 : -> JSObject[metadata "location(json.k:58)"].
op js1 : -> JSObject[metadata "location(json.k:58)"].
op js2 : -> JSObject[metadata "location(json.k:58)"].
op js3 : -> JSObject[metadata "location(json.k:58)"].
op js4 : -> JSObject[metadata "location(json.k:58)"].
op jsObj`(_`) : JSProperties -> JSObject[metadata "location(json.k:28)"].
op jsProp`(_`,_`) : JsonName JsonValue -> JSProperties[metadata "location(json.k:24)"].
op lengthList`{K`}_ : List{K}-> Nat[metadata "latex(renameTo length\subscript{{\scriptstyle\it{}List{K}}}mybracket{_})"].
op null : -> JsonValue[metadata "location(json.k:10)"].
op tailList`{K`}_ : NeList{K}-> List{K}[metadata "latex(renameTo tail\subscript{{\scriptstyle\it{}List{K}}}mybracket{_})"].
op v0 : -> JsonValue[metadata "location(json.k:46)"].
op v1 : -> JsonValue[metadata "location(json.k:46)"].
op v2 : -> JsonValue[metadata "location(json.k:46)"].
op v3 : -> JsonValue[metadata "location(json.k:46)"].
op v4 : -> JsonValue[metadata "location(json.k:46)"].
op v5 : -> JsonValue[metadata "location(json.k:46)"].
op v6 : -> JsonValue[metadata "location(json.k:46)"].
op v7 : -> JsonValue[metadata "location(json.k:46)"].
eq $hasMapping(__(M:Map,_|->_(D:K,R:K)),D:K)= true .
eq Bag_(.List`{K`})=(.).Bag .
eq Bag_(_`,`,_(K:K,Ks:List{K}))= __(BagItem(K:K),Bag_(Ks:List{K})).
eq List_(.List`{K`})=(.).List .
eq List_(_`,`,_(K:K,Ks:List{K}))= __(ListItem(K:K),List_(Ks:List{K})).
eq Set_(.List`{K`})=(.).Set .
eq Set_(_`,`,_(K:K,Ks:List{K}))= __(SetItem(K:K),Set_(Ks:List{K})).
eq _-Bag_(.,Bag:Bag)=(.).Bag .
eq _-Bag_(__(Bag:Bag,BagItem:BagItem),Bag':Bag)= if_then_else_fi(_in_(BagItem:BagItem,Bag':Bag),_-Bag_(Bag:Bag,Bag':Bag),__(BagItem:BagItem,_-Bag_(Bag:Bag,Bag':Bag))).
eq _-Set_(.,Set:Set)=(.).Set .
eq _-Set_(__(Set:Set,SetItem:SetItem),Set':Set)= if_then_else_fi(_in_(SetItem:SetItem,Set':Set),_-Set_(Set:Set,Set':Set),__(SetItem:SetItem,_-Set_(Set:Set,Set':Set))).
eq _`(_`)(Map:Map,.List`{K`})= .List`{K`} .
eq _`(_`)(Map:Map,_`,`,_(K1:K,NList1:NeList{K}))= _`,`,_(_`(_`)(Map:Map,K1:K),_`(_`)(Map:Map,NList1:NeList{K})).
eq _`(_`)(__(Map:Map,_|->_(K1:K,K2:K)),K1:K)= K2:K .
eq _`[_/_`](Map:Map,K2:K,_`,`,_(K1:K,NList1:NeList{K}))= _`[_/_`](_`[_/_`](Map:Map,K2:K,K1:K),K2:K,NList1:NeList{K}).
eq _`[_/_`](Map:Map,List:List{K},.List`{K`})= Map:Map .
eq _`[_/_`](Map:Map,_`,`,_(K1:K,NList1:NeList{K}),_`,`,_(K2:K,NList2:NeList{K}))= _`[_/_`](_`[_/_`](Map:Map,K1:K,K2:K),NList1:NeList{K},NList2:NeList{K}).
eq _`[_/_`](__(Map:Map,_|->_(K1:K,K2:K)),K2':K,K1:K)= __(Map:Map,_|->_(K1:K,K2':K)).
eq _`[_`](__(Map:Map,_|->_(K1:K,K2:K)),__(Map':Map,_|->_(K1:K,K2':K)))= __(_|->_(K1:K,K2':K),_`[_`](Map:Map,Map':Map)).
eq _`[undef/_`](Map:Map,.List`{K`})= Map:Map .
eq _`[undef/_`](Map:Map,_`,`,_(K1:K,NList1:NeList{K}))= _`[undef/_`](_`[undef/_`](Map:Map,K1:K),NList1:NeList{K}).
eq _`[undef/_`](__(Map:Map,_|->_(K1:K,K2:K)),K1:K)= Map:Map .
eq _in_(BagItem:BagItem,__(Bag:Bag,BagItem:BagItem))= true .
eq _in_(K:K,__(Bag:Bag,BagItem(K:K)))= true .
eq _in_(K:K,__(Set:Set,SetItem(K:K)))= true .
eq _in_(SetItem:SetItem,__(Set:Set,SetItem:SetItem))= true .
eq _|->_(.List`{K`},List:List{K})=(.).Map .
eq _|->_(_`,`,_(K1:K,NList1:NeList{K}),K2:K)= __(_|->_(K1:K,K2:K),_|->_(NList1:NeList{K},K2:K)).
eq _|->_(_`,`,_(K1:K,NList1:NeList{K}),_`,`,_(K2:K,NList2:NeList{K}))= __(_|->_(K1:K,K2:K),_|->_(NList1:NeList{K},NList2:NeList{K})).
eq headList`{K`}_(_`,`,_(K:K,Ks:List{K}))= K:K .
eq inKList(K:K,_~>_(K1:K,_~>_(K:K,K2:K)))= true .
eq keys_(.)=(.).Set .
eq keys_(__(Map:Map,_|->_(K1:K,K2:K)))= __(SetItem(K1:K),keys_(Map:Map)).
eq lengthList_(.)= 0 .
eq lengthList_(__(LItem:ListItem,List:List))= sNat_(lengthList_(List:List)).
eq lengthList`{K`}_(.List`{K`})= 0 .
eq lengthList`{K`}_(_`,`,_(K:K,Ks:List{K}))= sNat_(lengthList`{K`}_(Ks:List{K})).
eq substKLabel(.,Label1:KLabel,Label2:KLabel)=(.).K .
eq substKLabel(_`(_`)(Label1:KLabel,Ks:List{K}),Label1:KLabel,Label2:KLabel)= _`(_`)(Label2:KLabel,substList`{K`}Label`(_`,_`,_`)(Ks:List{K},Label1:KLabel,Label2:KLabel)).
eq substKLabel(_~>_(K1:NeK,_~>_(K2:NeK,K:K)),Label1:KLabel,Label2:KLabel)= _~>_(substKLabel(K1:NeK,Label1:KLabel,Label2:KLabel),_~>_(substKLabel(K2:NeK,Label1:KLabel,Label2:KLabel),substKLabel(K:K,Label1:KLabel,Label2:KLabel))).
eq substList`{K`}Label`(_`,_`,_`)(.List`{K`},Label1:KLabel,Label2:KLabel)= .List`{K`} .
eq substList`{K`}Label`(_`,_`,_`)(_`,`,_(K:K,Ks:List{K}),Label1:KLabel,Label2:KLabel)= _`,`,_(substKLabel(K:K,Label1:KLabel,Label2:KLabel),substList`{K`}Label`(_`,_`,_`)(Ks:List{K},Label1:KLabel,Label2:KLabel)).
eq tailList`{K`}_(_`,`,_(K:K,Ks:List{K}))= Ks:List{K}.
ceq substKLabel(_`(_`)(Label:KLabel,Ks:List{K}),Label1:KLabel,Label2:KLabel)= _`(_`)(Label:KLabel,substList`{K`}Label`(_`,_`,_`)(Ks:List{K},Label1:KLabel,Label2:KLabel))if _=/=Bool_(Label1:KLabel,Label:KLabel)= true .
eq js0 = internalize`(_`)(v0)[metadata "location(json.k:60)"].
eq js1 = internalize`(_`)(v1)[metadata "location(json.k:62)"].
eq js2 = internalize`(_`)(v2)[metadata "location(json.k:64)"].
eq js3 = internalize`(_`)(v3)[metadata "location(json.k:66)"].
eq js4 = internalize`(_`)(v4)[metadata "location(json.k:68)"].
eq v0 = `{`}[metadata "location(json.k:48)"].
eq v1 = `{_`}(_:_("s",234))[metadata "location(json.k:50)"].
eq v2 = `{_`}(_`,_(_:_("s",234),_:_("t","d")))[metadata "location(json.k:52)"].
eq v3 = `[_`](_`,_(23,_`,_(45,56)))[metadata "location(json.k:54)"].
eq v4 = `[_`](_`,_(`{`},`{_`}(_`,_(_:_("a","x"),_`,_(_:_("b",234),_`,_(_:_("c",true),_`,_(_:_("d",false),_`,_(_:_("e",`[_`](_`,_(1,_`,_(2,3)))),_:_("f",`{_`}(_:_("r",3)))))))))))[metadata "location(json.k:56)"].
eq $hasMapping(M:Map,D:K)= false[owise].
eq _`[_/_`](Map:Map,K2:K,K1:K)= __(Map:Map,_|->_(K1:K,K2:K))[owise].
eq _`[_`](Map:Map,Map':Map)= __(Map:Map,Map':Map)[owise].
eq _in_(BagItem:BagItem,Bag:Bag)= false[owise].
eq _in_(K:K,Bag:Bag)= false[owise].
eq _in_(K:K,Set:Set)= false[owise].
eq _in_(SetItem:SetItem,Set:Set)= false[owise].
eq buildJsObj`(_`,_`)(.List`{JsonElem`},Obj:JSObject)= Obj:JSObject[metadata "location(json.k:34)"].
eq buildJsObj`(_`,_`)(_`,_(_:_(Name:JsonName,Value:JsonValue),Elements:List{JsonElem}),jsObj`(_`)(Properties:JSProperties))= buildJsObj`(_`,_`)(Elements:List{JsonElem},jsObj`(_`)(__(Properties:JSProperties,jsProp`(_`,_`)(Name:JsonName,Value:JsonValue))))[metadata "location(json.k:35)"].
eq inKList(K:K,K':K)= false[owise].
eq internalize`(_`)(`{_`}(Elements:List{JsonElem}))= buildJsObj`(_`,_`)(Elements:List{JsonElem},jsObj`(_`)(.JSProperties))[metadata "location(json.k:32)"].
endm
