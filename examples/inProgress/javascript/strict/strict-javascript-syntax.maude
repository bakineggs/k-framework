mod STRICT-JAVASCRIPT-SYNTAX 
	is including PL-INT + PL-FLOAT + PL-STRING + PL-ID .
	
	  sort Name .    subsort Id <  Name . 
	
	  sort Label .    subsort Id <  Label . 
	
	  sort Exp .    subsort Literal <  Exp .
			    
			   subsort TargetExp <  Exp .    subsort InvocationExp <  Exp . 
			   subsort NewExp <  Exp .    subsort DeleteExp <  Exp . 
			   subsort UnaryExp <  Exp .    subsort BinaryExp <  Exp .    subsort TernaryExp <  Exp .  
	
	  sort Literal .    subsort Bool <  Literal .    subsort Int <  Literal .    subsort String <  Literal .    subsort Float <  Literal . 
			   subsort ObjectLiteral <  Literal .    subsort ArrayLiteral <  Literal .    
	
	
	  sort TargetExp .    subsort Name <  TargetExp .    subsort RefinementExp <  TargetExp . 
	
	  sort RefinementExp .    
			   op _._ : Exp  Name -> RefinementExp   [prec 13 metadata "strict"] .
			   op _[_] : Exp  Exp -> RefinementExp  [prec 13 metadata "strict"] . 
	
	  sort InvocationExp .   
			   op _() : Exp -> InvocationExp [prec 13 metadata "strict"] .
			   op _(_) : Exp  List{CommaElem} -> InvocationExp [prec 13 metadata "strict"] .   
	
	  sort Argument .    subsort Exp <  Argument . 
	 
	    
	
	  sort NewExp .    op new_ :  InvocationExp -> NewExp [prec 17 metadata "strict"] . 

	  sort DeleteExp .    op delete_ :  TargetExp -> DeleteExp [prec 19 metadata "strict"] . 
	
	
	  sort UnaryExp .  
			   op typeof_ :  Exp -> UnaryExp [prec 19 metadata "strict"] .
			   op !_ :  Exp -> UnaryExp     [prec 19 metadata "strict"] .
			   op +_ :  Exp -> UnaryExp      [prec 19 metadata "strict"] .
			   op -_ :  Exp -> UnaryExp      [prec 19 metadata "strict"] . 

	  sort BinaryExp .   
			   op _*_ : Exp  Exp -> BinaryExp  [prec 21 gather (E e) format(d b o d) metadata "strict"] .
			   op _/_ : Exp  Exp -> BinaryExp  [prec 21 gather (E e) format(d b o d) metadata "strict"] .
			   op _%_ : Exp  Exp -> BinaryExp  [prec 21 gather (E e) format(d b o d) metadata "strict"] .

			   op _+_ : Exp  Exp -> BinaryExp  [prec 23 gather (E e) format(d b o d) metadata "strict"] .
			   op _-_ : Exp  Exp -> BinaryExp  [prec 23 gather (E e) format(d b o d) metadata "strict"] .

			   op _<_ : Exp  Exp -> BinaryExp [prec 25 format(d b o d) metadata "strict"] .  
			   op _<=_ : Exp  Exp -> BinaryExp [prec 25 format(d b o d) metadata "strict"] .  
			   op _>_ : Exp  Exp -> BinaryExp [prec 25 format(d b o d) metadata "strict"] .  
			   op _>=_ : Exp  Exp -> BinaryExp [prec 25 format(d b o d) metadata "strict"] .  
			   op _in_ : Exp  Exp -> BinaryExp [prec 25 format(d b o d) metadata "strict"] .
			   op _instanceof_ : Exp  Exp -> BinaryExp [prec 25 format(d b o d) metadata "strict"] .

			   op _==_ : Exp  Exp -> BinaryExp [prec 27 format(d b o d) metadata "strict"] .
			   op _!=_ : Exp  Exp -> BinaryExp [prec 27 format(d b o d) metadata "strict"] .
			   op _===_ : Exp  Exp -> BinaryExp [prec 27 format(d b o d) metadata "strict"] .
			   op _!==_ : Exp  Exp -> BinaryExp [prec 27 format(d b o d) metadata "strict"] .

			   op _&&_ : Exp  Exp -> BinaryExp [prec 29 format(d b o d) metadata "strict"] .

			   op _||_ : Exp  Exp -> BinaryExp [prec 31 format(d b o d) metadata "strict"] . 

	  sort TernaryExp .   
			   op _?_:_ : Exp  Exp  Exp -> TernaryExp [prec 33 gather(e & E) format (d b o b o d) metadata "strict(1)"] . 



	  sort RValue .    subsort Exp <  RValue .    subsort AssignmentClause <  RValue . 

	  sort SimpleAssignmentClause .    op _=_ : Name  Exp -> SimpleAssignmentClause [prec 40 gather(e E) metadata "strict(2)"] .    

	  sort AssignmentClause .    subsort SimpleAssignmentClause <  AssignmentClause .
			   op _=_ : TargetExp  RValue -> AssignmentClause [prec 40 gather(e E) metadata "strict"] .
			   op _+=_ : TargetExp  RValue -> AssignmentClause [prec 40 gather(e E) metadata "strict"] .
			   op _-=_ : TargetExp  RValue -> AssignmentClause [prec 40 gather(e E) metadata "strict"] .
			   op _*=_ : TargetExp  RValue -> AssignmentClause [prec 40 gather(e E) metadata "strict"] .
			   op _/=_ : TargetExp  RValue -> AssignmentClause [prec 40 gather(e E) metadata "strict"] . 


	
	  sort ActionClause .    subsort InvocationExp <  ActionClause .    subsort DeleteExp <  ActionClause .    subsort AssignmentClause <  ActionClause . 


	  sort Clause .    subsort ActionClause <  Clause .    subsort DisruptiveClause <  Clause . 
		
	  sort DisruptiveClause .    subsort ReturnClause <  DisruptiveClause .    subsort BreakClause <  DisruptiveClause .    subsort ThrowClause <  DisruptiveClause .  
	
	  sort ReturnClause .    op return :  -> ReturnClause . 
			   op return_ :  Exp -> ReturnClause [prec 50 metadata "strict"] . 
	
	  sort BreakClause .    op break :  -> BreakClause . 
			   op break_ :  Label -> BreakClause [prec 50 metadata "strict"] . 
	
	  sort ThrowClause .    op throw_ :  Exp -> ThrowClause [prec 50 metadata "strict"] . 


	  sort EmptyStmt .     op ; :  -> EmptyStmt . 

	  sort ExecutionStmts .    
			   op _; : Fragment -> ExecutionStmts [prec 90] .
			   op _; : List{Fragment} -> ExecutionStmts [prec 90] . 
	
	  sort IfStmt .   
			   op if(_){_} :  Exp  Stmt -> IfStmt [prec 100 metadata "strict(1)"] .
			   op if(_){_}else{_} :  Exp  Stmt  Stmt -> IfStmt [prec 100 metadata "strict(1)"] .
			   op if(_){_}else_ :  Exp  Stmt  IfStmt -> IfStmt [prec 100 metadata "strict(1)"] . 
	
	  sort TryStmt .    op try{_}catch(_){_} :  Stmt  Name  Stmt -> TryStmt [prec 100] . 

	  sort Stmt .    subsort EmptyStmt <  Stmt .    subsort ExecutionStmts <  Stmt .    subsort IfStmt <  Stmt .    subsort TryStmt <  Stmt .    subsort SwitchStmt <  Stmt . 
	
	
	  sort CommaElem .    subsort Exp <  CommaElem .    subsort Property <  CommaElem .    op _| : Argument -> CommaElem .       

	  sort List{CommaElem} .    subsort CommaElem <  List{CommaElem} .    op .List{CommaElem} :  -> List{CommaElem} . 
			   op _,_ : List{CommaElem}  List{CommaElem} -> List{CommaElem} [prec 82 assoc id: .List{CommaElem}] . 


	  sort ArrayLiteral .    op [_] :  List{CommaElem} -> ArrayLiteral . 
	
	  sort ObjectLiteral .    op {_} :  List{CommaElem} -> ObjectLiteral .     

	    

	  sort PropertyName .    subsort String <  PropertyName .    subsort Name <  PropertyName .  

	  sort Property .    op _:_ : PropertyName  Exp -> Property [prec 80 metadata "strict"] . 

	



	  sort CaseMatch .    subsort Exp <  CaseMatch . 
			   op _:`case_ : CaseMatch  CaseMatch -> CaseMatch [prec 75 gather(e E) metadata "strict"] . 
	
	  sort Case .    op case_:_ :  CaseMatch  List{Fragment} -> Case [prec 70 gather(& e) metadata "strict(1)"] . 

	  sort SwitchStmt .   
			   op switch(_){_} :  Exp  List{Fragment} -> SwitchStmt [prec 100 metadata "strict(1)"] . 
			            
	
	        


	  sort Fragment .    subsort Clause <  Fragment .    subsort Case <  Fragment . 
	
	  sort List{Fragment} .    subsort Fragment <  List{Fragment} .    op .List{Fragment} :  -> List{Fragment} .   
			   op _;_ : List{Fragment}  List{Fragment} -> List{Fragment} [prec 82 assoc id: .List{Fragment}] . 


			    
			 		            
			 		             
			 		        
			 		          

			    
			 		             
			 		         

			    
			 		             
			 		               
			 
			         
			 


	     
	 		        
	 		        

	       
	 		        



	
	    
	      
	        
	 
	     

	     
	 
	    
	 		    

	       
	 	    


	       
	 
	    
	 		   
	 
	      

	
	     
	 
	      
	 
	    
	 		  
	 
	    
	 		  
	 		  
	 
	           


	      
	 
	    
	 		      
	 		      
	 
	      
	 
	          

endm
