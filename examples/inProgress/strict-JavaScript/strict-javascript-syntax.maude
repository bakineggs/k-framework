mod STRICT-JAVASCRIPT-SYNTAX is including PL-INT + PL-STRING + PL-ID .
	  sort Name .    subsort Id <  Name . 
	
	  sort Label .    subsort Id <  Label . 
		
	  sort Exp .    subsort Literal <  Exp .
			    
			   subsort TargetExp <  Exp .    subsort InvocationExp <  Exp . 
			   subsort NewExp <  Exp .    subsort DeleteExp <  Exp .
			   subsort UnaryExp <  Exp .    subsort BinaryExp <  Exp .    subsort TernaryExp <  Exp . 
	
	  sort Literal .    subsort Bool <  Literal .    subsort Int <  Literal . 
			   
			   subsort String <  Literal .    subsort ObjectLiteral <  Literal .    subsort ArrayLiteral <  Literal .  
			  


	  sort ListElement .    subsort Property <  ListElement .    subsort Exp <  ListElement .    subsort Argument <  ListElement .    subsort ActionClause <  ListElement .    subsort VarDeclaration <  ListElement .    subsort Parameter <  ListElement . 

	  sort List{ListElement} .    subsort NeList{ListElement} <  List{ListElement} . 

	  sort NeList{ListElement} .    subsort ListElement <  NeList{ListElement} . 
			   op _,_ : NeList{ListElement}  List{ListElement} -> NeList{ListElement} [prec 70 assoc id: .List{ListElement}] .
			   op _,_ : List{ListElement}  NeList{ListElement} -> NeList{ListElement} [prec 70 assoc id: .List{ListElement}] . 

	      op .List{ListElement} :  -> List{ListElement} .
			   op _,_ : List{ListElement}  List{ListElement} -> List{ListElement} [prec 70 assoc id: .List{ListElement}] . 



	  sort ObjectLiteral .    op {_} :  Properties -> ObjectLiteral . 

	  sort Properties .    subsort List{ListElement} <  Properties . 
	
	  sort PropertyName .    subsort String <  PropertyName .    subsort Name <  PropertyName .  

	  sort Property .    op _:_ : PropertyName  Exp -> Property . 

	  sort ArrayLiteral .    op [_] :  List{ListElement} -> ArrayLiteral . 

	  sort TargetExp .    subsort Name <  TargetExp .    subsort RefinementExp <  TargetExp . 

	  sort RefinementExp .    
			   op _._ : Exp  Name -> RefinementExp   [prec 23 gather(E e) metadata "strict"] .
			   op _[_] : Exp  Exp -> RefinementExp  [prec 23 gather(E &) metadata "strict"] . 

	  sort InvocationExp .    op _(_) : Exp  Arguments -> InvocationExp [prec 23 gather(E &) metadata "strict"] . 
			
	  sort Argument .    subsort Exp <  Argument . 
	
	  sort Arguments .    subsort List{ListElement} <  Arguments . 
	
	  sort NewExp .    op new_ :  InvocationExp -> NewExp [prec 27 metadata "strict"] . 

	  sort DeleteExp .    op delete_ :  TargetExp -> DeleteExp [prec 29 metadata "strict"] . 


	  sort UnaryExp .  
			   op typeof_ :  Exp -> UnaryExp [prec 29 metadata "strict"] .
			   op !_ :  Exp -> UnaryExp     [prec 29 metadata "strict"] .
			   op +_ :  Exp -> UnaryExp      [prec 29 metadata "strict"] .
			   op -_ :  Exp -> UnaryExp      [prec 29 metadata "strict"] . 

	  sort BinaryExp .   
			   op _*_ : Exp  Exp -> BinaryExp  [prec 31 gather (E e) format(d b o d) metadata "strict"] .
			   op _/_ : Exp  Exp -> BinaryExp  [prec 31 gather (E e) format(d b o d) metadata "strict"] .
			   op _%_ : Exp  Exp -> BinaryExp  [prec 31 gather (E e) format(d b o d) metadata "strict"] .

			   op _+_ : Exp  Exp -> BinaryExp  [prec 33 gather (E e) format(d b o d) metadata "strict"] .
			   op _-_ : Exp  Exp -> BinaryExp  [prec 33 gather (E e) format(d b o d) metadata "strict"] .

			   op _<_ : Exp  Exp -> BinaryExp  [prec 37 format(d b o d) metadata "strict"] .  
			   op _<=_ : Exp  Exp -> BinaryExp [prec 37 format(d b o d) metadata "strict"] .  
			   op _>_ : Exp  Exp -> BinaryExp  [prec 37 format(d b o d) metadata "strict"] .  
			   op _>=_ : Exp  Exp -> BinaryExp [prec 37 format(d b o d) metadata "strict"] .  
			   op _in_ : Exp  Exp -> BinaryExp [prec 37 format(d b o d) metadata "strict"] .
			   op _instanceof_ : Exp  Exp -> BinaryExp [prec 37 format(d b o d) metadata "strict"] .

			   op _==_ : Exp  Exp -> BinaryExp  [prec 41 format(d b o d) metadata "strict"] .
			   op _!=_ : Exp  Exp -> BinaryExp  [prec 41 format(d b o d) metadata "strict"] .
			   op _===_ : Exp  Exp -> BinaryExp [prec 41 format(d b o d) metadata "strict"] .
			   op _!==_ : Exp  Exp -> BinaryExp [prec 41 format(d b o d) metadata "strict"] .

			   op _&&_ : Exp  Exp -> BinaryExp [prec 45 format(d b o d) metadata "strict"] .

			   op _||_ : Exp  Exp -> BinaryExp [prec 47 format(d b o d) metadata "strict"] . 

	  sort TernaryExp .   
			   op _?_:_[prec`55`gather(e`&`E)format(d`b`o`b`o`d) metadata "strict(1)"]. : Exp  Exp  Exp -> TernaryExp . 


	  sort ActionClause .    subsort InvocationExp <  ActionClause .    subsort DeleteExp <  ActionClause .    subsort AssignmentClause <  ActionClause . 



	  sort RValue .    subsort Exp <  RValue .    subsort AssignmentClause <  RValue . 

	  sort SimpleAssignmentClause .    op _=_ : Name  Exp -> SimpleAssignmentClause [prec 66 gather(e E) metadata "strict(2)"] .    
	
	  sort AssignmentClause .    subsort SimpleAssignmentClause <  AssignmentClause .
			   op _=_ : TargetExp  RValue -> AssignmentClause [prec 66 gather(e E) metadata "strict"] .
			   op _+=_ : TargetExp  RValue -> AssignmentClause [prec 66 gather(e E) metadata "strict"] .
			   op _-=_ : TargetExp  RValue -> AssignmentClause [prec 66 gather(e E) metadata "strict"] .
			   op _*=_ : TargetExp  RValue -> AssignmentClause [prec 66 gather(e E) metadata "strict"] .
			   op _/=_ : TargetExp  RValue -> AssignmentClause [prec 66 gather(e E) metadata "strict"] . 

		
			
	  sort ExecutionStmt .    subsort EmptyStmt <  ExecutionStmt .    subsort ActionStmt <  ExecutionStmt .    subsort DisruptiveStmt <  ExecutionStmt . 
			   subsort SwitchStmt <  ExecutionStmt .    subsort IfStmt <  ExecutionStmt .    subsort TryStmt <  ExecutionStmt .    subsort IterationStmt <  ExecutionStmt .    subsort LabeledStmt <  ExecutionStmt .  

	  sort List{ExecutionStmt} .    subsort ExecutionStmt <  List{ExecutionStmt} .    op .List{ExecutionStmt} :  -> List{ExecutionStmt} . 
			   op __ : List{ExecutionStmt}  List{ExecutionStmt} -> List{ExecutionStmt} [prec 111 gather(e E) id: .List{ExecutionStmt}] . 

	
	  sort EmptyStmt .     op ; :  -> EmptyStmt . 
			
	  sort ActionStmt .    op _; : ActionClause -> ActionStmt [prec 99 gather(e) metadata "strict"] .     

	  sort DisruptiveStmt .    subsort ReturnStmt <  DisruptiveStmt .    subsort BreakStmt <  DisruptiveStmt .    subsort ThrowStmt <  DisruptiveStmt .  

	  sort ReturnStmt .    op return`; :  -> ReturnStmt .
			   op return_; :  Exp -> ReturnStmt . 

	  sort BreakStmt .    op break`; :  -> BreakStmt .
			   op break_; :  Label -> BreakStmt . 

	  sort ThrowStmt .    op throw_; :  Exp -> ThrowStmt . 



	  sort CaseMatch .    op case_: :  Exp -> CaseMatch . 

	  sort List{CaseMatch} .    subsort CaseMatch <  List{CaseMatch} .
			   op __ : List{CaseMatch}  List{CaseMatch} -> List{CaseMatch} . 

	  sort Case .    op __ : List{CaseMatch}  List{ExecutionStmt} -> Case . 

	  sort ExitingCase .    op __ : Case  DisruptiveStmt -> ExitingCase . 

	  sort DefaultCase .    op default`:_ :  List{ExecutionStmt} -> DefaultCase . 

	  sort List{ExitingCase} .    subsort ExitingCase <  List{ExitingCase} .
			   op __ : List{ExitingCase}  List{ExitingCase} -> List{ExitingCase} . 

	  sort List{Case} .    subsort Case <  List{Case} .
			   op __ : List{ExitingCase}  Case -> List{Case} .
			   op __ : List{ExitingCase}  DefaultCase -> List{Case} . 

	  sort SwitchStmt .    op switch(_){_} :  Exp  List{Case} -> SwitchStmt .  


	  sort Block .    op {_} :  List{ExecutionStmt} -> Block . 
	
	  sort IfStmt .   
			   op if(_)_ :  Exp  Block -> IfStmt .
			   op if(_)else_ :  Exp  ElseClause -> IfStmt . 
	
	  sort ElseClause .    subsort Block <  ElseClause .    subsort IfStmt <  ElseClause . 

	  sort TryStmt .    op try_catch(_)_ :  Block  Name  Block -> TryStmt . 
	
	
	  sort IterationStmt .   
			   op while(_)_ :  Exp  Block -> IterationStmt .
			   op do_while(_) :  Block  Exp -> IterationStmt .
			   op for(_;_;_)_ :  ForInitializations  ForCondition  ForIncrements  Block -> IterationStmt . 
	
	  sort ForInitializations .    subsort List{ListElement} <  ForInitializations . 

	  sort ForCondition .    op .ForCondition :  -> ForCondition .    subsort Exp <  ForCondition .  
	
	  sort ForIncrements .    subsort List{ListElement} <  ForIncrements . 
	
	  sort LabeledStmt .   
			   op _:_ : Label  SwitchStmt -> LabeledStmt .
			   op _:_ : Label  IterationStmt -> LabeledStmt . 



	  sort VarDeclaration .    subsort Name <  VarDeclaration .    subsort SimpleAssignmentClause <  VarDeclaration . 
	
	  sort VarDeclarations .    subsort NeList{ListElement} <  VarDeclarations . 

	  sort VarDeclarationStmt .    op var_; :  VarDeclarations -> VarDeclarationStmt [prec 88] .  

	  sort List{VarDeclarationStmt} .    subsort VarDeclarationStmt <  List{VarDeclarationStmt} .    op .List{VarDeclarationStmt} :  -> List{VarDeclarationStmt} . 
			   op __ : List{VarDeclarationStmt}  List{VarDeclarationStmt} -> List{VarDeclarationStmt} [prec 111 gather(e E) id: .List{VarDeclarationStmt}] . 
	
	  sort Parameter .    subsort Name <  Parameter . 
	
	  sort Parameters .    subsort List{ListElement} <  Parameters .  
	 
	  sort FunctionLiteral .   
				   op function(_){_} :  Parameters  Program -> FunctionLiteral .
				   op function_(_){_} :  Name  Parameters  Program -> FunctionLiteral . 
		
	  sort FunctionStmt .    op _; : FunctionLiteral -> FunctionStmt . 

	  sort List{FunctionStmt} .    subsort FunctionStmt <  List{FunctionStmt} .    op .List{FunctionStmt} :  -> List{FunctionStmt} . 
			   op __ : List{FunctionStmt}  List{FunctionStmt} -> List{FunctionStmt} [prec 111 gather(e E) id: .List{FunctionStmt}] . 
	
	  sort Program .    op ___ : List{VarDeclarationStmt}  List{FunctionStmt}  List{ExecutionStmt} -> Program . 
	
	  sort Stmt .    subsort VarDeclarationStmt <  Stmt .    subsort FunctionStmt <  Stmt .    subsort ExecutionStmt <  Stmt . 
	
	
endm


 


mod STRICT-JAVASCRIPT-DESUGARED-SYNTAX is 
	including STRICT-JAVASCRIPT-SYNTAX . 

endm
