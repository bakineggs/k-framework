mod CHALLENGE-SYNTAX is
  including PL-INT .
  including PL-ID .

  sort Exp .
  sort Stmt .
  subsort Bool Int Id < Exp .

  sort List{Exp} .
  subsort Exp < List{Exp} .
  op _,_ : List{Exp} List{Exp} -> List{Exp} [assoc id: .List`{Exp`}] .
  op .List{Exp} : -> List{Exp} .

  sort List{Id} .
  subsort Id < List{Id} < List{Exp} .
  op _,_ : List{Id} List{Id} -> List{Id} [ditto] .

  op _+_ : Exp Exp -> Exp [prec 33 gather (E e) format (d b o d) metadata "strict"] .
  op _*_ : Exp Exp -> Exp [prec 31 gather (E e) format (d b o d) metadata "strict"] .
  op _/_ : Exp Exp -> Exp [prec 31 gather (E e) format (d b o d) metadata "strict"] .
  op _%_ : Exp Exp -> Exp [prec 31 gather (E e) format (d b o d) metadata "strict"] .

  op _<=_ : Exp Exp -> Exp [prec 37 format (d b o d) metadata "seqstrict"] .
  op _==_ : Exp Exp -> Exp [prec 37 format (d b o d) metadata "seqstrict"] .
  op not_ : Exp -> Exp [prec 55 format (b o d) metadata "strict"] .
  op _and_ : Exp Exp -> Exp [prec 55 format (d b o d) metadata "strict(1)"] .

  op skip : -> Stmt [format (b o)] .
  op if_then_else_ : Exp Stmt Stmt -> Stmt [prec 59 format (b o bni n++i bn--i n++i --) metadata "strict(1)"] .
  op if'_then_else_ : Exp Exp Exp -> Exp [prec 59 format (b o bni n++i bn--i n++i --) metadata "strict(1)"] .
  op _;_ : Stmt Stmt -> Stmt [prec 122 gather (e E) format (d b noi d)] .
  op while_do_ : Exp Stmt -> Stmt [prec 59 format (b o b on++i --)] .
  op output_ : Exp -> Stmt [prec 59 format (b o d) metadata "strict"] .

  op ++_ : Id -> Exp [prec 30 format (b o d)] .
  op _:=_ : Exp Exp -> Stmt [prec 40 format (d b o d) metadata "strict(2)"] .

  op &_ : Id -> Exp [prec 30 format (b o d)] .
  op *_ : Exp -> Exp [prec 30 format (b o d)] .
  op malloc_ : Exp -> Exp [format (b o d) metadata "strict"] .
  op free_ : Exp -> Stmt [format (b o d) metadata "strict"] .

  op aspect : Stmt -> Stmt [format (b o)] .
  --- We'd like to use λ and μ here but Maude has some bugs
  --- in its unicode handling.
  op \_->_ : List{Id} Exp -> Exp [prec 123 format (b o b o d)] .
  op \Y_->_ : Id Exp -> Exp [prec 123 format (b o b o d)] .
  op __ : Exp List{Exp} -> Exp [prec 0 metadata "strict"] .

  op {vars_;_} : List{Id} Stmt -> Stmt [prec 121 format (y b o b noi y o)] .

  op callcc : Exp -> Exp [format (b o) metadata "strict"] .
  
  op randomBool : -> Exp [format (b o)] .

  op spawn_ : Stmt -> Stmt [prec 59 format(b on++i --)] .
  op acquire_ : Exp -> Stmt [format (b o d) metadata "strict"] .
  op release_ : Exp -> Stmt [format (b o d) metadata "strict"] .
  op rv_ : Exp -> Stmt [format (b o d) metadata "strict"] .

  op new-agent_ : Stmt -> Exp [format (b o d)] .
  op me : -> Exp [format (b o)] .
  op parent : -> Exp [format (b o)] .
  op receive-from_ : Exp -> Exp [format (b o d) metadata "strict"] .
  op receive : -> Exp [format (b o)] .
  op send-asynch__ : Exp Exp -> Stmt [format (b o d d) metadata "strict"] .
  op send-synch__ : Exp Exp -> Stmt [format (b o d d) metadata "strict"] .

  op halt-thread : -> Stmt [format (b o)] .
  op halt-agent : -> Stmt [format (b o)] .
  op halt-system : -> Stmt [format (b o)] .
endm
