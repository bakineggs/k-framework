***(
    Definition of Haskell's abstract syntax in Maude, as based off of Language.Haskell.Exts.Syntax
***)

mod HASKELL-SYNTAX is
    including HASKELL-SYNTAX-STRUCTS .
    --- Import the K-stuff
    including K-TECHNIQUE .
    including K-RULES .               --- to write k rules with in-place rewriting
    including K-CONFIG .              --- to specify the global configuration term
    including K-POLYMORPHIC-VARIABLES . --- defines the ? polmorfic constant
    including K-OPEN-CELLS .          --- defines open cells like <_>..._...</_>
    including K-CONTEXTS .
    including K-WHERE .
    including K-DESTRUCTORS .         --- defines getKLabel and getList{K} for K
    including K-LISTK-EXTRAS .
  --- Do not want: including K-LIST-EXTRAS, clobers our List constructor .
    including K-MAP-EXTRAS .          --- operations on Maps
    including K-BAG-EXTRAS .          --- operations on Bags
    including K-SET-EXTRAS .          --- operations on Sets
    including PL-STRING .

    ---- including PL-BOOL .
    ---- including PL-EXT-BOOL .
    ---- including PL-NAT .
    ---- including PL-INT .
    ---- including PL-RAT .
    ---- including PL-FLOAT .
    ---- including PL-STRING .
    ---- including PL-CONVERSION .
    ---- including PL-QID .
    ---- including PL-RANDOM .
    ---- including PL-ID .

    --- Some base Haskell sorts
    sorts HsString HsInt HsChar HsInteger HsRational .

***(
    data Boxed = Boxed | Unboxed
***)
    --- Sort present in annotated Haskell syntax
    sort Boxed .
    ops Boxed Unboxed : -> Boxed [ctor] .


***(
data SrcLoc = SrcLoc
    { srcFilename :: String
    , srcLine :: Int
    , srcColumn :: Int
    }
***)
    --- Sort present in SrcLoc
    sort SrcLoc .
    op SrcLoc _ _ _ : String HsInt HsInt -> SrcLoc [ctor] .

--- The rest is the abstract Haskell syntax, as defined in Language.Haskell.Exts.Syntax
***(
    {-# LANGUAGE CPP, DeriveDataTypeable #-}
    -----------------------------------------------------------------------------
    -- |
    -- Module      :  Language.Haskell.Exts.Syntax
    -- Copyright   :  (c) Niklas Broberg 2004-2009,
    --                (c) The GHC Team, 1997-2000
    -- License     :  BSD-style (see the file LICENSE.txt)
    --
    -- Maintainer  :  Niklas Broberg, d00nibro@chalmers.se
    -- Stability   :  stable
    -- Portability :  portable
    --
    -- A suite of datatypes describing the abstract syntax of Haskell 98
    -- <http://www.haskell.org/onlinereport/> plus registered extensions, including:
    --
    --   * multi-parameter type classes with functional dependencies (MultiParamTypeClasses, FunctionalDependencies)
    --
    --   * parameters of type class assertions are unrestricted (FlexibleContexts)
    --
    --   * 'forall' types as universal and existential quantification (RankNTypes, ExistentialQuantification, etc)
    --
    --   * pattern guards (PatternGuards)
    --
    --   * implicit parameters (ImplicitParameters)
    --
    --   * generalised algebraic data types (GADTs)
    --
    --   * template haskell (TemplateHaskell)
    --
    --   * empty data type declarations (EmptyDataDecls)
    --
    --   * unboxed tuples (UnboxedTuples)
    --
    --   * regular patterns (RegularPatterns)
    --
    --   * HSP-style XML expressions and patterns (XmlSyntax)
    --
    -----------------------------------------------------------------------------
***)

***(
    -- | The name of a Haskell module.
    newtype ModuleName = ModuleName String
***)

    sort ModuleName .
    op ModuleName _ : HsString -> ModuleName [ctor] .

***(
    -- | Constructors with special syntax.
    -- These names are never qualified, and always refer to builtin type or
    -- data constructors.
    data SpecialCon
        = UnitCon               -- ^ unit type and data constructor @()@
        | ListCon               -- ^ list type constructor @[]@
        | FunCon                -- ^ function type constructor @->@
        | TupleCon Boxed Int    -- ^ /n/-ary tuple type and data
                                --   constructors @(,)@ etc, possibly boxed @(\#,\#)@
        | Cons                  -- ^ list data constructor @(:)@
        | UnboxedSingleCon      -- ^ unboxed singleton tuple constructor @(\# \#)@
***)

    sort SpecialCon .
    op UnitCon          :             -> SpecialCon [ctor] .
    op ListCon          :             -> SpecialCon [ctor] .
    op FunCon           :             -> SpecialCon [ctor] .
    op TupleCon _ _     : Boxed HsInt -> SpecialCon [ctor] .
    op Cons             :             -> SpecialCon [ctor] .
    op UnboxedSingleCon :             -> SpecialCon [ctor] .

***(
    -- | This type is used to represent qualified variables, and also
    --   qualified constructors.
    data QName
        = Qual ModuleName Name    -- ^ name qualified with a module name
        | UnQual Name             -- ^ unqualified local name
        | Special SpecialCon      -- ^ built-in constructor with special syntax
***)

    sort QName .
    op Qual _ _  : ModuleName Name -> QName [ctor] .
    op UnQual _  : Name            -> QName [ctor] .
    op Special _ : SpecialCon      -> QName [ctor] .

***(
    -- | This type is used to represent variables, and also constructors.
    data Name
        = Ident String    -- ^ /varid/ or /conid/.
        | Symbol String   -- ^ /varsym/ or /consym/
***)

    sort Name .
    op Ident _  : HsString -> Name [ctor] .
    op Symbol _ : HsString -> Name [ctor] .

***(
    -- | An implicit parameter name.
    data IPName
        = IPDup String -- ^ ?/ident/, non-linear implicit parameter
        | IPLin String -- ^ %/ident/, linear implicit parameter
***)

    sort IPName .
    op IPDup _ : HsString -> IPName [ctor] .
    op IPLin _ : HsString -> IPName [ctor] .


***(
    -- | Possibly qualified infix operators (/qop/), appearing in expressions.
    data QOp
        = QVarOp QName  -- ^ variable operator (/qvarop/)
        | QConOp QName  -- ^ constructor operator (/canopy/)
***)

    sort QOp .
    op QVarOp _ : QName -> QOp [ctor] .
    op QConOp _ : QName -> QOp [ctor] .

***(
    -- | Operators appearing in @infix@ declarations are never qualified.
    data Op
        = VarOp Name    -- ^ variable operator (/varop/)
        | ConOp Name    -- ^ constructor operator (/conop/)
***)

    sort Op .
    op VarOp _ : Name -> Op [ctor] .
    op ConOp _ : Name -> Op [ctor] .

***(
    -- | A name (/cname/) of a component of a class or data type in an @import@
    --   or export specification.
    data CName
        = VarName Name  -- ^ name of a method or field
        | ConName Name  -- ^ name of a data constructor
***)

    sort CName .
    op VarName _ : Name -> CName [ctor] .
    op ConName _ : Name -> CName [ctor] .

***(
    -- | A complete Haskell source module.
    data Module = Module SrcLoc ModuleName [ModulePragma] (Maybe WarningText)
                            (Maybe [ExportSpec]) [ImportDecl] [Decl]
***)

    sort Module .
    op Module _ _ _ _ _ _ _ : SrcLoc ModuleName HsList HsMaybe HsMaybe HsList HsList -> Module [ctor] .

***(
    -- | An item in a module's export specification.
    data ExportSpec
         = EVar QName                   -- ^ variable
         | EAbs QName                   -- ^ @T@:
                                        --   a class or datatype exported abstractly,
                                        --   or a type synonym.
         | EThingAll QName              -- ^ @T(..)@:
                                        --   a class exported with all of its methods, or
                                        --   a datatype exported with all of its constructors.
         | EThingWith QName [CName]     -- ^ @T(C_1,...,C_n)@:
                                        --   a class exported with some of its methods, or
                                        --   a datatype exported with some of its constructors.
         | EModuleContents ModuleName   -- ^ @module M@:
                                        --   re-export a module.
***)

    sort ExportSpec .
    op EVar _            : QName        -> ExportSpec [ctor] .
    op EAbs _            : QName        -> ExportSpec [ctor] .
    op EThingAll _       : QName        -> ExportSpec [ctor] .
    op EThingWith _ _    : QName HsList -> ExportSpec [ctor] .
    op EModuleContents _ : ModuleName   -> ExportSpec [ctor] .

***(
    -- | An import declaration.
    data ImportDecl = ImportDecl
        { importLoc :: SrcLoc           -- ^ position of the @import@ keyword.
        , importModule :: ModuleName    -- ^ name of the module imported.
        , importQualified :: Bool       -- ^ imported @qualified@?
        , importSrc :: Bool             -- ^ imported with @{-\# SOURCE \#-}@?
        , importPkg :: Maybe String     -- ^ imported with explicit package name
        , importAs :: Maybe ModuleName  -- ^ optional alias name in an @as@ clause.
        , importSpecs :: Maybe (Bool,[ImportSpec])
                -- ^ optional list of import specifications.
                -- The 'Bool' is 'True' if the names are excluded
                -- by @hiding@.
        }
***)

    sort ImportDecl .
    op ImportDecl _ _ _ _ _ _ _ : SrcLoc ModuleName Bool Bool HsMaybe HsMaybe HsMaybe -> ImportDecl [ctor] .

***(
    -- | An import specification, representing a single explicit item imported
    --   (or hidden) from a module.
    data ImportSpec
         = IVar Name                -- ^ variable
         | IAbs Name                -- ^ @T@:
                                    --   the name of a class, datatype or type synonym.
         | IThingAll Name           -- ^ @T(..)@:
                                    --   a class imported with all of its methods, or
                                    --   a datatype imported with all of its constructors.
         | IThingWith Name [CName]  -- ^ @T(C_1,...,C_n)@:
                                    --   a class imported with some of its methods, or
                                    --   a datatype imported with some of its constructors.
***)

    sort ImportSpec .
    op IVar _         : Name        -> ImportSpec [ctor] .
    op IAbs _         : Name        -> ImportSpec [ctor] .
    op IThingAll _    : Name        -> ImportSpec [ctor] .
    op IThingWith _ _ : Name HsList -> ImportSpec [ctor] .

***(
    -- | Associativity of an operator.
    data Assoc
         = AssocNone  -- ^ non-associative operator (declared with @infix@)
         | AssocLeft  -- ^ left-associative operator (declared with @infixl@).
         | AssocRight -- ^ right-associative operator (declared with @infixr@)
***)

    sort Assoc .
    op AssocNone  : -> Assoc [ctor] .
    op AssocLeft  : -> Assoc [ctor] .
    op AssocRight : -> Assoc [ctor] .

***(
    -- | A single derived instance, which may have arguments since it may be a MPTC.
    type Deriving = (QName, [Type])
***)

    sort Deriving .

***(
    -- | A top-level declaration.
    data Decl
         = TypeDecl     SrcLoc Name [TyVarBind] Type
         -- ^ A type declaration
         | TypeFamDecl  SrcLoc Name [TyVarBind] (Maybe Kind)
         -- ^ A type family declaration
         | DataDecl     SrcLoc DataOrNew Context Name [TyVarBind]              [QualConDecl] [Deriving]
         -- ^ A data OR newtype declaration
         | GDataDecl    SrcLoc DataOrNew Context Name [TyVarBind] (Maybe Kind) [GadtDecl]    [Deriving]
         -- ^ A data OR newtype declaration, GADT style
         | DataFamDecl  SrcLoc {-data-}  Context Name [TyVarBind] (Maybe Kind)
         -- ^ A data family declaration
         | TypeInsDecl  SrcLoc Type Type
         -- ^ A type family instance declaration
         | DataInsDecl  SrcLoc DataOrNew Type              [QualConDecl] [Deriving]
         -- ^ A data family instance declaration
         | GDataInsDecl SrcLoc DataOrNew Type (Maybe Kind) [GadtDecl]    [Deriving]
         -- ^ A data family instance declaration, GADT style
         | ClassDecl    SrcLoc Context Name [TyVarBind] [FunDep] [ClassDecl]
         -- ^ A declaration of a type class
         | InstDecl     SrcLoc Context QName [Type] [InstDecl]
         -- ^ An declaration of a type class instance
         | DerivDecl    SrcLoc Context QName [Type]
         -- ^ A standalone deriving declaration
         | InfixDecl    SrcLoc Assoc Int [Op]
         -- ^ A declaration of operator fixity
         | DefaultDecl  SrcLoc [Type]
         -- ^ A declaration of default types
         | SpliceDecl   SrcLoc Exp
         -- ^ A Template Haskell splicing declaration
         | TypeSig      SrcLoc [Name] Type
         -- ^ A type signature declaration
         | FunBind      [Match]
         -- ^ A set of function binding clauses
         | PatBind      SrcLoc Pat (Maybe Type) Rhs {-where-} Binds
         -- ^ A pattern binding
         | ForImp   SrcLoc CallConv Safety String Name Type
         -- ^ A foreign import declaration
         | ForExp   SrcLoc CallConv          String Name Type
         -- ^ A foreign export declaration

         | RulePragmaDecl   SrcLoc [Rule]
         -- ^ A RULES pragma
         | DeprPragmaDecl   SrcLoc [([Name], String)]
         -- ^ A DEPRECATED pragma
         | WarnPragmaDecl   SrcLoc [([Name], String)]
         -- ^ A WARNING pragma
         | InlineSig        SrcLoc Bool Activation QName
         -- ^ An INLINE pragma
         | InlineConlikeSig SrcLoc      Activation QName
         -- ^ An INLINE CONLIKE pragma
         | SpecSig          SrcLoc                 QName [Type]
         -- ^ A SPECIALISE pragma
         | SpecInlineSig    SrcLoc Bool Activation QName [Type]
         -- ^ A SPECIALISE INLINE pragma
         | InstSig          SrcLoc Context         QName [Type]
         -- ^ A SPECIALISE instance pragma
         | AnnPragma        SrcLoc Annotation
         -- ^ An ANN pragma
***)

    sort Decl .
    op TypeDecl _ _ _ _          : SrcLoc Name HsList Type                                    -> Decl [ctor] .
    op TypeFamDecl _ _ _ _       : SrcLoc Name HsList HsMaybe                                 -> Decl [ctor] .
    op DataDecl _ _ _ _ _ _ _    : SrcLoc DataOrNew Context Name HsList HsList HsList         -> Decl [ctor] .
    op GDataDecl _ _ _ _ _ _ _ _ : SrcLoc DataOrNew Context Name HsList HsMaybe HsList HsList -> Decl [ctor] .
    op DataFamDecl _ _ _ _ _     : SrcLoc Context Name HsList HsMaybe                         -> Decl [ctor] .
    op TypeInsDecl _ _ _         : SrcLoc Type Type                                           -> Decl [ctor] .
    op DataInsDecl _ _ _ _ _     : SrcLoc DataOrNew Type HsList HsList                        -> Decl [ctor] .
    op GDataInsDecl _ _ _ _ _ _  : SrcLoc DataOrNew Type HsMaybe HsList HsList                -> Decl [ctor] .
    op ClassDecl _ _ _ _ _ _     : SrcLoc Context Name HsList HsList HsList                   -> Decl [ctor] .
    op InstDecl _ _ _ _ _        : SrcLoc Context QName HsList HsList                         -> Decl [ctor] .
    op DerivDecl _ _ _ _         : SrcLoc Context QName HsList                                -> Decl [ctor] .
    op InfixDecl _ _ _ _         : SrcLoc Assoc HsInt HsList                                  -> Decl [ctor] .
    op DefaultDecl _ _           : SrcLoc HsList                                              -> Decl [ctor] .
    op SpliceDecl _ _            : SrcLoc Exp                                                 -> Decl [ctor] .
    op TypeSig _ _ _             : SrcLoc HsList Type                                         -> Decl [ctor] .
    op FunBind _                 : HsList                                                     -> Decl [ctor] .
    op PatBind _ _ _ _ _         : SrcLoc Pat HsMaybe Rhs Binds                               -> Decl [ctor] .
    op ForImp _ _ _ _ _ _        : SrcLoc CallConv Safety HsString Name Type                  -> Decl [ctor] .
    op ForExp _ _ _ _ _          : SrcLoc CallConv HsString Name Type                         -> Decl [ctor] .
    op RulePragmaDecl _ _        : SrcLoc HsList                                              -> Decl [ctor] .
    op DeprPragmaDecl _ _        : SrcLoc HsList                                              -> Decl [ctor] .
    op WarnPragmaDecl _ _        : SrcLoc HsList                                              -> Decl [ctor] .
    op InlineSig _ _ _ _         : SrcLoc Bool Activation QName                               -> Decl [ctor] .
    op InlineConlikeSig _ _ _    : SrcLoc Activation QName                                    -> Decl [ctor] .
    op SpecSig _ _ _             : SrcLoc QName HsList                                        -> Decl [ctor] .
    op SpecInlineSig _ _ _ _ _   : SrcLoc Bool Activation QName HsList                        -> Decl [ctor] .
    op InstSig _ _ _ _           : SrcLoc Context QName HsList                                -> Decl [ctor] .
    op AnnPragma _ _             : SrcLoc Annotation                                          -> Decl [ctor] .

***(
    -- | An annotation through an ANN pragma.
    data Annotation
        = Ann       Name Exp
        -- ^ An annotation for a declared name.
        | TypeAnn   Name Exp
        -- ^ An annotation for a declared type.
        | ModuleAnn      Exp
        -- ^ An annotation for the defining module.
***)

    sort Annotation .
    op Ann _ _     : Name Exp -> Annotation [ctor] .
    op TypeAnn _ _ : Name Exp -> Annotation [ctor] .
    op ModuleAnn _ : Exp      -> Annotation [ctor] .

***(
    -- | A flag stating whether a declaration is a data or newtype declaration.
    data DataOrNew = DataType | NewType
***)

    sort DataOrNew .
    op DataType : -> DataOrNew [ctor] .
    op NewType  : -> DataOrNew [ctor] .

***(
    -- | A binding group inside a @let@ or @where@ clause.
    data Binds
        = BDecls [Decl]     -- ^ An ordinary binding group
        | IPBinds [IPBind]  -- ^ A binding group for implicit parameters
***)

    sort Binds .
    op BDecls _  : HsList -> Binds [ctor] .
    op IPBinds _ : HsList -> Binds [ctor] .

***(
    -- | A binding of an implicit parameter.
    data IPBind = IPBind SrcLoc IPName Exp
***)

    sort IPBind .
    op IPBind _ _ _ : SrcLoc IPName Exp -> IPBind [ctor] .

***(
    -- | Clauses of a function binding.
    data Match
         = Match SrcLoc Name [Pat] (Maybe Type) Rhs {-where-} Binds
***)

    sort Match .
    op Match _ _ _ _ _ _ : SrcLoc Name HsList HsMaybe Rhs Binds -> Match [ctor] .

***(
    -- | A single constructor declaration within a data type declaration,
    --   which may have an existential quantification binding.
    data QualConDecl
        = QualConDecl SrcLoc
            {-forall-} [TyVarBind] {- . -} Context
            {- => -} ConDecl
***)

    sort QualConDecl .
    op QualConDecl _ _ _ _ : SrcLoc HsList Context ConDecl -> QualConDecl [ctor] .

***(
    -- | Declaration of an ordinary data constructor.
    data ConDecl
         = ConDecl Name [BangType]
                    -- ^ ordinary data constructor
         | InfixConDecl BangType Name BangType
                    -- ^ infix data constructor
         | RecDecl Name [([Name],BangType)]
                    -- ^ record constructor
***)

    sort ConDecl .
    op ConDecl _ _        : Name HsList            -> ConDecl [ctor] .
    op InfixConDecl _ _ _ : BangType Name BangType -> ConDecl [ctor] .
    op RecDecl _ _        : Name HsList            -> ConDecl [ctor] .

***(
    -- | A single constructor declaration in a GADT data type declaration.
    data GadtDecl
        = GadtDecl SrcLoc Name Type
***)

    sort GadtDecl .
    op GadtDecl _ _ _ : SrcLoc Name Type -> GadtDecl [ctor] .

***(
    -- | Declarations inside a class declaration.
    data ClassDecl
        = ClsDecl    Decl
                -- ^ ordinary declaration
        | ClsDataFam SrcLoc Context Name [TyVarBind] (Maybe Kind)
                -- ^ declaration of an associated data type
        | ClsTyFam   SrcLoc         Name [TyVarBind] (Maybe Kind)
                -- ^ declaration of an associated type synonym
        | ClsTyDef   SrcLoc Type    Type
                -- ^ default choice for an associated type synonym
***)

    sort ClassDecl .
    op ClsDecl _            : Decl                               -> ClassDecl [ctor] .
    op ClsDataFam _ _ _ _ _ : SrcLoc Context Name HsList HsMaybe -> ClassDecl [ctor] .
    op ClsTyFam _ _ _ _     : SrcLoc Name HsList HsMaybe         -> ClassDecl [ctor] .
    op ClsTyDef _ _ _       : SrcLoc Type    Type                -> ClassDecl [ctor] .

***(
    -- | Declarations inside an instance declaration.
    data InstDecl
        = InsDecl   Decl
                -- ^ ordinary declaration
        | InsType   SrcLoc Type Type
                -- ^ an associated type definition
        | InsData   SrcLoc DataOrNew Type [QualConDecl] [Deriving]
                -- ^ an associated data type implementation
        | InsGData  SrcLoc DataOrNew Type (Maybe Kind) [GadtDecl] [Deriving]
                -- ^ an associated data type implemented using GADT style
***)

    sort InstDecl .
    op InsDecl _            : Decl                                        -> InstDecl [ctor] .
    op InsType _ _ _        : SrcLoc Type Type                            -> InstDecl [ctor] .
    op InsData _ _ _ _ _    : SrcLoc DataOrNew Type HsList HsList         -> InstDecl [ctor] .
    op InsGData _ _ _ _ _ _ : SrcLoc DataOrNew Type HsMaybe HsList HsList -> InstDecl [ctor] .

***(
    -- | The type of a constructor argument or field, optionally including
    --   a strictness annotation.
    data BangType
         = BangedTy   Type  -- ^ strict component, marked with \"@!@\"
         | UnBangedTy Type  -- ^ non-strict component
         | UnpackedTy Type  -- ^ unboxed component, marked with an UNPACK pragma
***)

    sort BangType .
    op BangedTy _   : Type -> BangType [ctor] .
    op UnBangedTy _ : Type -> BangType [ctor] .
    op UnpackedTy _ : Type -> BangType [ctor] .

***(
    -- | The right hand side of a function or pattern binding.
    data Rhs
         = UnGuardedRhs Exp -- ^ unguarded right hand side (/exp/)
         | GuardedRhss  [GuardedRhs]
                            -- ^ guarded right hand side (/gdrhs/)
***)

    sort Rhs .
    op UnGuardedRhs _ : Exp    -> Rhs [ctor] .
    op GuardedRhss _  : HsList -> Rhs [ctor] .

***(
    -- | A guarded right hand side @|@ /stmts/ @=@ /exp/.
    --   The guard is a series of statements when using pattern guards,
    --   otherwise it will be a single qualifier expression.
    data GuardedRhs
         = GuardedRhs SrcLoc [Stmt] Exp
***)

    sort GuardedRhs .
    op GuardedRhs _ _ _ : SrcLoc HsList Exp -> GuardedRhs [ctor] .

***(
    -- | A type qualified with a context.
    --   An unqualified type has an empty context.
    data Type
         = TyForall
            (Maybe [TyVarBind])
            Context
            Type                    -- ^ qualified type
         | TyFun   Type Type        -- ^ function type
         | TyTuple Boxed [Type]     -- ^ tuple type, possibly boxed
         | TyList  Type             -- ^ list syntax, e.g. [a], as opposed to [] a
         | TyApp   Type Type        -- ^ application of a type constructor
         | TyVar   Name             -- ^ type variable
         | TyCon   QName            -- ^ named type or type constructor
         | TyParen Type             -- ^ type surrounded by parentheses
         | TyInfix Type QName Type  -- ^ infix type constructor
         | TyKind  Type Kind        -- ^ type with explicit kind signature
***)

    sort Type .
    op TyForall _ _ _ : HsMaybe Context Type -> Type [ctor] .
    op TyFun _ _      : Type Type            -> Type [ctor] .
    op TyTuple _ _    : Boxed HsList         -> Type [ctor] .
    op TyList _       : Type                 -> Type [ctor] .
    op TyApp _ _      : Type Type            -> Type [ctor] .
    op TyVar _        : Name                 -> Type [ctor] .
    op TyCon _        : QName                -> Type [ctor] .
    op TyParen _      : Type                 -> Type [ctor] .
    op TyInfix _ _ _  : Type QName Type      -> Type [ctor] .
    op TyKind _ _     : Type Kind            -> Type [ctor] .

***(
    -- | A type variable declaration, optionally with an explicit kind annotation.
    data TyVarBind
        = KindedVar Name Kind   -- ^ variable binding with kind annotation
        | UnkindedVar Name      -- ^ ordinary variable binding
***)

    sort TyVarBind .
    op KindedVar _ _ : Name Kind -> TyVarBind [ctor] .
    op UnkindedVar _ : Name      -> TyVarBind [ctor] .

***(
    -- | An explicit kind annotation.
    data Kind
        = KindStar          -- ^ @*@, the kind of types
        | KindBang          -- ^ @!@, the kind of unboxed types
        | KindFn Kind Kind  -- ^ @->@, the kind of a type constructor
        | KindParen Kind    -- ^ a kind surrounded by parentheses
        | KindVar Name      -- ^ a kind variable (as of yet unsupported by compilers)
***)

    sort Kind .
    op KindStar    :           -> Kind [ctor] .
    op KindBang    :           -> Kind [ctor] .
    op KindFn _ _  : Kind Kind -> Kind [ctor] .
    op KindParen _ : Kind      -> Kind [ctor] .
    op KindVar _   : Name      -> Kind [ctor] .

***(
    -- | A functional dependency, given on the form
    --   l1 l2 ... ln -> r2 r3 .. rn
    data FunDep
        = FunDep [Name] [Name]
***)

    sort FunDep .
    op FunDep _ _ : HsList HsList -> FunDep [ctor] .

***(
    -- | A context is a set of assertions
    type Context = [Asst]
***)

    sort Context .

***(
    -- | Class assertions.
    --   In Haskell 98, the argument would be a /tyvar/, but this definition
    --   allows multiple parameters, and allows them to be /type/s.
    --   Also extended with support for implicit parameters and equality constraints.
    data Asst = ClassA QName [Type]     -- ^ ordinary class assertion
              | InfixA Type QName Type  -- ^ class assertion where the class name is given infix
              | IParam IPName Type      -- ^ implicit parameter assertion
              | EqualP Type   Type      -- ^ type equality constraint
***)

    sort Asst .
    op ClassA _ _   : QName HsList    -> Asst [ctor] .
    op InfixA _ _ _ : Type QName Type -> Asst [ctor] .
    op IParam _ _   : IPName Type     -> Asst [ctor] .
    op EqualP _ _   : Type Type       -> Asst [ctor] .

***(
    -- | /literal/
    -- Values of this type hold the abstract value of the literal, not the
    -- precise string representation used.  For example, @10@, @0o12@ and @0xa@
    -- have the same representation.
    data Literal
        = Char    Char          -- ^ character literal
        | String  String        -- ^ string literal
        | Int     Integer       -- ^ integer literal
        | Frac    Rational      -- ^ floating point literal
        | PrimInt    Integer    -- ^ unboxed integer literal
        | PrimWord   Integer    -- ^ unboxed word literal
        | PrimFloat  Rational   -- ^ unboxed float literal
        | PrimDouble Rational   -- ^ unboxed double literal
        | PrimChar   Char       -- ^ unboxed character literal
        | PrimString String     -- ^ unboxed string literal
***)

    sort Literal .
    op Char _       : Char       -> Literal [ctor] .
    op String _     : HsString   -> Literal [ctor] .
    op Int _        : HsInteger  -> Literal [ctor] .
    op Frac _       : HsRational -> Literal [ctor] .
    op PrimInt _    : HsInteger  -> Literal [ctor] .
    op PrimWord _   : HsInteger  -> Literal [ctor] .
    op PrimFloat _  : HsRational -> Literal [ctor] .
    op PrimDouble _ : HsRational -> Literal [ctor] .
    op PrimChar _   : Char       -> Literal [ctor] .
    op PrimString _ : HsString   -> Literal [ctor] .

***(
    -- | Haskell expressions.
    data Exp
        = Var QName                 -- ^ variable
        | IPVar IPName              -- ^ implicit parameter variable
        | Con QName                 -- ^ data constructor
        | Lit Literal               -- ^ literal constant
        | InfixApp Exp QOp Exp      -- ^ infix application
        | App Exp Exp               -- ^ ordinary application
        | NegApp Exp                -- ^ negation expression @-/exp/@ (unary minus)
        | Lambda SrcLoc [Pat] Exp   -- ^ lambda expression
        | Let Binds Exp             -- ^ local declarations with @let@ ... @in@ ...
        | If Exp Exp Exp            -- ^ @if@ /exp/ @then@ /exp/ @else@ /exp/
        | Case Exp [Alt]            -- ^ @case@ /exp/ @of@ /alts/
        | Do [Stmt]                 -- ^ @do@-expression:
                                    --   the last statement in the list
                                    --   should be an expression.
        | MDo [Stmt]                -- ^ @mdo@-expression
        | Tuple [Exp]               -- ^ tuple expression
        | TupleSection [Maybe Exp]  -- ^ tuple section expression, e.g. @(,,3)@
        | List [Exp]                -- ^ list expression
        | Paren Exp                 -- ^ parenthesised expression
        | LeftSection Exp QOp       -- ^ left section @(@/exp/ /qop/@)@
        | RightSection QOp Exp      -- ^ right section @(@/qop/ /exp/@)@
        | RecConstr QName [FieldUpdate]
                                    -- ^ record construction expression
        | RecUpdate Exp [FieldUpdate]
                                    -- ^ record update expression
        | EnumFrom Exp              -- ^ unbounded arithmetic sequence,
                                    --   incrementing by 1: @[from ..]@
        | EnumFromTo Exp Exp        -- ^ bounded arithmetic sequence,
                                    --   incrementing by 1 @[from .. to]@
        | EnumFromThen Exp Exp      -- ^ unbounded arithmetic sequence,
                                    --   with first two elements given @[from, then ..]@
        | EnumFromThenTo Exp Exp Exp
                                    -- ^ bounded arithmetic sequence,
                                    --   with first two elements given @[from, then .. to]@
        | ListComp Exp  [QualStmt]    -- ^ ordinary list comprehension
        | ParComp  Exp [[QualStmt]]   -- ^ parallel list comprehension
        | ExpTypeSig SrcLoc Exp Type  -- ^ expression with explicit type signature

        | VarQuote QName            -- ^ @'x@ for template haskell reifying of expressions
        | TypQuote QName            -- ^ @''T@ for template haskell reifying of types
        | BracketExp Bracket        -- ^ template haskell bracket expression
        | SpliceExp Splice          -- ^ template haskell splice expression
        | QuasiQuote String String  -- ^ quasi-quotaion: @[$/name/| /string/ |]@

    -- Hsx
        | XTag SrcLoc XName [XAttr] (Maybe Exp) [Exp]
                                    -- ^ xml element, with attributes and children
        | XETag SrcLoc XName [XAttr] (Maybe Exp)
                                    -- ^ empty xml element, with attributes
        | XPcdata String            -- ^ PCDATA child element
        | XExpTag Exp               -- ^ escaped haskell expression inside xml

    -- Pragmas
        | CorePragma        String Exp      -- ^ CORE pragma
        | SCCPragma         String Exp      -- ^ SCC pragma
        | GenPragma         String (Int, Int) (Int, Int) Exp
                                            -- ^ GENERATED pragma

    -- Arrows
        | Proc SrcLoc     Pat Exp   -- ^ arrows proc: @proc@ /pat/ @->@ /exp/
        | LeftArrApp      Exp Exp   -- ^ arrow application (from left): /exp/ @-<@ /exp/
        | RightArrApp     Exp Exp   -- ^ arrow application (from right): /exp/ @>-@ /exp/
        | LeftArrHighApp  Exp Exp   -- ^ higher-order arrow application (from left): /exp/ @-<<@ /exp/
        | RightArrHighApp Exp Exp   -- ^ higher-order arrow application (from right): /exp/ @>>-@ /exp/
***)

    sort Exp .
    op Var _                : QName                              -> Exp [ctor] .
    op IPVar _              : IPName                             -> Exp [ctor] .
    op Con _                : QName                              -> Exp [ctor] .
    op Lit _                : Literal                            -> Exp [ctor] .
    op InfixApp _ _ _       : Exp QOp Exp                        -> Exp [ctor] .
    op App _ _              : Exp Exp                            -> Exp [ctor] .
    op NegApp _             : Exp                                -> Exp [ctor] .
    op Lambda _ _ _         : SrcLoc HsList Exp                  -> Exp [ctor] .
    op Let _ _              : Binds Exp                          -> Exp [ctor] .
    op If _ _ _             : Exp Exp Exp                        -> Exp [ctor] .
    op Case _ _             : Exp HsList                         -> Exp [ctor] .
    op Do _                 : HsList                             -> Exp [ctor] .
    op MDo _                : HsList                             -> Exp [ctor] .
    op Tuple _              : HsList                             -> Exp [ctor] .
    op TupleSection _       : HsList                             -> Exp [ctor] .
    op List _               : HsList                             -> Exp [ctor] .
    op Paren _              : Exp                                -> Exp [ctor] .
    op LeftSection _ _      : Exp QOp                            -> Exp [ctor] .
    op RightSection _ _     : QOp Exp                            -> Exp [ctor] .
    op RecConstr _ _        : QName HsList                       -> Exp [ctor] .
    op RecUpdate _ _        : Exp HsList                         -> Exp [ctor] .
    op EnumFrom _           : Exp                                -> Exp [ctor] .
    op EnumFromTo _ _       : Exp Exp                            -> Exp [ctor] .
    op EnumFromThen _ _     : Exp Exp                            -> Exp [ctor] .
    op EnumFromThenTo _ _ _ : Exp Exp Exp                        -> Exp [ctor] .
    op ListComp _ _         : Exp HsList                         -> Exp [ctor] .
    op ParComp _ _          : Exp HsList                         -> Exp [ctor] .
    op ExpTypeSig _ _ _     : SrcLoc Exp Type                    -> Exp [ctor] .
    op VarQuote _           : QName                              -> Exp [ctor] .
    op TypQuote _           : QName                              -> Exp [ctor] .
    op BracketExp _         : Bracket                            -> Exp [ctor] .
    op SpliceExp _          : Splice                             -> Exp [ctor] .
    op QuasiQuote _ _       : HsString HsString                  -> Exp [ctor] .
    op XTag _ _ _ _ _       : SrcLoc XName HsList HsMaybe HsList -> Exp [ctor] .
    op XETag _ _ _ _        : SrcLoc XName HsList HsMaybe        -> Exp [ctor] .
    op XPcdata _            : HsString                           -> Exp [ctor] .
    op XExpTag _            : Exp                                -> Exp [ctor] .
    op CorePragma _ _       : HsString Exp                       -> Exp [ctor] .
    op SCCPragma _ _        : HsString Exp                       -> Exp [ctor] .
    op GenPragma _ _ _ _    : HsString HsTuple HsTuple Exp       -> Exp [ctor] .
    op Proc _ _ _           : SrcLoc Pat Exp                     -> Exp [ctor] .
    op LeftArrApp _ _       : Exp Exp                            -> Exp [ctor] .
    op RightArrApp _ _      : Exp Exp                            -> Exp [ctor] .
    op LeftArrHighApp _ _   : Exp Exp                            -> Exp [ctor] .
    op RightArrHighApp _ _  : Exp Exp                            -> Exp [ctor] .

***(
    -- | The name of an xml element or attribute,
    --   possibly qualified with a namespace.
    data XName
        = XName String              -- <name ...
        | XDomName String String    -- <dom:name ...
***)

    sort XName .
    op XName _      : HsString          -> XName [ctor] .
    op XDomName _ _ : HsString HsString -> XName [ctor] .

***(
    -- | An xml attribute, which is a name-expression pair.
    data XAttr = XAttr XName Exp
***)

    sort XAttr .
    op XAttr _ _ : XName Exp -> XAttr [ctor] .

***(
    -- | A template haskell bracket expression.
    data Bracket
        = ExpBracket Exp        -- ^ expression bracket: @[| ... |]@
        | PatBracket Pat        -- ^ pattern bracket: @[p| ... |]@
        | TypeBracket Type      -- ^ type bracket: @[t| ... |]@
        | DeclBracket [Decl]    -- ^ declaration bracket: @[d| ... |]@
***)

    sort Bracket .
    op PatBracket _  : Pat    -> Bracket [ctor] .
    op TypeBracket _ : Type   -> Bracket [ctor] .
    op DeclBracket _ : HsList -> Bracket [ctor] .

***(
    -- | A template haskell splice expression
    data Splice
        = IdSplice String       -- ^ variable splice: @$var@
        | ParenSplice Exp       -- ^ parenthesised expression splice: @$(/exp/)@
***)

    sort Splice .
    op IdSplice _    : HsString -> Splice [ctor] .
    op ParenSplice _ : Exp      -> Splice [ctor] .

***(
    -- | The safety of a foreign function call.
    data Safety
        = PlayRisky         -- ^ unsafe
        | PlaySafe Bool     -- ^ safe ('False') or threadsafe ('True')
***)

    sort Safety .
    op PlayRisky  :      -> Safety [ctor] .
    op PlaySafe _ : Bool -> Safety [ctor] .

***(
    -- | The calling convention of a foreign function call.
    data CallConv
        = StdCall
        | CCall
***)

    sort CallConv .
    op StdCall : -> CallConv [ctor] .
    op CCall   : -> CallConv [ctor] .

***(
    -- | A top level options pragma, preceding the module header.
    data ModulePragma
        = LanguagePragma   SrcLoc [Name]    -- ^ LANGUAGE pragma
        | OptionsPragma    SrcLoc (Maybe Tool) String
                            -- ^ OPTIONS pragma, possibly qualified with a tool, e.g. OPTIONS_GHC
        | AnnModulePragma  SrcLoc Annotation
                            -- ^ ANN pragma with module scope
***)

    sort ModulePragma .
    op LanguagePragma _ _  : SrcLoc HsList           -> ModulePragma [ctor] .
    op OptionsPragma _ _ _ : SrcLoc HsMaybe HsString -> ModulePragma [ctor] .
    op AnnModulePragma _ _ : SrcLoc Annotation       -> ModulePragma [ctor] .

***(
    -- | Activation clause of a RULES pragma.
    data Activation
        = AlwaysActive
        | ActiveFrom  Int
        | ActiveUntil Int
***)

    sort Activation .
    op AlwaysActive  :       -> Activation [ctor] .
    op ActiveFrom _  : HsInt -> Activation [ctor] .
    op ActiveUntil _ : HsInt -> Activation [ctor] .

***(
    -- | The body of a RULES pragma.
    data Rule
        = Rule String Activation (Maybe [RuleVar]) Exp Exp
***)

    sort Rule .
    op Rule _ _ _ _ _ : HsString Activation HsMaybe Exp Exp -> Rule [ctor] .

***(
    -- | Variables used in a RULES pragma, optionally annotated with types
    data RuleVar
        = RuleVar Name
        | TypedRuleVar Name Type
***)

    sort RuleVar .
    op RuleVar _        : Name      -> RuleVar [ctor] .
    op TypedRuleVar _ _ : Name Type -> RuleVar [ctor] .

***(
    -- | Warning text to optionally use in the module header of e.g.
    --   a deprecated module.
    data WarningText
        = DeprText String
        | WarnText String
***)

    sort WarningText .
    op DeprText _ : HsString -> WarningText [ctor] .
    op WarnText _ : HsString -> WarningText [ctor] .

***(
    -- | A pattern, to be matched against a value.
    data Pat
        = PVar Name                     -- ^ variable
        | PLit Literal                  -- ^ literal constant
        | PNeg Pat                      -- ^ negated pattern
        | PNPlusK Name Integer          -- ^ n+k pattern
        | PInfixApp Pat QName Pat       -- ^ pattern with an infix data constructor
        | PApp QName [Pat]              -- ^ data constructor and argument patterns
        | PTuple [Pat]                  -- ^ tuple pattern
        | PList [Pat]                   -- ^ list pattern
        | PParen Pat                    -- ^ parenthesized pattern
        | PRec QName [PatField]         -- ^ labelled pattern, record style
        | PAsPat Name Pat               -- ^ @\@@-pattern
        | PWildCard                     -- ^ wildcard pattern: @_@
        | PIrrPat Pat                   -- ^ irrefutable pattern: @~/pat/@
        | PatTypeSig SrcLoc Pat Type    -- ^ pattern with type signature
        | PViewPat Exp Pat              -- ^ view patterns of the form @(/exp/ -> /pat/)@
        | PRPat [RPat]                  -- ^ regular list pattern
        | PXTag SrcLoc XName [PXAttr] (Maybe Pat) [Pat]
                                        -- ^ XML element pattern
        | PXETag SrcLoc XName [PXAttr] (Maybe Pat)
                                        -- ^ XML singleton element pattern
        | PXPcdata String               -- ^ XML PCDATA pattern
        | PXPatTag Pat                  -- ^ XML embedded pattern
        | PXRPats [RPat]                -- ^ XML regular list pattern
        | PExplTypeArg QName Type       -- ^ Explicit generics style type argument e.g. @f {| Int |} x = ...@
        | PQuasiQuote String String     -- ^ quasi quote patter: @[$/name/| /string/ |]@
        | PBangPat Pat                  -- ^ strict (bang) pattern: @f !x = ...@
***)

    sort Pat .
    op PVar _           : Name                               -> Pat [ctor] .
    op PLit _           : Literal                            -> Pat [ctor] .
    op PNeg _           : Pat                                -> Pat [ctor] .
    op PNPlusK _ _      : Name HsInteger                     -> Pat [ctor] .
    op PInfixApp _ _ _  : Pat QName Pat                      -> Pat [ctor] .
    op PApp _ _         : QName HsList                       -> Pat [ctor] .
    op PTuple _         : HsList                             -> Pat [ctor] .
    op PList _          : HsList                             -> Pat [ctor] .
    op PParen _         : Pat                                -> Pat [ctor] .
    op PRec _ _         : QName HsList                       -> Pat [ctor] .
    op PAsPat _ _       : Name Pat                           -> Pat [ctor] .
    op PWildCard        :                                    -> Pat [ctor] .
    op PIrrPat _        : Pat                                -> Pat [ctor] .
    op PatTypeSig _ _ _ : SrcLoc Pat Type                    -> Pat [ctor] .
    op PViewPat _ _     : Exp Pat                            -> Pat [ctor] .
    op PRPat _          : HsList                             -> Pat [ctor] .
    op PXTag _ _ _ _ _  : SrcLoc XName HsList HsMaybe HsList -> Pat [ctor] .
    op PXETag _ _ _ _   : SrcLoc XName HsList HsMaybe        -> Pat [ctor] .
    op PXPcdata _       : HsString                           -> Pat [ctor] .
    op PXPatTag _       : Pat                                -> Pat [ctor] .
    op PXRPats _        : HsList                             -> Pat [ctor] .
    op PExplTypeArg _ _ : QName Type                         -> Pat [ctor] .
    op PQuasiQuote _ _  : HsString HsString                  -> Pat [ctor] .
    op PBangPat _       : Pat                                -> Pat [ctor] .

***(
    -- | An XML attribute in a pattern.
    data PXAttr = PXAttr XName Pat
***)

    sort PXAttr .
    op PXAttr _ _ : XName Pat -> PXAttr [ctor] .

***(
    -- | A regular pattern operator.
    data RPatOp
        = RPStar    -- ^ @*@ = 0 or more
        | RPStarG   -- ^ @*!@ = 0 or more, greedy
        | RPPlus    -- ^ @+@ = 1 or more
        | RPPlusG   -- ^ @+!@ = 1 or more, greedy
        | RPOpt     -- ^ @?@ = 0 or 1
        | RPOptG    -- ^ @?!@ = 0 or 1, greedy
***)

    sort RPatOp .
    op RPStar  : -> RPatOp [ctor] .
    op RPStarG : -> RPatOp [ctor] .
    op RPPlus  : -> RPatOp [ctor] .
    op RPPlusG : -> RPatOp [ctor] .
    op RPOpt   : -> RPatOp [ctor] .
    op RPOptG  : -> RPatOp [ctor] .

***(
    -- | An entity in a regular pattern.
    data RPat
        = RPOp RPat RPatOp      -- ^ operator pattern, e.g. pat*
        | RPEither RPat RPat    -- ^ choice pattern, e.g. (1 | 2)
        | RPSeq [RPat]          -- ^ sequence pattern, e.g. (| 1, 2, 3 |)
        | RPGuard Pat [Stmt]    -- ^ guarded pattern, e.g. (| p | p < 3 |)
        | RPCAs Name RPat       -- ^ non-linear variable binding, e.g. (foo\@:(1 | 2))*
        | RPAs Name RPat        -- ^ linear variable binding, e.g. foo\@(1 | 2)
        | RPParen RPat          -- ^ parenthesised pattern, e.g. (2*)
        | RPPat Pat             -- ^ an ordinary pattern
***)

    sort RPat .
    op RPOp _ _     : RPat RPatOp -> RPat [ctor] .
    op RPEither _ _ : RPat RPat   -> RPat [ctor] .
    op RPSeq _      : HsList      -> RPat [ctor] .
    op RPGuard _ _  : Pat HsList  -> RPat [ctor] .
    op RPCAs _ _    : Name RPat   -> RPat [ctor] .
    op RPAs _ _     : Name RPat   -> RPat [ctor] .
    op RPParen _    : RPat        -> RPat [ctor] .
    op RPPat _      : Pat         -> RPat [ctor] .

***(
    -- | An /fpat/ in a labeled record pattern.
    data PatField
        = PFieldPat QName Pat       -- ^ ordinary label-pattern pair
        | PFieldPun Name            -- ^ record field pun
        | PFieldWildcard            -- ^ record field wildcard
***)

    sort PatField .
    op PFieldPat _ _  : QName Pat -> PatField [ctor] .
    op PFieldPun _    : Name      -> PatField [ctor] .
    op PFieldWildcard :           -> PatField [ctor] .

***(
    -- | A statement, representing both a /stmt/ in a @do@-expression,
    --   an ordinary /qual/ in a list comprehension, as well as a /stmt/
    --   in a pattern guard.
    data Stmt
        = Generator SrcLoc Pat Exp
                            -- ^ a generator: /pat/ @<-@ /exp/
        | Qualifier Exp     -- ^ an /exp/ by itself: in a @do@-expression,
                            --   an action whose result is discarded;
                            --   in a list comprehension and pattern guard,
                            --   a guard expression
        | LetStmt Binds     -- ^ local bindings
        | RecStmt [Stmt]    -- ^ a recursive binding group for arrows
***)

    sort Stmt .
    op Generator _ _ _ : SrcLoc Pat Exp -> Stmt [ctor] .
    op Qualifier _     : Exp            -> Stmt [ctor] .
    op LetStmt _       : Binds          -> Stmt [ctor] .
    op RecStmt _       : HsList         -> Stmt [ctor] .

***(
    -- | A general /transqual/ in a list comprehension,
    --   which could potentially be a transform of the kind
    --   enabled by TransformListComp.
    data QualStmt
        = QualStmt     Stmt         -- ^ an ordinary statement
        | ThenTrans    Exp          -- ^ @then@ /exp/
        | ThenBy       Exp Exp      -- ^ @then@ /exp/ @by@ /exp/
        | GroupBy      Exp          -- ^ @then@ @group@ @by@ /exp/
        | GroupUsing   Exp          -- ^ @then@ @group@ @using@ /exp/
        | GroupByUsing Exp Exp      -- ^ @then@ @group@ @by@ /exp/ @using@ /exp/
***)

    sort QualStmt .
    op QualStmt _       : Stmt    -> QualStmt [ctor] .
    op ThenTrans _      : Exp     -> QualStmt [ctor] .
    op ThenBy _ _       : Exp Exp -> QualStmt [ctor] .
    op GroupBy _        : Exp     -> QualStmt [ctor] .
    op GroupUsing _     : Exp     -> QualStmt [ctor] .
    op GroupByUsing _ _ : Exp Exp -> QualStmt [ctor] .

***(
    -- | An /fbind/ in a labeled construction or update expression.
    data FieldUpdate
        = FieldUpdate QName Exp     -- ^ ordinary label-expresion pair
        | FieldPun Name             -- ^ record field pun
        | FieldWildcard             -- ^ record field wildcard
***)

    sort FieldUpdate .
    op FieldUpdate _ _ : QName Exp -> FieldUpdate [ctor] .
    op FieldPun _      : Name      -> FieldUpdate [ctor] .
    op FieldWildcard   :           -> FieldUpdate [ctor] .

***(
    -- | An /alt/ alternative in a @case@ expression.
    data Alt
        = Alt SrcLoc Pat GuardedAlts Binds
***)

    sort Alt .
    op Alt _ _ _ _ : SrcLoc Pat GuardedAlts Binds -> Alt [ctor] .

***(
    -- | The right-hand sides of a @case@ alternative,
    --   which may be a single right-hand side or a
    --   set of guarded ones.
    data GuardedAlts
        = UnGuardedAlt Exp          -- ^ @->@ /exp/
        | GuardedAlts  [GuardedAlt] -- ^ /gdpat/
***)

    sort GuardedAlts .
    op UnGuardedAlt _ : Exp    -> GuardedAlts [ctor] .
    op GuardedAlts _  : HsList -> GuardedAlts [ctor] .

***(
    -- | A guarded case alternative @|@ /stmts/ @->@ /exp/.
    data GuardedAlt
        = GuardedAlt SrcLoc [Stmt] Exp
***)

    sort GuardedAlt .
    op GuardedAlt _ _ _ : SrcLoc HsList Exp -> GuardedAlt [ctor] .

    --- Everything is subsorted to K, that is, underlying it all everything is really monosorted
    subsorts HsString HsInt Char HsInteger HsRational Boxed SrcLoc ModuleName SpecialCon QName Name IPName QOp Op CName Module ExportSpec ImportDecl ImportSpec Assoc Deriving Decl Annotation DataOrNew Binds IPBind Match QualConDecl ConDecl GadtDecl ClassDecl InstDecl BangType Rhs GuardedRhs Type TyVarBind Kind FunDep Context Asst Literal Exp XName XAttr Bracket Splice Safety CallConv ModulePragma Activation Rule RuleVar WarningText Pat PXAttr RPatOp RPat PatField Stmt QualStmt FieldUpdate Alt GuardedAlts GuardedAlt < K .

    --- End of syntax, rest of this file is the remainder of Language.Haskell.Exts.Syntax

***(
    -----------------------------------------------------------------------------
    -- Builtin names.

    prelude_mod, main_mod :: ModuleName
    prelude_mod = ModuleName "Prelude"
    main_mod    = ModuleName "Main"

    main_name :: Name
    main_name = Ident "main"

    unit_con_name :: QName
    unit_con_name = Special UnitCon

    tuple_con_name :: Boxed -> Int -> QName
    tuple_con_name b i = Special (TupleCon b (i+1))

    list_cons_name :: QName
    list_cons_name = Special Cons

    unboxed_singleton_con_name :: QName
    unboxed_singleton_con_name = Special UnboxedSingleCon

    unit_con :: Exp
    unit_con = Con unit_con_name

    tuple_con :: Boxed -> Int -> Exp
    tuple_con b i = Con (tuple_con_name b i)

    unboxed_singleton_con :: Exp
    unboxed_singleton_con = Con (unboxed_singleton_con_name)

    as_name, qualified_name, hiding_name, minus_name, bang_name, dot_name, star_name :: Name
    as_name        = Ident "as"
    qualified_name = Ident "qualified"
    hiding_name    = Ident "hiding"
    minus_name     = Symbol "-"
    bang_name      = Symbol "!"
    dot_name       = Symbol "."
    star_name      = Symbol "*"

    export_name, safe_name, unsafe_name, threadsafe_name, stdcall_name, ccall_name :: Name
    export_name     = Ident "export"
    safe_name       = Ident "safe"
    unsafe_name     = Ident "unsafe"
    threadsafe_name = Ident "threadsafe"
    stdcall_name    = Ident "stdcall"
    ccall_name      = Ident "ccall"

    unit_tycon_name, fun_tycon_name, list_tycon_name, unboxed_singleton_tycon_name :: QName
    unit_tycon_name = unit_con_name
    fun_tycon_name  = Special FunCon
    list_tycon_name = Special ListCon
    unboxed_singleton_tycon_name = Special UnboxedSingleCon

    tuple_tycon_name :: Boxed -> Int -> QName
    tuple_tycon_name b i = tuple_con_name b i

    unit_tycon, fun_tycon, list_tycon, unboxed_singleton_tycon :: Type
    unit_tycon = TyCon unit_tycon_name
    fun_tycon  = TyCon fun_tycon_name
    list_tycon = TyCon list_tycon_name
    unboxed_singleton_tycon = TyCon unboxed_singleton_tycon_name

    tuple_tycon :: Boxed -> Int -> Type
    tuple_tycon b i = TyCon (tuple_tycon_name b i)
***)

endm
