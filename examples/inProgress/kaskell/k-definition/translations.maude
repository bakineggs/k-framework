***(
    The Translations from high-level haskell into a lower-level haskell, as layed out in the Expressions section
    of the Haskell Report
***)

mod HASKELL-TRANSLATIONS is
    including HASKELL-SYNTAX .

***(
The integer literal i is equivalent to fromInteger i, where fromInteger is a method in class Num (see Section 6.4.1).

The floating point literal f is equivalent to fromRational (n Ratio.% d), where fromRational is a method in class Fractional and Ratio.% constructs a rational from two integers, as defined in the Ratio library. The integers n and d are chosen so that n/d = f.
***)

***(
The following identity holds:
\ p1 ... pn -> e 	= 	\ x1 ... xn -> case (x1, ..., xn) of (p1, ..., pn) -> e
where the xi are new identifiers.
***)

***(
The following identities hold:
e1 op e2 	= 	(op) e1 e2
-e 	= 	negate (e)
***)

***(
The following identities hold:
(op e) 	= 	\ x -> x op e
(e op) 	= 	\ x -> e op x
where op is a binary operator, e is an expression, and x is a variable that does not occur free in e.
***)

***(
The following identity holds:
if e1 then e2 else e3 	= 	case e1 of { True -> e2 ; False -> e3 }
where True and False are the two nullary constructors from the type Bool, as defined in the Prelude. The type of e1 must be Bool; e2 and e3 must have the same type, which is also the type of the entire conditional expression.
***)

***(
The following identity holds:
[e1, ..., ek] 	= 	e1 : (e2 : ( ... (ek : [])))
where : and [] are constructors for lists, as defined in the Prelude (see Section 6.1.3). The types of e1 through ek must all be the same (call it t), and the type of the overall expression is [t] (see Section 4.1.2).
***)

***(
(e1, ..., ek)  for k>=2 is an instance of a k-tuple as defined in the Prelude, and requires no translation. If t1 through tk are the types of e1 through ek, respectively, then the type of the resulting tuple is (t1, ..., tk)  (see Section 4.1.2).
***)

***(
(e) is equivalent to e.
***)

***(
Arithmetic sequences satisfy these identities:
[ e1.. ] 	= 	enumFrom e1
[ e1,e2.. ] 	= 	enumFromThen e1 e2
[ e1..e3 ] 	= 	enumFromTo e1 e3
[ e1,e2..e3 ] 	= 	enumFromThenTo e1 e2 e3
where enumFrom, enumFromThen, enumFromTo, and enumFromThenTo are class methods in the class Enum as defined in the Prelude (see Figure 6.1).
***)

***(
List comprehensions satisfy these identities, which may be used as a translation into the kernel:
[  e | True ] 	= 	[e]
[  e | q ] 	= 	[ e | q, True ]
[  e | b, Q ] 	= 	if b then [  e | Q ] else []
[  e | p <- l, Q ] 	= 	let ok p = [  e | Q ]
		    ok _ = []
		in concatMap ok l
[  e | let decls, Q ] 	= 	let decls in [  e | Q ]
where e ranges over expressions, p over patterns, l over list-valued expressions, b over boolean expressions, decls over declaration lists, q over qualifiers, and Q over sequences of qualifiers. ok is a fresh variable. The function concatMap, and boolean value True, are defined in the Prelude.
***)

***(
Translation:
The dynamic semantics of the expression let { d1 ; ... ; dn } in e0 are captured by this translation: After removing all type signatures, each declaration di is translated into an equation of the form pi = ei, where pi and ei are patterns and expressions respectively, using the translation in Section 4.4.3. Once done, these identities hold, which may be used as a translation into the kernel:
let {p1=e1;  ... ; pn=en} in e0 	=	let (~p1, ... ,~pn) = (e1, ... ,en) in e0
let p = e1  in  e0 	=	case e1 of ~p -> e0
		where no variable in p appears free in e1
let p = e1  in  e0 	=	let p = fix ( \ ~p -> e1) in e0
where fix is the least fixpoint operator. Note the use of the irrefutable patterns ~p. This translation does not preserve the static semantics because the use of case precludes a fully polymorphic typing of the bound variables. The static semantics of the bindings in a let expression are described in Section 4.4.3.
***)

***(
Do expressions satisfy these identities, which may be used as a translation into the kernel, after eliminating empty stmts:
do {e} 	=	e
do {e;stmts} 	=	e >> do {stmts}
do {p <- e; stmts} 	=	let ok p = do {stmts}
		    ok _ = fail "..."
		  in e >>= ok
do {let decls; stmts} 	=	let decls in do {stmts}
The ellipsis "..." stands for a compiler-generated error message, passed to fail, preferably giving some indication of the location of the pattern-match failure; the functions >>, >>=, and fail are operations in the class Monad, as defined in the Prelude; and ok is a fresh identifier.
***)

***(
A field label f introduces a selector function defined as:
f x 	=	case x of { C1 p11 ...p1k  ->  e1 ; ... ; Cn pn1 ...pnk  ->  en }
where C1 ...Cn are all the constructors of the datatype containing a field labeled with f, pij is y when f labels the jth component of Ci or _ otherwise, and ei is y when some field in Ci has a label of f or undefined otherwise.
***)

***(
In the binding f = v, the field f labels v.
C { bs } 	=	C (pickC1 bs undefined) ...(pickCk bs undefined)
where k is the arity of C.

The auxiliary function pickCi bs d is defined as follows:

    If the ith component of a constructor C has the field label f, and if f=v appears in the binding list bs, then pickCi bs d is v. Otherwise, pickCi bs d is the default value d.
***)

***(
Using the prior definition of pick,
e { bs } 	=	case e of
		        C1 v1 ... vk1 -> C1 (pickC11 bs v1) ... (pickC1k1 bs vk1)
		             ...
		        Cj v1 ... vkj -> Cj (pickCj1 bs v1) ... (pickCjkj bs vkj)
		        _ -> error "Update error"
where {C1,...,Cj} is the set of constructors containing all labels in bs, and ki is the arity of Ci.
***)

***(
e :: t 	 = 	 let {  v :: t;  v = e } in v
***)




endm
