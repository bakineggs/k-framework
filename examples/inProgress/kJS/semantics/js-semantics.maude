load ../syntax/js-syntax.maude

mod JS-COERCION
	is protecting JS-SYNTAX + PL-BUILTINS . 
	
	      op #asFloat(_) :  JS -> JS   [metadata "location(js-semantics.k:6)"] .  op #asInt(_) :  JS -> JS   [metadata "location(js-semantics.k:6)"] .  op #asBool(_) :  JS -> JS   [metadata "location(js-semantics.k:6)"] .  op #asString(_) :  JS -> JS [metadata "location(js-semantics.k:6)"] . 
	
	eq #asFloat (#n (F:Float))		=  #n (F) [metadata "location(js-semantics.k:8)"] .
	eq #asFloat (#n (I:Int)) 		=  #n (Int2Float(I)) [metadata "location(js-semantics.k:9)"] .
	eq #asFloat (#s (S:String))	=  #n (String2Float(S)) [metadata "location(js-semantics.k:10)"] .
	eq #asFloat (Other:JS) 		=  #asInt (Other) [metadata "location(js-semantics.k:11)"] .
	
	eq #asInt (#n (F:Float)) 		=  #n (Float2Int(F)) [metadata "location(js-semantics.k:13)"] .
	eq #asInt (#n (I:Int)) 		=  #n (I) [metadata "location(js-semantics.k:14)"] .
	eq #asInt (#s (S:String)) 		=  #n (String2Int(S)) [metadata "location(js-semantics.k:15)"] .
	eq #asInt (#b (true)) 			=  #n (1) [metadata "location(js-semantics.k:16)"] .
	eq #asInt (#b (false)) 		=  #n (0) [metadata "location(js-semantics.k:17)"] .
	eq #asInt (#null ) 			=  #n (0) [metadata "location(js-semantics.k:18)"] .
	eq #asInt (#undefined ) 		=  #n (0) [metadata "location(js-semantics.k:19)"] .
	eq #asInt ( ? )					=  #nan  [metadata "location(js-semantics.k:20)"] .
	
	eq #asBool (#b (B:Bool)) 		=  #b (B) [metadata "location(js-semantics.k:22)"] .
	eq #asBool (#n (0)) 			=  #b (false) [metadata "location(js-semantics.k:23)"] .
	eq #asBool (#nan ) 			=  #b (false) [metadata "location(js-semantics.k:24)"] .
	eq #asBool (#null ) 			=  #b (false) [metadata "location(js-semantics.k:25)"] .
	eq #asBool (#undefined ) 		=  #b (false) [metadata "location(js-semantics.k:26)"] .
	eq #asBool (#s ("")) 			=  #b (false) [metadata "location(js-semantics.k:27)"] .
	eq #asBool ( ? ) 				=  #b (true) [metadata "location(js-semantics.k:28)"] .

	eq #asString (#s (S)) =  #s (S) [metadata "location(js-semantics.k:30)"] .
	eq #asString (#n (F:Float)) =  #s (Float2String(F)) [metadata "location(js-semantics.k:31)"] .
	eq #asString (#n (I:Int)) =  #s (Int2String(I)) [metadata "location(js-semantics.k:32)"] .
	eq #asString (#infinity (I)) =  if I >=Int  0 then #s ("Infinity") else #s ("-Infinity") fi [metadata "location(js-semantics.k:33)"] .
	eq #asString (#nan ) =  #s ("NaN") [metadata "location(js-semantics.k:34)"] .
	eq #asString (#b (true)) =  #s ("true") [metadata "location(js-semantics.k:35)"] .
	eq #asString (#b (false)) =  #s ("false") [metadata "location(js-semantics.k:36)"] .
	eq #asString (#null ) =  #s ("null") [metadata "location(js-semantics.k:37)"] .
	eq #asString (#undefined ) =  #s ("undefined") [metadata "location(js-semantics.k:38)"] .
	eq #asString ( ? ) =  #s ("[object Object]") [metadata "location(js-semantics.k:39)"] .
	
var S :  String . var F :  Float . var Other :  JS . var I :  Int . var B :  Bool .  endm 

mod JS-TYPEOF 
	is protecting JS-SYNTAX . 

	eq #typeof (#undefined ) 			=  #s ("undefined") [metadata "location(js-semantics.k:46)"] .
	eq #typeof (#null ) 				=  #s ("object") [metadata "location(js-semantics.k:47)"] .
	eq #typeof (#b ( ? )) 				=  #s ("boolean") [metadata "location(js-semantics.k:48)"] .
	eq #typeof (Numeric:JSNumeric) 	=  #s ("number") [metadata "location(js-semantics.k:49)"] .
	eq #typeof (#s ( ? )) 				=  #s ("string") [metadata "location(js-semantics.k:50)"] .
	eq #typeof (#function ( ? ,  ? ,  ? ,  ? ))	=  #s ("function") [metadata "location(js-semantics.k:51)"] .
	eq #typeof (#o ( ? )) 				=  #s ("object") [metadata "location(js-semantics.k:52)"] .

	
	
	
	
	
	
	
	
var Numeric :  JSNumeric .  endm	

mod JS-IDENTITY
	is protecting JS-SYNTAX + JS-COERCION . 













	eq #identical (#nan , #nan )				=  #b (false) [metadata "location(js-semantics.k:79)"] .
	eq #identical (V1, V1) 					=  #b (true) [metadata "location(js-semantics.k:80)"] .
	
	eq #identical (#null , #undefined )			=  #b (true) [metadata "location(js-semantics.k:82)"] .
	eq #identical (#undefined , #null )			=  #b (true) [metadata "location(js-semantics.k:83)"] .
	eq #identical (#zero ( ? ), #zero ( ? ))		=  #b (true) [metadata "location(js-semantics.k:84)"] .
	eq #identical (#n (F:Float), #n (I:Int)) 	=  #identical (#n (F), #asFloat (#n (I))) [metadata "location(js-semantics.k:85)"] .
	eq #identical (#n (I), #n (F)) 				=  #identical (#asFloat (#n (I)), #n (F)) [metadata "location(js-semantics.k:86)"] .
	
	eq #identical (V1:JS, V2:JS) 				=  #b (false) [metadata "location(js-semantics.k:88)"] .

	eq #notIdentical (V1, V2) 				=  #neg (#identical (V1, V2)) [metadata "location(js-semantics.k:90)"] .	
var F :  Float . var I :  Int . var V2 :  JS . var V1 :  JS .  endm

mod JS-ARITHMETIC
	is protecting JS-SYNTAX + JS-COERCION + PL-BUILTINS . 

	      op arith(_,_,_) :  String  JS  JS -> JS 
				  [metadata "location(js-semantics.k:96)"] .  op #getInfinity(_,_) :  Int  Int -> JS 
				  [metadata "location(js-semantics.k:97)"] .  op #getZero(_,_) :  Int  Int -> JS [metadata "location(js-semantics.k:98)"] . 
	
	      op asSignValue(_) :  JS -> Int [metadata "location(js-semantics.k:100)"] . 
	
	eq asSignValue(F:Float) 	=  	if F >=Float  0.0 then 1 else -1 fi [metadata "location(js-semantics.k:102)"] .
	eq asSignValue(I:Int) 	=  	if I >=Int  0 then 1 else -1 fi [metadata "location(js-semantics.k:103)"] .

	eq #getInfinity (I1:Int, I2:Int) 	=  #infinity (I1 *Int  I2) [metadata "location(js-semantics.k:105)"] .
	eq #getZero (I1, I2) 		=  #zero (I1 *Int  I2) [metadata "location(js-semantics.k:106)"] .

	eq #n (0) 	=  #zero (0) [metadata "location(js-semantics.k:108)"] .
	eq #n (0.0) 	=  #zero (1) [metadata "location(js-semantics.k:109)"] .

	
	eq #neg (#n (F1)) =  #n (-Float (F1)) [metadata "location(js-semantics.k:112)"] .
	eq #neg (#n (I1)) =  #n (-Int (I1)) [metadata "location(js-semantics.k:113)"] .
	eq #neg (Other:JS) =  #neg (#asFloat (Other)) [metadata "location(js-semantics.k:114)"] .
	eq #plus (Numeric:JSNumeric) =  Numeric [metadata "location(js-semantics.k:115)"] .
	eq #plus (Other) =  #asFloat (Other) [metadata "location(js-semantics.k:116)"] .
	
	eq #div (Left:JS, Right:JS) =  arith("div", Left, Right) [metadata "location(js-semantics.k:118)"] .
	eq #mod (Left, Right) =  arith("mod", Left, Right) [metadata "location(js-semantics.k:119)"] .
	eq #mul (Left, Right) =  arith("mul", Left, Right) [metadata "location(js-semantics.k:120)"] .
	eq #add (Left, Right) =  arith("add", Left, Right) [metadata "location(js-semantics.k:121)"] .
	eq #sub (Left, Right) =  arith("sub", Left, Right) [metadata "location(js-semantics.k:122)"] .
		
	


	eq arith("div", #n (F1:Float), #n (F2:Float)) =  #n (F1 /Float  F2) [metadata "location(js-semantics.k:127)"] .
	eq arith("mod", #n (F1), #n (F2)) =  #n (F1 %Float  F2) [metadata "location(js-semantics.k:128)"] .
	eq arith("mul", #n (F1), #n (F2)) =  #n (F1 *Float  F2) [metadata "location(js-semantics.k:129)"] .
	eq arith("add", #n (F1), #n (F2)) =  #n (F1 +Float  F2) [metadata "location(js-semantics.k:130)"] .
	eq arith("sub", #n (F1), #n (F2)) =  #n (_-Float_(F1, F2)) [metadata "location(js-semantics.k:131)"] .

	eq arith("div", #n (I1:Int), #n (I2:Int)) =  #n (I1 /Int  I2) [metadata "location(js-semantics.k:133)"] .
	eq arith("mod", #n (I1), #n (I2)) =  #n (I1 %Int  I2) [metadata "location(js-semantics.k:134)"] .
	eq arith("mul", #n (I1), #n (I2)) =  #n (I1 *Int  I2) [metadata "location(js-semantics.k:135)"] .
	eq arith("add", #n (I1), #n (I2)) =  #n (I1 +Int  I2) [metadata "location(js-semantics.k:136)"] .
	eq arith("sub", #n (I1), #n (I2)) =  #n (_-Int_(I1, I2)) [metadata "location(js-semantics.k:137)"] .



	
	
	
	
		
	eq arith("add", #s (S1:String), #s (S2:String)) =  #s (_+String_(S1, S2)) [metadata "location(js-semantics.k:146)"] .

	eq arith("add", #s (S1), Right) 	=  arith("add", #s (S1), #asString (Right)) [metadata "location(js-semantics.k:148)"] .
	eq arith("add", Left, #s (S2)) 	=  arith("add", #asString (Left), #s (S2)) [metadata "location(js-semantics.k:149)"] .



	eq arith(OpId:String, #nan , Right:JS) =  #nan  [metadata "location(js-semantics.k:153)"] .
	eq arith(OpId, Left:JS, #nan ) =  #nan  [metadata "location(js-semantics.k:154)"] .


	eq arith("div", #infinity ( ? ), #infinity ( ? )) =  #nan  [metadata "location(js-semantics.k:157)"] .	
	eq arith("div", Num:JSNumber, #infinity (I2)) =  #getZero (asSignValue(Num), I2) [metadata "location(js-semantics.k:158)"] .
	eq arith("div", #infinity (I1), Num) =  #getInfinity (I1, asSignValue(Num)) [metadata "location(js-semantics.k:159)"] .

	eq arith("mod", #infinity ( ? ),  ? ) =  #nan  [metadata "location(js-semantics.k:161)"] .
	eq arith("mod", Num, #infinity (I2)) =  Num [metadata "location(js-semantics.k:162)"] .

	eq arith("mul", #infinity (I1), #infinity (I2)) =  #getInfinity (I1, I2) [metadata "location(js-semantics.k:164)"] .
	eq arith("mul", #zero ( ? ), #infinity ( ? )) =  #nan  [metadata "location(js-semantics.k:165)"] . 
	eq arith("mul", #infinity ( ? ), #zero ( ? )) =  #nan  [metadata "location(js-semantics.k:166)"] . 
	eq arith("mul", Num, #infinity (I2)) =  #getInfinity (asSignValue(Num), I2) [metadata "location(js-semantics.k:167)"] .
	eq arith("mul", #infinity (I1), Num) =  #getInfinity (I1, asSignValue(Num)) [metadata "location(js-semantics.k:168)"] .

	eq arith("add", #infinity (I1), #infinity (I2)) =  #nan  [metadata "location(js-semantics.k:170)"] .
	eq arith("add", Num, #infinity (I2)) =  #infinity (I2) [metadata "location(js-semantics.k:171)"] .
	
	eq arith("sub", #infinity (I1), #infinity (I1)) =  #nan  [metadata "location(js-semantics.k:173)"] .
	eq arith("sub", Num, #infinity (I2)) =  #infinity (-Int (I2)) [metadata "location(js-semantics.k:174)"] .

	eq arith(OpId, #infinity (I1), Num) =  #infinity (I1) [metadata "location(js-semantics.k:176)"] .
	

	
	eq arith("div", #zero ( ? ), #zero ( ? )) =  #nan  [metadata "location(js-semantics.k:180)"] .
	eq arith("div", #zero (I1), Num) =  #getZero (I1, asSignValue(Num)) [metadata "location(js-semantics.k:181)"] .
	eq arith("div", Num, #zero (I2)) =  #getInfinity (asSignValue(Num), I2) [metadata "location(js-semantics.k:182)"] .

	eq arith("mod", #zero (I1),  ? ) =  #zero (I1) [metadata "location(js-semantics.k:184)"] .
	eq arith("mod",  ? , #zero ( ? )) =  #nan  [metadata "location(js-semantics.k:185)"] .


	eq arith(OpId, #n (F1), Right) 	=  arith(OpId, #n (F1), #asFloat (Right)) [metadata "location(js-semantics.k:188)"] .
	eq arith(OpId, Left, #n (F2)) 	=  arith(OpId, #asFloat (Left), #n (F2)) [metadata "location(js-semantics.k:189)"] .

	eq arith(OpId, #n (I1), Right) 	=  arith(OpId, #n (I1), #asInt (Right)) [metadata "location(js-semantics.k:191)"] .
	eq arith(OpId, Left, #n (I2)) 	=  arith(OpId, #asInt (Left), #n (I2)) [metadata "location(js-semantics.k:192)"] .
	
	
	
	
var S1 :  String . var F :  Float . var Right :  JS . var OpId :  String . var I2 :  Int . var Other :  JS . var S2 :  String . var F2 :  Float . var Num :  JSNumber . var I :  Int . var Numeric :  JSNumeric . var F1 :  Float . var Left :  JS . var I1 :  Int .  endm

mod JS-LOGIC
	is protecting JS-SYNTAX + JS-COERCION + PL-BUILTINS . 

	      op logic(_,_,_) :  String  JS  JS -> JS [metadata "location(js-semantics.k:202)"] . 

	eq #not (#b (B1)) 								=  #b (notBool(B1)) [metadata "location(js-semantics.k:204)"] .
	eq #not (Other:JS) 							=  #not (#asBool (Other)) [metadata "location(js-semantics.k:205)"] .
	
	eq #and (Left:JS, Right:JS) 					=  logic("and", Left, Right) [metadata "location(js-semantics.k:207)"] .
	eq #or (Left, Right)  						=  logic("or", Left, Right) [metadata "location(js-semantics.k:208)"] .
	
	eq logic("and", #b (B1:Bool), #b (B2:Bool)) 	=  #b (B1 andBool B2) [metadata "location(js-semantics.k:210)"] .
	eq logic("or", #b (B1), #b (B2)) 				=  #b (B1 orBool B2) [metadata "location(js-semantics.k:211)"] .

	eq logic(OpId:String, #b (B1), Right) 		=  logic(OpId, #b (B1), #asBool (Right)) [metadata "location(js-semantics.k:213)"] .
	eq logic(OpId, Left, #b (B2)) 				=  logic(OpId, #asBool (Left), #b (B2)) [metadata "location(js-semantics.k:214)"] .
var Right :  JS . var B1 :  Bool . var OpId :  String . var Other :  JS . var B2 :  Bool . var Left :  JS .  endm
	

mod JS-SEMANTICS
	is including 
	  JS-COERCION 
	+ JS-TYPEOF
	+ JS-IDENTITY
	+ JS-ARITHMETIC
	+ JS-LOGIC .
endm
