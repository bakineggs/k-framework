load ../json/json.maude
 
 mod JS-SYNTAX 
 	is including JSON .
 
 	  sort JSValue .    op #b(_) :  Bool -> JSValue   [metadata "location(js-syntax.k:6)"] .  op #n(_) :  Numeric -> JSValue   [metadata "location(js-syntax.k:6)"] .  op #s(_) :  String -> JSValue   [metadata "location(js-syntax.k:6)"] .  op #r(_) :  String -> JSValue 
 		  [metadata "location(js-syntax.k:6)"] .  op #undefined :  -> JSValue   [metadata "location(js-syntax.k:7)"] .  op #null :  -> JSValue   [metadata "location(js-syntax.k:7)"] .  op #nan :  -> JSValue   [metadata "location(js-syntax.k:7)"] .  op #this :  -> JSValue   [metadata "location(js-syntax.k:7)"] .  op .none :  -> JSValue [metadata "location(js-syntax.k:7)"] .  
 	
 	     
 			 subsort JSValue <  JS .
 		  	 op #nop :  -> JS
 			 [metadata "location(js-syntax.k:11)"] .  op #id(_) :  String -> JS 
 		  [metadata "location(js-syntax.k:12)"] .  op #staticAccess(_,_) :  JS  JS -> JS  [  metadata "location(js-syntax.k:13) strict"] . 		
 		   op #dynamicAccess(_,_) :  JS  JS -> JS  [  metadata "location(js-syntax.k:14) strict"] . 		
 		   op #invocation(_,_) :  JS  JS -> JS  [  metadata "location(js-syntax.k:15) strict"] . 	
 		
 		   op #new(_) :  List{JS} -> JS  [  metadata "location(js-syntax.k:17) strict"] .					
 		
 		   op #inc(_,_) :  JS  Bool -> JS  [  metadata "location(js-syntax.k:19) strict"] .				
 		   op #dec(_,_) :  JS  Bool -> JS  [  metadata "location(js-syntax.k:20) strict"] .				
 		
 		   op #delete(_) :  JS -> JS  [  metadata "location(js-syntax.k:22) strict"] .				
 		
 		   op #typeof(_) :  JS -> JS  [  metadata "location(js-syntax.k:24) strict"] .				
 		   op #not(_) :  JS -> JS  [  metadata "location(js-syntax.k:25) strict"] .				
 		   op #neg(_) :  JS -> JS  [  metadata "location(js-syntax.k:26) strict"] . 				
 		   op #plus(_) :  JS -> JS  [  metadata "location(js-syntax.k:27) strict"] . 				
 		
 		   op #mul(_,_) :  JS  JS -> JS  [  metadata "location(js-syntax.k:29) strict"] . 			
 		   op #div(_,_) :  JS  JS -> JS  [  metadata "location(js-syntax.k:30) strict"] . 			
 		   op #mod(_,_) :  JS  JS -> JS  [  metadata "location(js-syntax.k:31) strict"] . 			
 		
 		   op #add(_,_) :  JS  JS -> JS  [  metadata "location(js-syntax.k:33) strict"] .			
 		   op #sub(_,_) :  JS  JS -> JS  [  metadata "location(js-syntax.k:34) strict"] . 			
 		
 		   op #lt(_,_) :  JS  JS -> JS  [  metadata "location(js-syntax.k:36) strict"] . 			
 		   op #lte(_,_) :  JS  JS -> JS  [  metadata "location(js-syntax.k:37) strict"] . 			
 		   op #gt(_,_) :  JS  JS -> JS  [  metadata "location(js-syntax.k:38) strict"] . 			
 		   op #gte(_,_) :  JS  JS -> JS  [  metadata "location(js-syntax.k:39) strict"] . 			
 		   op #in(_,_) :  JS  JS -> JS  [  metadata "location(js-syntax.k:40) strict"] .				
 		   op #instanceof(_,_) :  JS  JS -> JS  [  metadata "location(js-syntax.k:41) strict"] . 	
 		
 		   op #sameAs(_,_) :  JS  JS -> JS  [  metadata "location(js-syntax.k:43) strict"] . 		
 		   op #notSameAs(_,_) :  JS  JS -> JS  [  metadata "location(js-syntax.k:44) strict"] . 		
 		   op #identical(_,_) :  JS  JS -> JS  [  metadata "location(js-syntax.k:45) strict"] . 		
 		   op #notIdentical(_,_) :  JS  JS -> JS  [  metadata "location(js-syntax.k:46) strict"] . 	
 		
 		   op #and(_,_) :  JS  JS -> JS  [  metadata "location(js-syntax.k:48) strict"] . 			
 		
 		   op #or(_,_) :  JS  JS -> JS  [  metadata "location(js-syntax.k:50) strict"] . 			
 		
 		   op #ternary(_,_,_) :  JS  JS  JS -> JS  [  metadata "location(js-syntax.k:52) strict(1)"] .	
 		
 		
 		   op #assignment(_,_,_) :  JS  JS  JS -> JS  [  metadata "location(js-syntax.k:55) strict"] .  
 		
 		   op #arrayLit(_) :  List{JS} -> JS  [  metadata "location(js-syntax.k:57) strict"] .				
 		   op #objectLit(_) :  List{JS} -> JS  [  metadata "location(js-syntax.k:58) strict"] .			
 		   op #propertyLit(_,_) :  JS  JS -> JS  [  metadata "location(js-syntax.k:59) strict"] .	
 		
 		   op #return(_) :  JS -> JS  [  metadata "location(js-syntax.k:61) strict"] .				
 		   op #break(_) :  JS -> JS  [  metadata "location(js-syntax.k:62) strict"] . 				
 		   op #continue(_) :  JS -> JS  [  metadata "location(js-syntax.k:63) strict"] . 				
 		   op #throw(_) :  JS -> JS  [  metadata "location(js-syntax.k:64) strict"] .				
 		   op #label(_,_) :  String  JS -> JS 
 		
 		  [metadata "location(js-syntax.k:65)"] .  op #exp(_) :  JS -> JS  [  metadata "location(js-syntax.k:67) strict"] .				
 		
 		   op #stmts(_) :  List{JS} -> JS 		
 		  [metadata "location(js-syntax.k:69)"] .  op #block(_) :  List{JS} -> JS
 		  [metadata "location(js-syntax.k:70)"] .  op #comma(_) :  List{JS} -> JS
 		  [metadata "location(js-syntax.k:71)"] .  op #ifElse(_,_,_) :  JS  JS  JS -> JS  [  metadata "location(js-syntax.k:72) strict(1)"] .	
 		   op #try(_,_,_) :  JS  List{JS}  JS -> JS  [  metadata "location(js-syntax.k:73) strict"] .	
 		   op #catch(_,_) :  JS  JS -> JS
 		
 		  [metadata "location(js-syntax.k:74)"] .  op #case(_,_) :  JS  JS -> JS  [  metadata "location(js-syntax.k:76) strict(1)"] .	 	
 		   op #default(_) :  JS -> JS 					
 		
 		  [metadata "location(js-syntax.k:77)"] .  op #switch(_,_,_) :  JS  List{JS}  Int -> JS  [  metadata "location(js-syntax.k:79) strict(1)"] .	
 			
 		   op #for(_,_,_,_) :  JS  JS  JS  JS -> JS  [  metadata "location(js-syntax.k:81) strict(1)"] .		
 			
 		   op #forIn(_,_,_) :  JS  JS  JS -> JS  [  metadata "location(js-syntax.k:83) strict(2)"] .
 			
 		   op #while(_,_) :  JS  JS -> JS
 			
 		  [metadata "location(js-syntax.k:85)"] .  op #do(_,_) :  JS  JS -> JS
 			
 			
 		  [metadata "location(js-syntax.k:87)"] .  op #labelledStmt(_,_) :  JS  JS -> JS	
 			
 		
 		  [metadata "location(js-syntax.k:90)"] .  op #varDeclarations(_) :  List{JS} -> JS  [  metadata "location(js-syntax.k:93) strict"] .
 		
 		   op #function(_,_,_,_) :  Int  JS  List{JS}  JS -> JS
 			
 			
 
 		  [metadata "location(js-syntax.k:95)"] .  op #program(_) :  List{JS} -> JS [metadata "location(js-syntax.k:99)"] . 
 			
  subsorts JSProperties Builtin JSProperty JsonTerminal JsonLiteral < K . endm
 			
 			
