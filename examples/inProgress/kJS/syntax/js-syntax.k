load ../json/json.k

kmod JS-SYNTAX 
	is including JSON

	syntax JSValue ::= b( Bool ) | n( Numeric ) | s( String )
	
	syntax JS ::= 
			JSValue
		| 	nop
		|	id( String ) | label( String )
		| staticAccess( JS , JS ) [strict] 		--- Exp . Name
		| dynamicAccess( JS , JS ) [strict] 		--- Exp [ Exp ]
		| invocation( JS , List{JS} ) [strict] 	--- Exp ( CommaList{Argument} )
		
		| new( JS ) [strict]					--- new InvocationExp
		
		| delete( JS ) [strict]				--- delete TargetExp
		
		| typeof ( JS ) [strict]				--- typeof Exp
		| not ( JS ) [strict]				--- ! Exp
		| neg ( JS ) [strict] 				--- - Exp
		| plus ( JS ) [strict] 				--- + Exp
		
		| mul ( JS , JS ) [strict] 			--- Exp * Exp
		| div ( JS , JS ) [strict] 			--- Exp / Exp
		| mod ( JS , JS ) [strict] 			--- Exp % Exp
		
		| add ( JS , JS ) [strict]			--- Exp + Exp
		| sub ( JS , JS ) [strict] 			--- Exp - Exp
		
		| lt ( JS , JS ) [strict] 			--- Exp < Exp
		| lte ( JS , JS ) [strict] 			--- Exp <= Exp
		| gt ( JS , JS ) [strict] 			--- Exp > Exp
		| gte ( JS , JS ) [strict] 			--- Exp >= Exp
		| in ( JS , JS ) [strict]				--- Exp in Exp
		| instanceof ( JS , JS ) [strict] 	--- Exp instanceof Exp
		
		| sameAs ( JS , JS ) [strict] 		--- Exp == Exp
		| notSameAs ( JS , JS ) [strict] 		--- Exp != Exp
		| identical ( JS , JS ) [strict] 		--- Exp === Exp
		| notIdentical ( JS , JS ) [strict] 	--- Exp !== Exp
		
		| and ( JS , JS ) [strict] 			--- Exp && Exp
		
		| or ( JS , JS ) [strict] 			--- Exp || Exp
		
		| ternary ( JS , JS , JS ) [strict(1)]	--- Exp ? Exp : Exp
		
		
		| assignment ( JS , JS ) [strict]		--- TargetExp = Exp
		| assignment ( JS , JS , JS ) [strict] --- TargetExp AssignmentOp Exp
		
		| arrayLit ( List{JS} ) [strict]				--- [ CommaList{Exp} ]
		| objectLit ( List{JS} ) [strict]			--- { CommaList{Property} }
		| propertyLit ( JS , JS ) [strict]	--- PropertyName : Exp
		
		| return ( JS ) [strict]				--- return Exp | .
		| break ( JS ) [strict] 				--- break Label | .
		| throw ( JS ) [strict]				--- throw Exp

		| stmts ( List{JS} ) [strict]		--- List{Stmt}
		| ifElse ( JS , JS , JS ) [strict(1)]	--- if (Exp) Block Block
		| tryCatch ( JS , JS , JS ) [strict]	--- try Block catch (Exp) Block
		
		| case ( List{JS} , JS ) [strict(1)]	 
			--- case List{CaseMatch} : List{Stmt}
		| switch ( JS , List{JS} , JS ) [strict(1)]	
			--- switch (Exp) { List{Case} ; DefaultCase }
		| for ( JS , JS , JS , JS ) [strict(1)]		
			--- for ( Inits ; Cond ; Incrs ) Block
		| forIn ( JS , JS , JS ) [strict(2)]
			--- for ( Name in Exp ) Block
		| while ( JS , JS )
			--- while ( Exp ) Block
		| do ( JS , JS )
			--- do Block while ( Exp )
			
		| labelledStmt ( JS , JS )	
			--- Label : Stmt
		
		| varDeclarations ( List{JS} ) [strict]
		
		| function ( JS , List{JS} , JS )
			--- function ( Parameters ) { Program }
			--- function Name ( Parameters ) { Program }

		| program ( JS )
			--- List{VarDeclarationStmt} List{FunctionStmt} List{ExecutionStmt}
endkm
			
			
