load ../../../tools/../k-prelude

mod JS is including K-TECHNIQUE .
including K-CONFIG .
including K-POLYMORPHIC-VARIABLES .
including K-WHERE .
including K-DESTRUCTORS .
including PL-BOOL .
including K-PROPER .
including K-WRAPPERS-LABELS .
including MAUDE-IF-THEN-ELSE .
including K-STRICTNESS .
op Bag_ : List{K}-> Bag .
op List_ : List{K}-> List .
op _in_ : BagItem Bag -> Bool .
op _in_ : K Bag -> Bool .
op _in_ : K Set -> Bool .
op _in_ : SetItem Set -> Bool .
op _|->_ : List{K}List{K}-> Map .
op inKList : K K -> Bool .
op keys_ : Map -> Set .
op lengthList_ : List -> Nat .
op substList`{K`}Label`(_`,_`,_`) : List{K}KLabel KLabel -> List{K}.
op $hasMapping : Map K -> Bool[metadata "latex(renameTo \$hasMapping\mybracket{_,_})"].
op 'headList`{K`}_ : -> KProperLabel[metadata "arity 1 latex(renameTo head\subscript{{\scriptstyle\it{}List{K}}}mybracket{_})"].
op 'substKLabel : -> KProperLabel[metadata "arity 3"].
op Set_ : List{K}-> Set[metadata "latex(renameTo {\it{}Set}\mybracket{_})"].
op _-Bag_ : Bag Bag -> Bag[metadata "latex(renameTo _-\subscript{{\scriptstyle\it{}Bag}}_)"].
op _-Set_ : Set Set -> Set[metadata "latex(renameTo _-\subscript{{\scriptstyle\it{}Set}}_)"].
op _`(_`) : Map K -> K[prec 0].
op _`(_`) : Map List{K}-> List{K}[prec 0].
op _`[_/_`] : Map K K -> Map[prec 0].
op _`[_/_`] : Map List{K}List{K}-> Map[prec 0].
op _`[_`] : Map Map -> Map[prec 0].
op _`[undef/_`] : Map List{K}-> Map[metadata "latex(renameTo _[\ensuremath{\bot\;}/_])"].
op lengthList`{K`}_ : List{K}-> Nat[metadata "latex(renameTo length\subscript{{\scriptstyle\it{}List{K}}}mybracket{_})"].
op run`(_`) : KLabel -> Bag[metadata "location(js.k:32)"].
op run`(_`,_`) : KLabel List{K}-> Bag[metadata "location(js.k:32)"].
op tailList`{K`}_ : NeList{K}-> List{K}[metadata "latex(renameTo tail\subscript{{\scriptstyle\it{}List{K}}}mybracket{_})"].
eq $hasMapping(__(M:Map,_|->_(D:K,R:K)),D:K)= true .
eq Bag_(.List`{K`})=(.).Bag .
eq Bag_(_`,`,_(K:K,Ks:List{K}))= __(BagItem(K:K),Bag_(Ks:List{K})).
eq List_(.List`{K`})=(.).List .
eq List_(_`,`,_(K:K,Ks:List{K}))= __(ListItem(K:K),List_(Ks:List{K})).
eq Set_(.List`{K`})=(.).Set .
eq Set_(_`,`,_(K:K,Ks:List{K}))= __(SetItem(K:K),Set_(Ks:List{K})).
eq _-Bag_(.,Bag:Bag)=(.).Bag .
eq _-Bag_(__(Bag:Bag,BagItem:BagItem),Bag':Bag)= if_then_else_fi(_in_(BagItem:BagItem,Bag':Bag),_-Bag_(Bag:Bag,Bag':Bag),__(BagItem:BagItem,_-Bag_(Bag:Bag,Bag':Bag))).
eq _-Set_(.,Set:Set)=(.).Set .
eq _-Set_(__(Set:Set,SetItem:SetItem),Set':Set)= if_then_else_fi(_in_(SetItem:SetItem,Set':Set),_-Set_(Set:Set,Set':Set),__(SetItem:SetItem,_-Set_(Set:Set,Set':Set))).
eq _`(_`)('headList`{K`}_,_`(_`)(kList("wklist_"),_`,`,_(K:K,Ks:List{K})))= K:K .
eq _`(_`)('substKLabel,_`,`,_(.,_`,`,_(_`(_`)(wklabel_(Label1:KLabel),.List`{K`}),_`(_`)(wklabel_(Label2:KLabel),.List`{K`}))))=(.).K .
eq _`(_`)('substKLabel,_`,`,_(_`(_`)(Label1:KLabel,Ks:List{K}),_`,`,_(_`(_`)(wklabel_(Label1:KLabel),.List`{K`}),_`(_`)(wklabel_(Label2:KLabel),.List`{K`}))))= _`(_`)(Label2:KLabel,substList`{K`}Label`(_`,_`,_`)(Ks:List{K},Label1:KLabel,Label2:KLabel)).
eq _`(_`)('substKLabel,_`,`,_(_~>_(K1:NeK,_~>_(K2:NeK,K:K)),_`,`,_(_`(_`)(wklabel_(Label1:KLabel),.List`{K`}),_`(_`)(wklabel_(Label2:KLabel),.List`{K`}))))= _~>_(_`(_`)('substKLabel,_`,`,_(K1:NeK,_`,`,_(_`(_`)(wklabel_(Label1:KLabel),.List`{K`}),_`(_`)(wklabel_(Label2:KLabel),.List`{K`})))),_~>_(_`(_`)('substKLabel,_`,`,_(K2:NeK,_`,`,_(_`(_`)(wklabel_(Label1:KLabel),.List`{K`}),_`(_`)(wklabel_(Label2:KLabel),.List`{K`})))),_`(_`)('substKLabel,_`,`,_(K:K,_`,`,_(_`(_`)(wklabel_(Label1:KLabel),.List`{K`}),_`(_`)(wklabel_(Label2:KLabel),.List`{K`})))))).
eq _`(_`)(Map:Map,.List`{K`})= .List`{K`} .
eq _`(_`)(Map:Map,_`,`,_(K1:K,NList1:NeList{K}))= _`,`,_(_`(_`)(Map:Map,K1:K),_`(_`)(Map:Map,NList1:NeList{K})).
eq _`(_`)(__(Map:Map,_|->_(K1:K,K2:K)),K1:K)= K2:K .
eq _`[_/_`](Map:Map,K2:K,_`,`,_(K1:K,NList1:NeList{K}))= _`[_/_`](_`[_/_`](Map:Map,K2:K,K1:K),K2:K,NList1:NeList{K}).
eq _`[_/_`](Map:Map,List:List{K},.List`{K`})= Map:Map .
eq _`[_/_`](Map:Map,_`,`,_(K1:K,NList1:NeList{K}),_`,`,_(K2:K,NList2:NeList{K}))= _`[_/_`](_`[_/_`](Map:Map,K1:K,K2:K),NList1:NeList{K},NList2:NeList{K}).
eq _`[_/_`](__(Map:Map,_|->_(K1:K,K2:K)),K2':K,K1:K)= __(Map:Map,_|->_(K1:K,K2':K)).
eq _`[_`](__(Map:Map,_|->_(K1:K,K2:K)),__(Map':Map,_|->_(K1:K,K2':K)))= __(_|->_(K1:K,K2':K),_`[_`](Map:Map,Map':Map)).
eq _`[undef/_`](Map:Map,.List`{K`})= Map:Map .
eq _`[undef/_`](Map:Map,_`,`,_(K1:K,NList1:NeList{K}))= _`[undef/_`](_`[undef/_`](Map:Map,K1:K),NList1:NeList{K}).
eq _`[undef/_`](__(Map:Map,_|->_(K1:K,K2:K)),K1:K)= Map:Map .
eq _in_(BagItem:BagItem,__(Bag:Bag,BagItem:BagItem))= true .
eq _in_(K:K,__(Bag:Bag,BagItem(K:K)))= true .
eq _in_(K:K,__(Set:Set,SetItem(K:K)))= true .
eq _in_(SetItem:SetItem,__(Set:Set,SetItem:SetItem))= true .
eq _|->_(.List`{K`},List:List{K})=(.).Map .
eq _|->_(_`,`,_(K1:K,NList1:NeList{K}),K2:K)= __(_|->_(K1:K,K2:K),_|->_(NList1:NeList{K},K2:K)).
eq _|->_(_`,`,_(K1:K,NList1:NeList{K}),_`,`,_(K2:K,NList2:NeList{K}))= __(_|->_(K1:K,K2:K),_|->_(NList1:NeList{K},NList2:NeList{K})).
eq inKList(K:K,_~>_(K1:K,_~>_(K:K,K2:K)))= true .
eq keys_(.)=(.).Set .
eq keys_(__(Map:Map,_|->_(K1:K,K2:K)))= __(SetItem(K1:K),keys_(Map:Map)).
eq lengthList_(.)= 0 .
eq lengthList_(__(LItem:ListItem,List:List))= sNat_(lengthList_(List:List)).
eq lengthList`{K`}_(.List`{K`})= 0 .
eq lengthList`{K`}_(_`,`,_(K:K,Ks:List{K}))= sNat_(lengthList`{K`}_(Ks:List{K})).
eq substList`{K`}Label`(_`,_`,_`)(.List`{K`},Label1:KLabel,Label2:KLabel)= .List`{K`} .
eq substList`{K`}Label`(_`,_`,_`)(_`,`,_(K:K,Ks:List{K}),Label1:KLabel,Label2:KLabel)= _`,`,_(_`(_`)('substKLabel,_`,`,_(K:K,_`,`,_(_`(_`)(wklabel_(Label1:KLabel),.List`{K`}),_`(_`)(wklabel_(Label2:KLabel),.List`{K`})))),substList`{K`}Label`(_`,_`,_`)(Ks:List{K},Label1:KLabel,Label2:KLabel)).
eq tailList`{K`}_(_`,`,_(K:K,Ks:List{K}))= Ks:List{K}.
ceq _`(_`)('substKLabel,_`,`,_(_`(_`)(Label:KLabel,Ks:List{K}),_`,`,_(_`(_`)(wklabel_(Label1:KLabel),.List`{K`}),_`(_`)(wklabel_(Label2:KLabel),.List`{K`}))))= _`(_`)(Label:KLabel,substList`{K`}Label`(_`,_`,_`)(Ks:List{K},Label1:KLabel,Label2:KLabel))if _=/=Bool_(Label1:KLabel,Label:KLabel)= true .
eq $hasMapping(M:Map,D:K)= false[owise].
eq _`[_/_`](Map:Map,K2:K,K1:K)= __(Map:Map,_|->_(K1:K,K2:K))[owise].
eq _`[_`](Map:Map,Map':Map)= __(Map:Map,Map':Map)[owise].
eq _in_(BagItem:BagItem,Bag:Bag)= false[owise].
eq _in_(K:K,Bag:Bag)= false[owise].
eq _in_(K:K,Set:Set)= false[owise].
eq _in_(SetItem:SetItem,Set:Set)= false[owise].
eq inKList(K:K,K':K)= false[owise].
endm
