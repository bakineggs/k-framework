fmod VALUES is inc INT .
  sorts NatSet NatList .  subsorts Nat < NatSet NatList .
  op empty : -> NatSet .  op nil : -> NatList .
  op __ : NatSet NatSet -> NatSet [assoc comm id: empty] .
  op _,_ : NatList NatList -> NatList [assoc id: nil] .
endfm

fmod MAPS is inc VALUES .
  sorts Map MapMap .
  op _|->_ : Nat Nat -> Map [prec 15] .
  op __ : Map Map -> Map [assoc comm] .
  op _|->_ : Nat Map -> MapMap [prec 15] .
  op __ : MapMap MapMap -> MapMap [assoc comm] .
  op _[_] : Map NatSet -> [Map] [prec 3] .
  var M : Map .  var N V : Nat .  var Vs : NatSet .
  eq (M V |-> N)[V Vs] = (M V |-> s(N))[Vs] .
  eq M[empty] = M .
endfm

fmod CELLS-SQUARES is inc MAPS .
  sorts Cell CellSet .  subsort Cell < CellSet .
  ops ({_,_,_}) ([_,_,_]) : Nat Nat Nat -> Cell .
  op empty : -> CellSet .
  op __ : CellSet CellSet -> CellSet [assoc comm id: empty] .
  sorts Square SquareSet .  subsort Square < SquareSet .
  op sq : Nat Nat Map CellSet -> Square .
  op empty : -> SquareSet .
  op __ : SquareSet SquareSet -> SquareSet [assoc comm id: empty] .
  op _++_ : CellSet Cell -> CellSet .
  vars X Y V : Nat .  var Vs : NatSet .  var Cs : [CellSet] .
  eq ({X,Y,Vs} Cs) ++ {X,Y,V} = {X,Y,V Vs} Cs .
  eq Cs ++ {X,Y,V} = Cs {X,Y,V} [owise] .
endfm

fmod BOOKKEEPING is inc CELLS-SQUARES .
  op remove : Nat Nat NatSet -> Cell .
  ops (lines_) (columns_) : MapMap -> Square .
  vars I J X Y V N Nl Nc : Nat .  var Vs : NatSet .  vars M Ml Mc : Map .  vars L C : MapMap .  var Cs : [CellSet] .
--- remove
  eq sq(I,J,(M V |-> s(N)),(Cs remove(X,Y,V Vs))) lines(L X |-> (Ml V |-> s(Nl))) columns(C Y |-> (Mc V |-> s(Nc)))
   = sq(I,J,(M V |->   N ), Cs remove(X,Y,  Vs) ) lines(L X |-> (Ml V |->   Nl )) columns(C Y |-> (Mc V |->   Nc )) .
  eq remove(X,Y,empty) = empty .
endfm

fmod INIT is inc BOOKKEEPING .
  sort Sudoku .

  op initMap : -> Map .
  eq initMap = 1 |-> 0   2 |-> 0   3 |-> 0   4 |-> 0   5 |-> 0   6 |-> 0   7 |-> 0   8 |-> 0   9 |-> 0 .
  op initMapMap : -> MapMap .
  eq initMapMap = 0 |-> initMap   1 |-> initMap   2 |-> initMap   3 |-> initMap   4 |-> initMap
                  5 |-> initMap   6 |-> initMap   7 |-> initMap   8 |-> initMap .
  op candidates : -> NatSet .
  eq candidates = 1 2 3 4 5 6 7 8 9 .

  op initConfig : -> SquareSet .

  eq initConfig = 
        sq(0,0,initMap,empty)   sq(0,1,initMap,empty)   sq(0,2,initMap,empty)
        sq(1,0,initMap,empty)   sq(1,1,initMap,empty)   sq(1,2,initMap,empty)
        sq(2,0,initMap,empty)   sq(2,1,initMap,empty)   sq(2,2,initMap,empty)
        lines(initMapMap) columns(initMapMap) .


  vars N V I J X Y Nl Nc : Nat .  var Vl : NatList .  var Vs : NatSet .  var Cfg : [SquareSet] .
  vars M Ml Mc : Map .  vars L C : MapMap .  var Cs : [CellSet] .

  op init : NatList -> Sudoku .
  op top : SquareSet -> Sudoku .
  op init-aux : NatList Nat SquareSet -> SquareSet .
  eq init(Vl) = top(init-aux(Vl,0,initConfig)) .

  eq init-aux(nil,N,Cfg) = Cfg .
 ceq init-aux((V,Vl),N,Cfg) = init-aux(Vl,s(N),addToCfg(I,J,X,Y,if V == 0 then candidates else V fi,Cfg))
  if X := N quo 9 /\ Y := N rem 9 /\ I := X quo 3 /\ J := Y quo 3 .


  op addToCfg : Nat Nat Nat Nat NatSet SquareSet -> SquareSet .

  eq addToCfg(I,J,X,Y,Vs, Cfg (sq(I,J,M,Cs) lines(L X |-> Ml) columns(C Y |-> Mc)))
   = Cfg sq(I,J,M[Vs],Cs [X,Y,Vs]) lines(L X |-> Ml[Vs]) columns(C Y |-> Mc[Vs]) .

  eq top(sq(I,J,M,[X,Y,Vs] Cs) Cfg)
   = top(sq(I,J,M,{X,Y,Vs} Cs) Cfg) .

  ops easy escargot1 escargot2 : -> Sudoku .

  eq easy = init(
0,0,4, 7,2,0, 9,0,0,
0,3,9, 0,0,8, 0,0,5,
0,0,1, 5,0,6, 0,0,4,

0,4,0, 0,1,0, 5,2,0,
0,2,8, 0,5,0, 1,7,0,
0,1,6, 0,3,0, 0,9,0,

4,0,0, 9,0,1, 3,0,0,
1,0,0, 3,0,0, 8,4,0,
0,0,7, 0,8,5, 6,0,0
) .

  eq escargot1 = init(
8,5,0, 0,0,2, 4,0,0,
7,2,0, 0,0,0, 0,0,9,
0,0,4, 0,0,0, 0,0,0,

0,0,0, 1,0,7, 0,0,2,
3,0,5, 0,0,0, 9,0,0,
0,4,0, 0,0,0, 0,0,0,

0,0,0, 0,8,0, 0,7,0,
0,1,7, 0,0,0, 0,0,0,
0,0,0, 0,3,6, 0,4,0
) .

  eq escargot2 = init(
1,0,0, 0,0,7, 0,9,0,
0,3,0, 0,2,0, 0,0,8,
0,0,9, 6,0,0, 5,0,0,

0,0,5, 3,0,0, 9,0,0,
0,1,0, 0,8,0, 0,0,2,
6,0,0, 0,0,4, 0,0,0,

3,0,0, 0,0,0, 0,1,0,
0,4,0, 0,0,0, 0,0,7,
0,0,7, 0,0,0, 3,0,0
) .

endfm



mod SUDDOKU is inc INIT .
  vars X Y X1 Y1 X2 Y2 V V' I J I1 J1 I2 J2 : Nat .  var Vs : NatSet . vars Cs Cs1 Cs2 : [CellSet] .
  vars M M1 M2 Ml Mc : Map .  vars L C : MapMap .  var Cfg : [SquareSet] .
--- naked single: square
  eq {X1,Y1,V} {X2,Y2,V Vs}
   = {X1,Y1,V} {X2,Y2,  Vs} remove(X2,Y2,V) .

--- naked single: line
  eq sq(I,J1,M1,{X,Y1,V} Cs1) sq(I,J2,M2,{X,Y2,V Vs} Cs2)
   = sq(I,J1,M1,{X,Y1,V} Cs1) sq(I,J2,M2,{X,Y2,  Vs} Cs2 remove(X,Y2,V)) .

--- naked single: column
  eq sq(I1,J,M1,{X1,Y,V} Cs1) sq(I2,J,M2,{X2,Y,V Vs} Cs2)
   = sq(I1,J,M1,{X1,Y,V} Cs1) sq(I2,J,M2,{X2,Y,  Vs} Cs2 remove(X2,Y,V)) .

--- hidden single: square
  eq sq(I,J,(M V |-> 1), {X,Y,V V' Vs} Cs)
   = sq(I,J,(M V |-> 1), {X,Y,V      } Cs remove(X,Y,V' Vs)) .

--- hidden single: line
  eq sq(I,J,M,{X,Y,V V' Vs} Cs) lines(L X |-> (Ml V |-> 1))
   = sq(I,J,M,{X,Y,V      } Cs remove(X,Y,V' Vs)) lines(L X |-> (Ml V |-> 1)) .

--- hidden single:  column
  eq sq(I,J,M,{X,Y,V V' Vs} Cs) columns(C Y |-> (Mc V |-> 1))
   = sq(I,J,M,{X,Y,V      } Cs remove(X,Y,V' Vs)) columns(C Y |-> (Mc V |-> 1)) .

  rl {X,Y,V V'} => {X,Y,V} remove(X,Y,V') .
---  rl {X,Y,V V' Vs} => {X,Y,V} remove(X,Y,V' Vs) .

---  op error : -> [Sudoku] .
---  eq top(Cfg sq(I,J,M,{X,Y,empty} Cs)) = error .
endm

---rew easy .
---rew escargot1 .
search [1] escargot1 =>! S:Sudoku .
---rew escargot2 .
search [1] escargot2 =>! S:Sudoku .

q
