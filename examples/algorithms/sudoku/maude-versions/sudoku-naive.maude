fmod NATS is inc INT .
  sorts NatSet NatList .  subsorts Nat < NatSet NatList .
  op empty : -> NatSet .  op nil : -> NatList .
  op __ : NatSet NatSet -> NatSet [assoc comm id: empty] .
  op _,_ : NatList NatList -> NatList [assoc id: nil] .
  op all : -> NatSet .
  eq all = 1 2 3 4 5 6 7 8 9 .
endfm

fmod CELL is inc NATS .
  sorts Cell CellSet .  subsort Cell < CellSet .
  op {_,_,_} : Nat Nat Nat -> Cell .
  op __ : CellSet CellSet -> CellSet [assoc comm] .
  vars N V : Nat .  var Vl : NatList .
  op mkCells : Nat NatList -> CellSet .
  eq mkCells(N,V) = {(N quo 9) + 1, (N rem 9) + 1, if V == 0 then all else V fi} .
  eq mkCells(N,(V,Vl)) = mkCells(N,V) mkCells(N + 1, Vl) .
endfm

mod SUDDOKU is inc CELL .
  vars X Y X1 Y1 X2 Y2 V V' : Nat .  var Vs : NatSet .
  op # : Nat Nat -> Bool .  eq #(X,Y) = (X + -1) quo 3 == (Y + -1) quo 3 .
--- ceq {X1,Y1,V} {X2,Y2,V Vs} = {X1,Y1,V} {X2,Y2,Vs} if X1 == X2 or Y1 == Y2 or #(X1,X2) and #(Y1,Y2) .
  eq {X,Y1,V} {X,Y2,V Vs} = {X,Y1,V} {X,Y2,Vs} .
  eq {X1,Y,V} {X2,Y,V Vs} = {X1,Y,V} {X2,Y,Vs} .
 ceq {X1,Y1,V} {X2,Y2,V Vs} = {X1,Y1,V} {X2,Y2,Vs} if #(X1,X2) and #(Y1,Y2) .

  rl {X,Y,V V'} => {X,Y,V} .
endm

mod RUN is inc SUDDOKU .
  sort Suddoku .

  op [_] : NatList -> Suddoku .
  op {_} : CellSet -> Suddoku .

  ops easy escargot : -> Suddoku .

  var Cs : [CellSet] .  vars X Y : Nat .  var Vl : NatList .

  eq [Vl] = {mkCells(0,Vl)} .

  op error : -> [Suddoku] .
  eq {{X,Y,empty} Cs} = error .

  eq easy = [
0,0,4, 7,2,0, 9,0,0,
0,3,9, 0,0,8, 0,0,5,
0,0,1, 5,0,6, 0,0,4,

0,4,0, 0,1,0, 5,2,0,
0,2,8, 0,5,0, 1,7,0,
0,1,6, 0,3,0, 0,9,0,

4,0,0, 9,0,1, 3,0,0,
1,0,0, 3,0,0, 8,4,0,
0,0,7, 0,8,5, 6,0,0
] .

  eq escargot = [
8,5,0, 0,0,2, 4,0,0,
7,2,0, 0,0,0, 0,0,9,
0,0,4, 0,0,0, 0,0,0,

0,0,0, 1,0,7, 0,0,2,
3,0,5, 0,0,0, 9,0,0,
0,4,0, 0,0,0, 0,0,0,

0,0,0, 0,8,0, 0,7,0,
0,1,7, 0,0,0, 0,0,0,
0,0,0, 0,3,6, 0,4,0
] .

endm

rew easy .
search easy =>! S:Suddoku .

rew escargot .
search escargot =>! S:Suddoku .

q
