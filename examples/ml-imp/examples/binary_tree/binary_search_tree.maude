mod P-BINARY-SEARCH-TREE is inc IMP-SYNTAX + MATHEMATICAL-DOMAIN + BINARY-TREE-HP .
  ops insert newNode root t : -> Id .
  ops ?root : -> ?Int .
  ops root0 t0 v0 : -> FreeInt .
  ops ?T : -> ?Tree .
  ops T : -> FreeTree .
  ops HeapFrame : -> FreeMapItem .

  op pBstInsert : -> Decl .
  eq pBstInsert = (
int insert(root,,, t)
// pre < config > < env > root |-> root0 t |-> t0 </ env > < heap > tree(root0)(T) t0 |-> v0 : node (t0 +Int 1) |-> 0 : left (t0 +Int 2) |-> 0 : right HeapFrame </ heap > < form > isBst(T) </ form > </ config >
// post < config > < env > root |-> root0 t |-> t0 </ env > < heap > tree(?root)(?T) HeapFrame </ heap > < form > isBst(?T) /\ tree2mset(?T) === tree2mset(T) U {| v0 |} /\ ?return(?root) </ form > </ config >
{
  if (root != NULL) { 
    if (* t <= * root) { *(root + 1) = insert(*(root + 1),,, t); }
    else { *(root + 2) = insert(*(root + 2),,, t); }
    return root ;
  }
  return t ;
}

  ) .
endm

***(
int newNode(v)
// pre < config > < env > root |-> root0 </ env > < heap > tree(root0)(T) HeapFrame </ heap > < form > TrueFormula </ form > </ config >
// post < config > < env > root |-> root0 </ env > < heap > tree(root0)(mirror(T)) HeapFrame </ heap > < form > TrueFormula </ form > </ config >
{
  Node* node = (Node *)malloc(sizeof(Node));
  node->val = v;
  node->left=node->right=NULL;
  return node;
}

int bst-insert(Tree *t, int v) {
  while (NULL != *t)
    if (v > (*t)->val) t = &(*t)->right; else t = &(*t)->left;
  *t = newNode(v);
  return *t;
}
***)

