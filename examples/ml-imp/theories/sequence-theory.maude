mod MATHEMATICAL-SEQUENCE is inc MATHEMATICAL-INT .
  sorts SeqPatternExistential SeqFunctionExistential SeqUniversal NeSeq Seq SeqSymbolic NeSeqSymbolic . 
  subsort NeSeq < Seq .
  subsort NeSeqSymbolic Seq < SeqSymbolic .
  subsort SeqPatternExistential SeqFunctionExistential SeqUniversal NeSeq < NeSeqSymbolic .
  subsort SeqPatternExistential < MathObjPatternExistential .
  subsort SeqFunctionExistential < MathObjFunctionExistential .
  subsort SeqUniversal < MathObjUniversal .
  subsort Seq < MathObj .
  subsort SeqSymbolic < MathObjSymbolic .
 
  op SeqPatternExistential : Nat -> SeqPatternExistential .
  op SeqFunctionExistential : Nat -> SeqFunctionExistential .
  op skolem : Nat SeqPatternExistential -> SeqUniversal [ditto] .
  op co-skolem : SeqUniversal -> SeqFunctionExistential [ditto] .

  op epsilon : -> Seq .
  op `[_`] : List{MathObjSymbolic} -> NeSeqSymbolic .
  op `[_`] : MathObjPatternExistential -> SeqPatternExistential [ditto] .
  op `[_`] : MathObjFunctionExistential -> SeqFunctionExistential [ditto] .
  op `[_`] : MathObjUniversal -> SeqUniversal [ditto] .
  op `[_`] : MathObj -> NeSeq [ditto] .
  op `[_`] : MathObjSymbolic -> NeSeqSymbolic [ditto] .
  op _:::_ : SeqSymbolic SeqSymbolic -> SeqSymbolic [assoc id: epsilon] .
  op _:::_ : NeSeqSymbolic SeqSymbolic -> NeSeqSymbolic [ditto] .
  op _:::_ : SeqSymbolic NeSeqSymbolic -> NeSeqSymbolic [ditto] .
  ---op _:::_ : SeqPatternExistential SeqPatternExistential -> SeqPatternExistential [ditto] .
  ---op _:::_ : SeqFunctionExistential SeqFunctionExistential -> SeqFunctionExistential [ditto] .
  ---op _:::_ : SeqUniversal SeqUniversal -> SeqUniversal [ditto] .
  op _:::_ : Seq Seq -> Seq [ditto] .
  op _:::_ : NeSeq Seq -> NeSeq [ditto] .
  op _:::_ : Seq NeSeq -> NeSeq [ditto] .
  op _:::_ : NeSeq SeqSymbolic -> NeSeqSymbolic [ditto] .
  op _:::_ : SeqSymbolic NeSeq -> NeSeqSymbolic [ditto] .
  op _:::_ : NeSeqSymbolic Seq -> NeSeqSymbolic [ditto] .
  op _:::_ : Seq NeSeqSymbolic -> NeSeqSymbolic [ditto] .
  op _:::_ : SeqSymbolic Seq -> SeqSymbolic [ditto] .
  op _:::_ : Seq SeqSymbolic -> SeqSymbolic [ditto] .
  op _:::_ : NeSeqSymbolic NeSeq -> NeSeqSymbolic [ditto] .
  op _:::_ : NeSeq NeSeqSymbolic -> NeSeqSymbolic [ditto] . 

  op rev : SeqSymbolic -> NeSeqSymbolic .
  op len : SeqSymbolic -> IntSymbolic .
  op maximum : SeqSymbolic -> IntSymbolic .


  var Obj Obj1 Obj2 : MathObjSymbolic .
  var ObjList : List{MathObjSymbolic} .
  var A A1 A2 : SeqSymbolic .
  var NeA NeA1 NeA2 : NeSeqSymbolic .

  eq [Obj1, Obj2, ObjList] = [Obj1] ::: [Obj2] ::: [ObjList] .
  eq [.List{MathObjSymbolic}] = epsilon .
  eq NeA ::: A1 === NeA ::: A2 = A1 === A2 .
  eq A1 ::: NeA === A2 ::: NeA = A1 === A2  .
  eq [Obj1] ::: A1 === [Obj2] ::: A2 = Obj1 === Obj2 /\ A1 === A2 .
  eq [Obj1] ::: A1 === [Obj2] ::: A2 = Obj1 === Obj2 /\ A1 === A2 .
  eq A1 ::: [Obj1] === A2 ::: [Obj2] = Obj1 === Obj2 /\ A1 === A2 .
  eq A1 ::: [Obj1] === A2 ::: [Obj2] = Obj1 === Obj2 /\ A1 === A2 .

  eq rev(NeA1 ::: NeA2) = rev(NeA2) ::: rev(NeA1) .
  eq rev([Obj]) = [Obj] .
  eq rev(epsilon) = epsilon .
  eq len(NeA1 ::: NeA2) = len(NeA1) +Int len(NeA2) .
  eq len([Obj]) = 1 .
  eq len(epsilon) = 0 .
endm

