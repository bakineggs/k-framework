load config.maude


mod IMP-SYNTAX is including ML-K .
  sort Val .
  sort Exp .
  sorts Stmt Stmts .
  sort Annot .
  subsort Id <  Exp .
  subsort Int++  <  Val <  Exp .
  subsort Stmt Annot <  Stmts .

  op NULL : -> Exp .

  op *_ : Exp -> Exp [prec 10 metadata "strict"] .
  op _+_ : Exp Exp -> Exp [prec 33 gather (E e) metadata "strict"] .
  op _-_ : Exp Exp -> Exp [prec 33 gather (E e) metadata "strict"] .
  op _*_ : Exp Exp -> Exp [prec 31 gather (E e) metadata "strict"] .
  op _/_ : Exp Exp -> Exp [prec 31 gather (E e) metadata "strict"] .
  op _%_ : Exp Exp -> Exp [prec 29 gather (E e) metadata "strict"] .
  op -_ : Exp -> Exp  [metadata "strict"] .
  op _>=_ : Exp Exp -> Exp  [prec 35 metadata "strict"] .
  op _>_ : Exp Exp -> Exp  [prec 35 metadata "strict"] .
  op _<=_ : Exp Exp -> Exp  [prec 35 metadata "strict"] .
  op _<_ : Exp Exp -> Exp  [prec 35 metadata "strict"] .
  op _==_ : Exp Exp -> Exp  [prec 35 metadata "strict"] .
  op _!=_ : Exp Exp -> Exp  [prec 35] .
  op !_ : Exp -> Exp [prec 5 metadata "strict"] .
  op _&&_ : Exp Exp -> Exp [prec 55 gather(E e) metadata "strict(1)"] .
  op _||_ : Exp Exp -> Exp [prec 57 gather(E e) metadata "strict(1)"] .
  op _?_:_ : Exp Exp Exp -> Exp [prec 59 metadata "strict(1)"] .

  op _=_; : Exp Exp -> Stmt [prec 2 metadata "strict(2)"] .
  op {} : -> Stmt .
  op {_} : Stmts -> Stmt [gather(&)] .
  op __ : Stmts Stmts -> Stmts [prec 100 gather(e E)] .
  op _; : Exp -> Stmt [prec 60 metadata "strict"] .
  op if`(_`)_else_ : Exp Stmt Stmt -> Stmt [prec 93 metadata "strict(1)"] .
  op if`(_`)_ : Exp Stmt -> Stmt [prec 95] .
  op while`(_`)_ : Exp Stmt -> Stmt .
        
         
       
            
  op return_ : Exp -> Exp [metadata "strict"] .

         
         

  ops //`assume_ //`assert_ //`invariant_ : Bag -> Annot [prec 99 strat(0)] .
  ops //`pre_ //`post_ : Bag -> Annot [prec 99 strat(0)] .

  op load : Int++ -> Exp .
  op store : Int++ Exp -> Exp .
endm

mod IMP-DESUGARED-SYNTAX is including IMP-SYNTAX .

               
                   
                       

  var E E1 E2 :  Exp .
  var S :  Stmt .
  eq NULL =  0 .
  eq E1 !=  E2 =  ! (E1 ==  E2) .
  eq if (E) S =  if(E) S else {} . 

         
     
endm


    
      
       
            
    
       
          
    
        
          


