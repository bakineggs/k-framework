mod LLIST-HP is inc CONFIG + MATHEMATICAL-SEQUENCE .
  var N : Nat .
  var P P' P1 P2 Q Q' Q1 Q2 : Int++ .
  var I : Int++ .
  var Alpha Beta : Seq++ .
  var H : Map .
  var K : K .
  var Phi : Formula .
  var NtPhi : NtFormula .
  var Cfg : BagItem .
  var CfgItems Cfgs : Bag .

*** Definition of llists ***
  op llist : -> HeapLabel .
 ceq < tasks >
       < config >
         < k > derive(P') ~> K </ k >
         < heap > llist(P)(Alpha) H </ heap >
         < form > Phi </ form >
         CfgItems
       </ config >
     Cfgs
     </ tasks >
     < counter > N </ counter >
   = < tasks >
       < config >
         < k > derive(P') ~> K </ k >
         < heap > H </ heap > 
         < form > Phi /\ (P === 0) /\ (Alpha === epsilon) </ form >
         CfgItems
       </ config >
       < config >
         < k > K </ k >
         < heap >
           P |-> FreeInt(N) : nodeLlist . next
           llist(FreeInt(N))(FreeSeq(N +Int 1))
           H
         </ heap >
         < form >
           Phi /\ ~(P === 0) /\ (Alpha === [P] @ FreeSeq(N +Int 1))
         </ form >
         CfgItems
       </ config >
     Cfgs
     </ tasks >
     < counter > N +Int 2 </ counter >
  if VALID(Phi ===> P' === P \/ P' === P +Int 1) .

  eq < heap > llist(0)(Alpha) H </ heap > < form > Phi </ form >
   = < heap > H </ heap > < form > Phi /\ Alpha === epsilon </ form > .

  
  rl < config >
       < heap >
         P |-> P' : nodeLlist . next
         llist(P')(Alpha)
         H
       </ heap >
       CfgItems
     </ config >
     =match=> Cfg
  => < config >
       < heap >
         llist(P)([P] @ Alpha)
         H
       </ heap >
       CfgItems
     </ config >
     =match=> Cfg .


*** Definition of llist Segments ***
  op llseg : -> HeapLabel .

 ceq < tasks >
       < config >
         < k > derive(P') ~> K </ k >
         < heap > llseg(P, Q)(Alpha) H </ heap >
         < form > Phi </ form >
         CfgItems
       </ config >
     Cfgs
     </ tasks >
     < counter > N </ counter >
   = < tasks >
       < config >
         < k > derive(P') ~> K </ k >
         < heap > H </ heap >
         < form > Phi /\ (P === Q) /\ (Alpha === epsilon) </ form >
         CfgItems
       </ config >
       < config >
         < k > K </ k >
         < heap >
           P |-> FreeInt(N) : nodeLlist . next
           llseg(FreeInt(N), Q)(FreeSeq(N +Int 1))
           H
         </ heap >
         < form >
           Phi /\ ~(P === Q) /\ (Alpha === [P] @ FreeSeq(N +Int 1))
         </ form >
         CfgItems
       </ config >
     Cfgs
     </ tasks >
     < counter > N +Int 2 </ counter >
  if VALID(Phi ===> P' === P \/ P' === P +Int 1) .

  eq < heap > llseg(0, 0)(Alpha) H </ heap > < form > Phi </ form >
   = < heap > H </ heap > < form > Phi /\ Alpha === epsilon </ form > .
  eq < heap > llseg(P, 0)(Alpha) H </ heap > < form > Phi /\ ~(P === 0) </ form >
   = < heap > llist(P)(Alpha) H </ heap > < form > Phi /\ ~(P === 0) </ form > .

  rl < config >
       < heap >
         P |-> I : nodeLlist . next
         H </ heap >
       CfgItems
     </ config >
     =match=> Cfg
  => < config >
       < heap >
         llseg(P, I)([P])
         H
       </ heap >
       CfgItems
     </ config >
     =match=> Cfg .
     
  rl < config >
       < heap >
         llseg(P, P')(Alpha)
         llseg(P', Q)(Beta)
         H
       </ heap >
       CfgItems
     </ config >
     =match=> Cfg
  => < config >
       < heap >
         llseg(P, Q)(Alpha @ Beta)
         H
       </ heap >
       CfgItems
     </ config >
     =match=> Cfg .
     
  rl < config >
       < heap >
         llseg(P, P')(Alpha)
         llist(P')(Beta)
         H
       </ heap >
       CfgItems
     </ config >
     =match=> Cfg
  => < config >
       < heap >
         llist(P)(Alpha @ Beta)
         H
       </ heap >
       CfgItems
     </ config >
     =match=> Cfg .
endm
