/* Insertion Sort
 * Rosemary Monahan & Rustan Leino
 * 5th March 2007
 */
 
using System;
using Microsoft.Contracts;

class ArraySort
{
  // array of integers
  [SpecPublic]int[]! a = new int[100];
  
  // Insertion Sort Method
  public void sortArray()
  modifies a[*];
  ensures forall{int j in (1:a.Length),int i in (0:j);(a[i] <= a[j])};
  {
    int k;
    int t;
    
     /* This check is needed as otherwise the loop invariant 
     1 <= k && k <= a.Length might not hold */
    
    if (a.Length > 0) 
    { 
      k=1;
      assert forall{int j in (1:k), int i in (0:j);(a[i] <= a[j])};
      while(k < a.Length)
      invariant 1 <= k && k <= a.Length;
      invariant forall{int j in (1:k), int i in (0:j);(a[i] <= a[j])};
      {  
          for(t = k; t >0 && a[t-1]>a[t]; t--)
          invariant 0<=t; 
          invariant forall{int j in (1:t), int i in (0:j);(a[i] <= a[j])};
          invariant forall{int j in (t:k+1), int i in (t:j);(a[i] <= a[j])};
          invariant forall{int j in (t+1:k+1), int i in (0:t);(a[i] <= a[j])};
          invariant t <=k;
          { 
            int temp;
            temp = a[t];
            a[t] = a[t-1];
            a[t-1] = temp;
          }
          /*This assert is needed to assist the theorem prover in proving the 
          invariant when the lop terminates because a[i] <= a[t-1]*/
         
          assert forall{int i in (0:t-1);(a[i] <= a[t-1])};   
          k++;
      } 
    } 
  }
}

 