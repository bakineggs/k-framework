/* implements a stack and a queue simultaneously using a circular list:
 *
 *   rear |-> top_front * lseg(top_front, back)
 *
 * - the rear of the queue is the node pointed to by rear
 * - the top of the stack and the front of the queue
 *   are both the node pointed to by the tl of x
 * - we keep a pointer r to the rear, and existentially quantify top_front
 */

push(r) [r|->_tf * lseg(_tf,r)] {
  local t, u;
  t = new();
  u = r->tl;
  t->tl = u;
  r->tl = t;
} [r|->_b * _b|->_tf * lseg(_tf,r)]

enqueue(r;) [r|->_tf * lseg(_tf,r)] {
  push(r);
  r = r->tl;
} [r|->_tf * lseg(_tf,_b) * _b|->r]

pop_dequeue(r) [r!=_tf * r|->_tf * lseg(_tf,r)] {
  local t, u;
  t = r->tl;
  u = t->tl;
  r->tl = u;
  dispose t;
} [r|->_b * lseg(_b,r)]

test(r;) [r|->_tf * lseg(_tf,r)] {

  /*[r == r_const * r_const |-> tf * lseg(tf,r_const)]
    instantiation _tf <- tf*/
  push(r);

  /*[r == r_const * r_const != 0 * r_const |-> b * b |-> tf' * lseg(tf',r_const)]
    instantiation _tf <- b
    r_const != b follows since both are point-to-expressions*/
  pop_dequeue(r);

  /*[r == r_const * r_const != 0 * b != 0 * b != r_const *
     r_const |-> b' * lseg(b',r_const)]
    instantiation _tf <- b'*/
  enqueue(r;);

  /*knowledge about r is lost since r is updated by enqueue
    [r_const != 0 * b != 0 * b != r_const *
     r |-> tf * lseg(tf,b'') * b'' |-> r]
    instantiation _tf <- tf 
    problem: inferring r != tf holds needs a manual case split */

  pop_dequeue(r);

  /*[r == r_const' * r_const != 0 * b != 0 * b != r_const *
     r_const' != 0 * b'' != 0 * b'' != r_const' * r_const' != tf *

     r_const' |-> b' * lseg(b',r_const')]
    instantiation _a <- b'*/
  
} [r|->_a * lseg(_a,r)]
