mod MATHEMATICAL-DOMAIN is
  inc MATHEMATICAL-SEQUENCE + MATHEMATICAL-MULTISET + MATHEMATICAL-TREE .

  var Obj : MathObj++ .
  var I : Int++ .
  vars T TL TR : Tree++ .

  op tree2seq : Tree++ -> NeSeq++ .
***(
  op tree2seq : ?Tree -> ?Seq [ditto] .
  op tree2seq : !Tree -> !Seq [ditto] .
  op tree2seq : FreeTree -> FreeSeq [ditto] .
  op tree2seq : Tree -> NeSeq [ditto] .
***)
  eq tree2seq(TL [ Obj ] TR) = tree2seq(TL) @ [Obj] @ tree2seq(TR) .
  eq tree2seq(upsilon) = epsilon .
  op tree2mset : Tree++ -> NeMSet++ .
***(
  op tree2mset : ?Tree -> ?MSet [ditto] .
  op tree2mset : !Tree -> !MSet [ditto] .
  op tree2mset : FreeTree -> FreeMSet [ditto] .
  op tree2mset : Tree -> NeMSet [ditto] .
***)
  eq tree2mset(TL [ Obj ] TR) = tree2mset(TL) U {| Obj |} U tree2mset(TR) .
  eq tree2mset(upsilon) = empty .
  op isBst : Tree++ -> Atom .
  eq isBst(TL [I] TR) = @(max(tree2mset(TL)) <=Int I) /\
                        @(I <Int min(tree2mset(TR))) /\
                        isBst(TL) /\ isBst(TR) .
  eq isBst(upsilon) = TrueFormula .

  vars NeA NeA' : NeSeq++ .

  op seq2mset : Seq++ -> NeMSet++ .
***(
  op seq2mset : ?Seq -> ?MSet [ditto] .
  op seq2mset : !Seq -> !MSet [ditto] .
  op seq2mset : FreeSeq -> FreeMSet [ditto] .
  op seq2mset : Seq -> NeMSet [ditto] .
***)
  eq seq2mset(NeA @ NeA') = seq2mset(NeA) U seq2mset(NeA') .
  eq seq2mset([Obj]) = {| Obj |} .
  eq seq2mset(epsilon) = empty .

  op isSorted : Seq++ -> Atom .
  eq isSorted(NeA @ NeA')
   = @(min(seq2mset(NeA')) >=Int max(seq2mset(NeA))) /\
     isSorted(NeA) /\ isSorted(NeA') .
  eq isSorted([I]) = TrueFormula .
  eq isSorted(epsilon) = TrueFormula .

  vars Phi Phi1 Phi2 : Formula .
  var A : Seq++ .

  eq @(1 +Int (-Int len(A)) >=Int 0) /\ Phi1 ===> isSorted(A) /\ Phi2
   = @(1 +Int (-Int len(A)) >=Int 0) /\ Phi1 ===> Phi2 .
endm

