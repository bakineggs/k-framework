use (Globals.HOLDIR ^ "/examples/separationLogic/src/holfoot/header.sml");

(******************************************************************************)
(* Some useful REWRITES                                                       *)
(******************************************************************************)

open sortingTheory sortingTheory listTheory

val SORTED_CONS_IMP = prove (``!R x xs.
  (SORTED R (x::xs) ==> SORTED R xs)``,
Cases_on `xs` THEN SIMP_TAC list_ss [SORTED_DEF])

val transitive_LE = prove (``transitive (($<=): num -> num -> bool)``,
SIMP_TAC arith_ss [relationTheory.transitive_def]);

val REMOVE_def = Define `
   (REMOVE x [] = []) /\
   (REMOVE x (x'::xs) = if (x = x') then xs else (x'::REMOVE x xs))`

val MEM_REMOVE_IMP = prove (
``!y x l. MEM y (REMOVE x l) ==> MEM y l``,
Induct_on `l` THEN
SIMP_TAC list_ss [REMOVE_def, COND_RAND, COND_RATOR] THEN
METIS_TAC[]);


val PERM_REMOVE = prove (
``!x xs. MEM x xs ==>
         (PERM (x::REMOVE x xs) xs)``,

Induct_on `xs` THEN
SIMP_TAC list_ss [REMOVE_def] THEN
REPEAT GEN_TAC THEN
Cases_on `x = h` THEN (
   ASM_SIMP_TAC (std_ss++permLib.PERM_ss) []
));


(******************************************************************************)
(* Parse the main file                                                        *)
(******************************************************************************)

val file = concat [examplesDir, "/interactive/insertionsort.dsf"];
val spec_t = parse_holfoot_file file


(******************************************************************************)
(* Verify specification                                                       *)
(******************************************************************************)

(* holfoot_set_goal_procedures file ["delete"] *)
val delete_TAC =
   HF_CONTINUE_TAC THEN   
   REPEAT STRIP_TAC THEN
   Cases_on `i'_const = 0` THEN1 (
     xHF_CONTINUE_TAC [use_asms] THEN
     FULL_SIMP_TAC list_ss []
   ) THEN   
   xHF_CONTINUE_TAC [use_asms, add_rewrites [REMOVE_def], generate_vcs] THEN
   HF_VC_TAC THEN
   FULL_SIMP_TAC list_ss []


(* holfoot_set_goal_procedures file ["min"] *)
val min_TAC =
   xHF_CONTINUE_TAC [generate_vcs] THEN   
   REPEAT STRIP_TAC THEN (
      HF_ELIM_COMMENTS_TAC THEN
      ASM_SIMP_TAC arith_ss []
   );

(* holfoot_set_goal_procedures file ["sortlist"] *)
val sortlist_TAC =
   xHF_SOLVE_TAC [generate_vcs,
       add_rewrites [SORTED_EQ, transitive_LE, EVERY_MEM, SORTED_DEF],
       add_ssfrags [permLib.PERM_ss]] THEN     
   SIMP_TAC (std_ss++boolSimps.CONJ_ss) [GSYM FORALL_AND_THM] THEN
   REPEAT GEN_TAC THEN HF_ELIM_COMMENTS_TAC THEN
   Cases_on `mc2 = data_h` THEN ASM_SIMP_TAC (std_ss++permLib.PERM_ss) [REMOVE_def] THEN
   REPEAT STRIP_TAC THENL [
      METIS_TAC [PERM_MEM_EQ],

     `MEM y (data_h::REMOVE mc2 data_t)` by METIS_TAC [PERM_MEM_EQ] THEN
      FULL_SIMP_TAC list_ss [] THEN
      METIS_TAC[MEM_REMOVE_IMP],

      Q.PAT_ASSUM `PERM X Y` (ASSUME_TAC o ONCE_REWRITE_RULE [PERM_SYM]) THEN
      ASM_SIMP_TAC (std_ss++permLib.PERM_ss) [] THEN
      METIS_TAC[PERM_REMOVE]
   ];


val thm = holfoot_tac_verify_spec file NONE
                [("sortlist", sortlist_TAC),
                 ("delete",   delete_TAC),
                 ("min",      min_TAC)];

val file = concat [examplesDir, "/interactive/insertionsort.dsf"];
val spec_t = parse_holfoot_file file


(******************************************************************************)
(* The version without data fails, since delete is not properly specified     *)
(******************************************************************************)
val file2 = concat [examplesDir, "/interactive/insertionsort.sf"];
val thm = holfoot_auto_verify_spec file2

	  
