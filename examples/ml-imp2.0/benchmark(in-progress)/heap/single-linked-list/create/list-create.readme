0. Summary
1. Algorithm description
2. Annotation description
3. Observations

1. The nodeList structure is defined in order to express single linked lists.

2.The precondition : the function works on a list received as argument.
The postcondition: the function call creates anew list with the same content as 
the first one, leaving the rest of the heap unaltered. It returns a pointer to 
the first element of the new list.
The invariant: iterx is the pointer that iterates the list received as argument 
(the heap is split into the list segment- first elements of the original list 
and the rest of the list land it constructs the new list by copying the content 
element by element (creating a list segment and a pointer the the latest element 
to be added to the copy-list). The list segment of the original list and the 
list segment concatenated with the pointer represent the same content.
The last comments of the file contain declarations that are used by the tool.




#include <stdlib.h>

struct nodeList {
  int val;
  struct nodeList *next;
};

struct nodeList* create()
/*@ pre < config > < env > (.).Map </ env > < heap > (.).Map </ heap > < form > TrueFormula </ form > </ config > */
/*@ post < config > < env > ?rho </ env > < heap > list(?x)([5] @ [6] @ [7]) </ heap > < form > returns ?x </ form > </ config > */
{
  struct nodeList *x;
  struct nodeList *y;
  x = (struct nodeList*)malloc(sizeof(struct nodeList));
  x->val = 7;
  x->next = 0;
  y = (struct nodeList*)malloc(sizeof(struct nodeList));
  y->val = 6;
  y->next = x;
  x = y;
  y = (struct nodeList*)malloc(sizeof(struct nodeList));
  y->val = 5;
  y->next = x;
  x = y;
  return x;
}

int main()
/*@ pre < config > < env > (.).Map </ env > < heap > (.).Map </ heap > < form > TrueFormula </ form > </ config > */
/*@ post < config > < env > ?rho </ env > < heap > ?H </ heap > < form > TrueFormula </ form > </ config > */
{
  struct nodeList *x;
  x = create();
  return 0;
}


/*@ var ?x ?y : ?Int */
/*@ var ?A : ?Seq */
/*@ var ?rho ?H : ?MapItem */
