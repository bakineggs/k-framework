kmod SIMPLE-UNTYPED-PROGRAMS is including SIMPLE-UNTYPED-SYNTAX

  syntax Id ::= a | b | c | d | e | f | g | h | i | j | k | l | m 
              | n | o | p | q | r | s | t | u | v | w | x | y | z 
              | main | divide2 | collatz | dummy1 | dummy2 | init | reverse 
              | printAll | writeArray | insertionSort | bubbleSort | siftDown 
              | heapSort | map | done | root | bottom | maxChild | temp
              | numbers | size | readArray | printArray

  syntax Stmts ::= pFactorial | pCollatz | pInsertionSort1 | pInsertionSort2
                 | pInsertionSort3 | pInsertionSort4 | pBubbleSort
                 | pHeapSort | pSorting | pex01 | pArrays

  macro pFactorial =
       var x;

       function f(y) {
         var t;
	 t = 1;
         for i = 1 to y do
	   t = t*i;
	 return t;
       }

       function main() {
         x = 5;
	 write(f(f(x)));
       }


  macro pCollatz =
       var n;
       var m;

       function divide2(dummy1, r, dummy2) {
         var q;
	 q = 0;
	 while not r <= 1 do {
	   r = r - 2;
	   q = q + 1;
	 }
	 return q;
       }

       function collatz() {
         var s;
         s = 0;
	 write(n);
         while n > 1 do {
	   s = s+1;
           if n == (n/2)*2
	   then n = divide2(3+n, n, true or false);
	   else n = 3*n+1;
         }
	 return s;
       }

       function main() {
         m = 10;
         for i = 1 to m do {
	   n = i;
	   write(collatz());
	 }
       }


--- following does not run, because "and" is not shortcut in SIMPLE (though it types)
  macro pInsertionSort1 =
       var x[10];

       function init(n) {
         for i = 0 to n - 1 do
           x[i] = (n - i) + 100;
       }

       function printAll(n) {
         for i = 0 to n - 1 do
           write(x[i]);
       }

       function main() {
         var n;
         n = 10;
         init(n);
         printAll(n);
         for i = 1 to n - 1 do {
           var j;
           var v;
           v = x[i];
           j = i - 1;
           while (j >= 0 and ((x[j]) > v)) do {
             x[j + 1] = x[j];
             j = j - 1;
           }
           x[j+1] = v;
         }
         printAll(n);
       }


  macro pInsertionSort2 =
       var x[100];

       function init(n) {
         for i = 0 to n - 1 do
           x[i] = (n - i) + 100;
       }

       function printAll(n) {
         for i = 0 to n - 1 do
           write(x[i]);
       }

       function main() {
         var n;
         n = 30;
         init(n);
         printAll(n);
         write(-1);
         for i = 1 to n - 1 do {
           var j;
           var v;
           v = x[i];
           j = i - 1 ;
           while (j >= 0) do {
             if x[j] > v then x[j+1] = x[j];
             j = j - 1;
           }
           x[j+1] = v ;
         }
         printAll(n);
       }


  macro pInsertionSort3 =
       function init(x,n) {
         for i = 0 to n - 1 do
           x[i] = (n-i) + 100;
       }

       function printAll(x,n) {
         for i = 0 to n - 1 do
           write(x[i]);
       }

       function main() {
         var x[100];
         var n;
         n = 30;
         init(x,n);
         printAll(x,n);
         write(-1);
         for i = 1 to n - 1 do {
           var j;
           var v;
           v = x[i];
           j = i - 1;
           while (j >= 0) do {
             if x[j] > v then x[j+1] = x[j];
             j = j - 1;
           }
           x[j+1] = v;
         }
         printAll(x,n);
       }


  macro pInsertionSort4 =
       function init(n) {
         var x[100];
         for i = 0 to n - 1 do
           x[i] = (n-i) + 100;
         return x;
       }

       function printAll(x,n) {
         for i = 0 to n - 1 do
           write(x[i]);
       }

       function main() {
         var x;
         var n;
         n = 30;
         x = init(n);
         printAll(x,n);
         write(-1);
         for i = 1 to n - 1 do {
           var j;
           var v;
           v = x[i];
           j = i - 1;
           while (j >= 0) do {
             if x[j] > v then x[j+1] = x[j];
             j = j - 1;
           }
           x[j+1] = v;
         }
         printAll(x,n);
       }


  macro pBubbleSort =
       var v[100];

       function bubbleSort(n) {
         var t;
         for x = 0 to n - 1 do
           for y = 0 to n - 2 do
             if v[y] > v[y+1] then {
               t = v[y+1];
               v[y+1] = v[y];
               v[y] = t;
             }
       }

       function main() {
         var x;
         x = read();
         for y = 0 to (x - 1) do {
	   v[y] = read();
	   write(v[y]);
	 }
         bubbleSort(x);
         for y = 0 to (x - 1) do
	   write(v[y]);
       }



  macro pHeapSort =
        var numbers[100];

        function siftDown(root, bottom) {
       	var done;
       	var maxChild;
       	var temp;
       	done = false;
       
       	while (root*2 <= bottom and not done) do {
       	if (root*2 == bottom) then {
        	    maxChild = root*2;
          }
	  else if (numbers[root*2] > numbers[root*2 + 1]) then {
                   maxChild = root*2;
               }
	       else { maxChild = root*2 + 1; }
          if (numbers[root] < numbers[maxChild]) then {
            temp = numbers[root];
            numbers[root] = numbers[maxChild];
            numbers[maxChild] = temp;
            root = maxChild;
          }
          else {done = true;}
       }
    }

    function heapSort(size){
      var temp;
      var i;
      i = (size/2) - 1;
      while (i >= 0) do {
         siftDown(i, size - 1);
         i = i - 1;
      }
      i = size - 1;
      while (i >= 1 ) do {
        temp = numbers[0];
        numbers[0] = numbers[i];
        numbers[i] = temp;
        siftDown(0, i - 1);
        i = i - 1;
      }
    }

    function main() {
      var x ;
      x = read() ;
      for i = 0 to (x - 1) do {
        numbers[i] = read();
      }
      heapSort(x) ;
      for i = 0 to (x - 1) do {
        write(numbers[i]);
      }
    }


  macro pSorting =
       function init(n) {
         var x[n];
         for i = 0 to n - 1 do
           x[i] = i;
         return x;
       }

       function writeArray(x) {
         for i = 0 to sizeOf(x) - 1 do
           write(x[i]);
       }

       function reverse(x) {
         var n;
         n = sizeOf(x);
         for i = 0 to n/2 - 1 do {
           var t;
           t = x[i];
           x[i] = x[n - i - 1];
           x[n - i - 1] = t;
         }
       }

       function map(f,x) {
         for i = 0 to sizeOf(f) - 1 do {
           f[i](x);
         }
       }

       function insertionSort(x) {
         for i = 1 to sizeOf(x) - 1 do {
           var v;
           v = x[i];
           var j;
           j = i - 1;
           while (j >= 0) do {
             if x[j] > v then
               x[j+1] = x[j];
             j = j - 1;
           }
           x[j+1] = v;
         }
       }

       function bubbleSort(v) {
         var n;
         n = sizeOf(v);
         for i = 0 to n - 1 do
           for j = 0 to n - 2 do
             if v[j] > v[j+1] then {
               var t;
               t = v[j+1];
               v[j+1] = v[j];
               v[j] = t;
             }
       }

       function siftDown(x, root, bottom) {
         var done;
         done = false;
         var maxChild;
         while (root*2 <= bottom and not done) do {
           if (root*2 == bottom) then {
             maxChild = root*2;
           }
           else if (x[root*2] > x[root*2 + 1]) then {
                  maxChild = root*2;
                }
	        else {
                  maxChild = root*2 + 1;
                }
           if (x[root] < x[maxChild]) then {
             var t;
             t = x[root];
             x[root] = x[maxChild];
             x[maxChild] = t;
             root = maxChild;
           }
           else {
             done = true;
           }
         }
       }

       function heapSort(x){
         var n;
         n = sizeOf(x);
         var i;
         i = n/2 - 1;
         while (i >= 0) do {
           siftDown(x, i, n - 1);
           i = i - 1;
         }
         i = n - 1;
         while (i >= 1 ) do {
           var t;
           t = x[0];
           x[0] = x[i] ;
           x[i] = t;
           siftDown(x, 0, i - 1);
           i = i - 1;
         }
       }

       function main() {
         var x;
         var n;
         n = 10;
         x = init(n);
         var f[11];
         f[ 0] = writeArray;
         f[ 1] = reverse;
         f[ 2] = writeArray;
         f[ 3] = insertionSort;
         f[ 4] = writeArray;
         f[ 5] = reverse;
         f[ 6] = bubbleSort;
         f[ 7] = writeArray;
         f[ 8] = reverse;
         f[ 9] = heapSort;
         f[10] = writeArray;
         map(f,x);
       }

  macro pArrays =
    function readArray(a) {
      var i; var j; var m; var n; m = sizeOf(a) - 1; n = sizeOf(a[0]) - 1;
      for i = 0 to m do
          for j = 0 to n do a[i][j]=read();
    }
    function printArray(a) {
      var i; var j; var m; var n; m = sizeOf(a) - 1; n = sizeOf(a[0]) - 1;
      for i = 0 to m do
          for j = 0 to n do write(a[i][j]);
    }
    function main() {
      var x;
      x = read();
      var y;
      y = read();
      var a[x][y];
      readArray(a);
      printArray(a);
    }

endkm
