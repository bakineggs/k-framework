mod SIMPLE-UNTYPED-PROGRAMS is including SIMPLE-UNTYPED-SYNTAX .

        op a :  -> Id .    op b :  -> Id .    op c :  -> Id .    op d :  -> Id .    op e :  -> Id .    op f :  -> Id .    op g :  -> Id .    op h :  -> Id .    op i :  -> Id .    op j :  -> Id .    op k :  -> Id .    op l :  -> Id .    op m :  -> Id . 
                 op n :  -> Id .    op o :  -> Id .    op p :  -> Id .    op q :  -> Id .    op r :  -> Id .    op s :  -> Id .    op t :  -> Id .    op u :  -> Id .    op v :  -> Id .    op w :  -> Id .    op x :  -> Id .    op y :  -> Id .    op z :  -> Id . 
                 op main :  -> Id .    op divide2 :  -> Id .    op collatz :  -> Id .    op dummy1 :  -> Id .    op dummy2 :  -> Id .    op init :  -> Id .    op reverse :  -> Id . 
                 op printAll :  -> Id .    op writeArray :  -> Id .    op insertionSort :  -> Id .    op bubbleSort :  -> Id .    op siftDown :  -> Id . 
                 op heapSort :  -> Id .    op map :  -> Id .    op done :  -> Id .    op root :  -> Id .    op bottom :  -> Id .    op maxChild :  -> Id .    op temp :  -> Id .
                 op numbers :  -> Id .    op size :  -> Id . 

        op pFactorial :  -> Stmts .    op pCollatz :  -> Stmts .    op pInsertionSort1 :  -> Stmts .    op pInsertionSort2 :  -> Stmts .
                    op pInsertionSort3 :  -> Stmts .    op pInsertionSort4 :  -> Stmts .    op pBubbleSort :  -> Stmts .
                    op pHeapSort :  -> Stmts .    op pSorting :  -> Stmts . 

  eq pFactorial = 
       var x ; 

       function f(y) {
         var t ; 
	 t =  1 ; 
         for i =  1 to y do
	   t =  t * i ; 
	 return t ; 
       }

       function main() {
         x =  5 ; 
	 write(f(f(x))); 
       } .


  eq pCollatz = 
       var n ; 
       var m ; 

       function divide2(dummy1, r, dummy2) {
         var q ; 
	 q =  0 ; 
	 while not r <=  1 do {
	   r =  r -  2 ; 
	   q =  q + 1 ; 
	 }
	 return q ; 
       }

       function collatz() {
         var s ; 
         s =  0 ; 
	 write(n); 
         while n >  1 do {
	   s =  s + 1 ; 
           if n ==  (n / 2)* 2
	   then n =  divide2(3 + n, n, true or false); 
	   else n =  3 * n +  1 ; 
         }
	 return s ; 
       }

       function main() {
         m =  10 ; 
         for i =  1 to m do {
	   n =  i ; 
	   write(collatz()); 
	 }
       } .


              
  eq pInsertionSort1 = 
       var x[10]; 

       function init(n) {
         for i =  0 to n -  1 do
           x[i] =  (n -  i) +  100 ; 
       }

       function printAll(n) {
         for i =  0 to n -  1 do
           write(x[i]); 
       }

       function main() {
         var n ; 
         n =  10 ; 
         init(n); 
         printAll(n); 
         for i =  1 to n -  1 do {
           var j ; 
           var v ; 
           v =  x[i]; 
           j =  i -  1 ; 
           while (j >=  0 and ((x[j]) >  v)) do {
             x[j +  1] =  x[j]; 
             j =  j -  1 ; 
           }
           x[j + 1] =  v ; 
         }
         printAll(n); 
       } .


  eq pInsertionSort2 = 
       var x[100]; 

       function init(n) {
         for i =  0 to n -  1 do
           x[i] =  (n -  i) +  100 ; 
       }

       function printAll(n) {
         for i =  0 to n -  1 do
           write(x[i]); 
       }

       function main() {
         var n ; 
         n =  30 ; 
         init(n); 
         printAll(n); 
         write(-1); 
         for i =  1 to n -  1 do {
           var j ; 
           var v ; 
           v =  x[i]; 
           j =  i -  1 ; 
           while (j >=  0) do {
             if x[j] >  v then
               x[j + 1] =  x[j]; 
             j =  j -  1 ; 
           }
           x[j +  1] =  v ; 
         }
         printAll(n); 
       } .


  eq pInsertionSort3 = 
       function init(x,n) {
         for i =  0 to n -  1 do
           x[i] =  (n - i) +  100 ; 
       }

       function printAll(x,n) {
         for i =  0 to n -  1 do
           write(x[i]); 
       }

       function main() {
         var x[100]; 
         var n ; 
         n =  30 ; 
         init(x,n); 
         printAll(x,n); 
         write(-1); 
         for i =  1 to n -  1 do {
           var j ; 
           var v ; 
           v =  x[i]; 
           j =  i -  1 ; 
           while (j >=  0) do {
             if x[j] >  v then
               x[j + 1] =  x[j]; 
             j =  j -  1 ; 
           }
           x[j + 1] =  v ; 
         }
         printAll(x,n); 
       } .


  eq pInsertionSort4 = 
       function init(n) {
         var x[100]; 
         for i =  0 to n -  1 do
           x[i] =  (n - i) +  100 ; 
         return x ; 
       }

       function printAll(x,n) {
         for i =  0 to n -  1 do
           write(x[i]); 
       }

       function main() {
         var x ; 
         var n ; 
         n =  30 ; 
         x =  init(n); 
         printAll(x,n); 
         write(-1); 
         for i =  1 to n -  1 do {
           var j ; 
           var v ; 
           v =  x[i]; 
           j =  i -  1 ; 
           while (j >=  0) do {
             if x[j] >  v then
               x[j + 1] =  x[j]; 
             j =  j -  1 ; 
           }
           x[j + 1] =  v ; 
         }
         printAll(x,n); 
       } .


  eq pBubbleSort = 
       var v[100]; 

       function bubbleSort(n) {
         var t ; 
         for x =  0 to n -  1 do
           for y =  0 to n -  2 do
             if v[y] >  v[y + 1] then {
               t =  v[y + 1]; 
               v[y + 1] =  v[y]; 
               v[y] =  t ; 
             }
       }

       function main() {
         var x ; 
         x =  read() ; 
         for y =  0 to (x -  1) do {
	   v[y] =  read() ; 
	   write(v[y]); 
	 }
         bubbleSort(x); 
         for y =  0 to (x -  1) do
	   write(v[y]); 
       } .



  eq pHeapSort = 
        var numbers[100]; 

        function siftDown(root, bottom) {
       	var done ; 
       	var maxChild ; 
       	var temp ; 
       	done =  false ; 
       
       	while (root * 2 <=  bottom and not done) do {
       	if (root * 2 ==  bottom) then {
        	    maxChild =  root * 2 ; 
          }
	  else if (numbers[root * 2] >  numbers[root * 2 +  1]) then {
                   maxChild =  root * 2 ; 
               }
	       else { maxChild =  root * 2 +  1 ;  }
          if (numbers[root] <  numbers[maxChild]) then {
            temp =  numbers[root]; 
            numbers[root] =  numbers[maxChild]; 
            numbers[maxChild] =  temp ; 
            root =  maxChild ; 
          }
          else {done =  true ; }
       }
    }

    function heapSort(size){
      var temp ; 
      var i ; 
      i =  (size / 2) -  1 ; 
      while (i >=  0) do {
         siftDown(i, size -  1); 
         i =  i -  1 ; 
      }
      i =  size -  1 ; 
      while (i >=  1 ) do {
        temp =  numbers[0]; 
        numbers[0] =  numbers[i]; 
        numbers[i] =  temp ; 
        siftDown(0, i -  1); 
        i =  i -  1 ; 
      }
    }

    function main() {
      var x ; 
      x =  read()  ; 
      for i =  0 to (x -  1) do {
        numbers[i] =  read() ; 
      }
      heapSort(x) ; 
      for i =  0 to (x -  1) do {
        write(numbers[i]); 
      }
    } .


  eq pSorting = 
       function init(n) {
         var x[n]; 
         for i =  0 to n -  1 do
           x[i] =  i ; 
         return x ; 
       }

       function writeArray(x) {
         for i =  0 to sizeOf(x) -  1 do
           write(x[i]); 
       }

       function reverse(x) {
         var n ; 
         n =  sizeOf(x); 
         for i =  0 to n / 2 -  1 do {
           var t ; 
           t =  x[i]; 
           x[i] =  x[n - i -  1]; 
           x[n - i -  1] =  t ; 
         }
       }

       function map(f,x) {
         for i =  0 to sizeOf(f) -  1 do {
           f[i](x); 
         }
       }

       function insertionSort(x) {
         for i =  1 to sizeOf(x) -  1 do {
           var v ; 
           v =  x[i]; 
           var j ; 
           j =  i -  1 ; 
           while (j >=  0) do {
             if x[j] >  v then
               x[j + 1] =  x[j]; 
             j =  j -  1 ; 
           }
           x[j + 1] =  v ; 
         }
       }

       function bubbleSort(v) {
         var n ; 
         n =  sizeOf(v); 
         for i =  0 to n -  1 do
           for j =  0 to n -  2 do
             if v[j] >  v[j + 1] then {
               var t ; 
               t =  v[j + 1]; 
               v[j + 1] =  v[j]; 
               v[j] =  t ; 
             }
       }

       function siftDown(x, root, bottom) {
         var done ; 
         done =  false ; 
         var maxChild ; 
         while (root * 2 <=  bottom and not done) do {
           if (root * 2 ==  bottom) then {
             maxChild =  root * 2 ; 
           }
           else if (x[root * 2] >  x[root * 2 +  1]) then {
                  maxChild =  root * 2 ; 
                }
	        else {
                  maxChild =  root * 2 +  1 ; 
                }
           if (x[root] <  x[maxChild]) then {
             var t ; 
             t =  x[root]; 
             x[root] =  x[maxChild]; 
             x[maxChild] =  t ; 
             root =  maxChild ; 
           }
           else {
             done =  true ; 
           }
         }
       }

       function heapSort(x){
         var n ; 
         n =  sizeOf(x); 
         var i ; 
         i =  n / 2 -  1 ; 
         while (i >=  0) do {
           siftDown(x, i, n -  1); 
           i =  i -  1 ; 
         }
         i =  n -  1 ; 
         while (i >=  1 ) do {
           var t ; 
           t =  x[0]; 
           x[0] =  x[i] ; 
           x[i] =  t ; 
           siftDown(x, 0, i -  1); 
           i =  i -  1 ; 
         }
       }

       function main() {
         var x ; 
         var n ; 
         n =  10 ; 
         x =  init(n); 
         var f[11]; 
         f[ 0] =  writeArray ; 
         f[ 1] =  reverse ; 
         f[ 2] =  writeArray ; 
         f[ 3] =  insertionSort ; 
         f[ 4] =  writeArray ; 
         f[ 5] =  reverse ; 
         f[ 6] =  bubbleSort ; 
         f[ 7] =  writeArray ; 
         f[ 8] =  reverse ; 
         f[ 9] =  heapSort ; 
         f[10] =  writeArray ; 
         map(f,x); 
       } .

endm
