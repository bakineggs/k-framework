in ../../../../k-prelude.maude
in simple-typed-dynamic-syntax.maude
in ../simple-typed-programs.maude

kmod SIMPLE-TYPED-DYNAMIC-SEMANTICS is including SIMPLE-TYPED-DYNAMIC-DESUGARED-SYNTAX + K .
--- We need values when we define the semantics
  sort Val .
  subsort Int Bool < Val < Exp .

  subsorts Stmts List{Exp} List{IdType} List{Type} < K .
  subsort List{Val} < KResult .

  ops env genv store fstack in out nextLoc return : -> CellLabel .

  configuration <T> 
                     <k> K </k>
                     <fstack> .List </fstack>
                     <env> .Map </env>
                     <genv> .Map </genv>
                     <store> .Map </store>
                     <in> .List </in>
                     <out> .List </out>
                     <return> none </return>
                     <nextLoc> 0 </nextLoc>
                   </T> .

  op _of`type_ : Nat Type -> K .

  rule <k> X => V ...</k> <env>... X |-> L of type ? ...</env> <store>... L |-> V ...</store> .
  rule <k> ++ X => I +Int 1 ...</k> <env>... X |-> L of type int ...</env> <store>... L |-> (I => I +Int 1) ...</store> .
  rule I1 + I2 => I1 +Int I2 .
  rule _-_(I1,I2) => _-Int_(I1,I2) .
  rule I1 * I2 => I1 *Int I2 .
  rule I1 / I2 => I1 /Int I2 if I2 =/=Bool 0 .
  rule I1 % I2 => I1 %Int I2 if I2 =/=Bool 0 .
  rule - I => -Int I .
  rule I1 < I2 => I1 <Int I2 .
  rule I1 <= I2 => I1 <=Int I2 .
  rule I1 > I2 => I1 >Int I2 .
  rule I1 >= I2 => I1 >=Int I2 .
  rule V1 == V2 => V1 ==Bool V2 .
  rule V1 != V2 => V1 =/=Bool V2 .
  rule T1 and T2 => T1 andBool T2 .
  rule T1 or T2 => T1 orBool T2 .
  rule not(T) => notBool(T) .
  op array : Type Nat Nat -> Val .  --- array value: 1st arg. is the type of the array, 2nd arg. is the location of the first element in the array, and the 3rd arg. is the array size
  rule <k> array(?,L,M)[N] => Sigma(L +Int N) ...</k> <store> Sigma </store> 
       if N >=Nat 0 andBool N <=Nat M .
  rule sizeOf(array(?,?,N)) => N .
  rule <k> var X : Tp ; => .K ...</k> <env> Env => Env[L of type Tp / X] </env> <store>... (.Map => L |-> initVal(Tp)) ...</store>
          <nextLoc> L => sNat(L) </nextLoc> .
  context var X[[HOLE]] : Tp[] ; .
  rule <k> var X[N] : _`[`](Tp) ; => .K ...</k> <env> Env => Env[L of type _`[`](Tp) / X] </env>
          <store>... (.Map => L |-> array(Tp, sNat L, N)) ...</store> <nextLoc> L => sNat L +Nat N </nextLoc> .
  rule {} => .K .
  rule <k> {Ss} => Ss ~> env(Env) ...</k> <env> Env </env> .
  rule S1 S2 => S1 ~> S2 .
  rule <k> X = V ; => .K ...</k> <env>... X |-> L of type Tp ...</env> <store>... L |-> (? => V) ...</store>
       if typeOf(V) ==Bool Tp .
  context ?[[HOLE]] = ? ; .
  context [HOLE][?] = ? ; .
  rule <k> array(Tp,L,M)[N] = V ; => .K ...</k> <store> Sigma => Sigma[V / (L +Int N)] </store> 
       if N >=Nat 0 andBool N <=Nat M andBool typeOf(V) ==Bool Tp .
  rule V ; => .K .
  rule if true then S else ? => S .
  rule if false then ? else S => S .
  rule <k> while B do S  => if B then {S while B do S} else {} ...</k> .
  op function : Type Nat -> Val .
  rule <k> function F(XTl) : Tp S => .K ...</k> <env> Env => Env[L of type (typeList(XTl) -> Tp) / F] </env> <nextLoc> L => sNat sNat L </nextLoc> 
          <store>... (.Map => L |-> function(typeList(XTl) -> Tp,sNat L) sNat(L) |-> lambda(idList(XTl),S)) ...</store> .
  op lambda : List{Id} Stmt -> Val .
  op (_,_,_) : Map K Type -> ListItem .
 rule <k> _`(_`)(function(Tpl -> Tp,L),Vl)  ~> K => S ~> return(initVal(Tp)); </k> <fstack> .List => (Env,K,Tp') ...</fstack>
          <env> Env =>  GEnv[(| Xl | from N) of types Tpl / getList{K}(Xl)] </env> <genv> GEnv </genv>
          <return> Tp' => Tp </return>
          <store>... L |-> lambda(Xl,S) (.Map => | Xl | from N |-> getList{K}(Vl)) ...</store>
          <nextLoc> N => N +Nat | Xl | </nextLoc> 
     if typeOf(Vl) ==Bool Tpl .

  rule <k> return(V); ~> ? => V ~> K </k> <fstack> (Env,K,Tp') => .List ...</fstack> <env> (? => Env) </env> <return> (Tp => Tp') </return>
       if typeOf(V) ==Bool Tp .
  rule <k> read() => I ...</k> <in> ListItem(I) => .List ...</in> .
  rule <k> write(I) ; => .K ...</k> <out>... .List => ListItem(I) </out>  .

--- when we are done with the first pass (computation and genv are empty), call main and initialize the global environment
  rule <k> .K => main(); </k> <env> Env </env> <genv> (.Map => Env) </genv> .

--- auxilliary declarations and operations
  op initVal : Type -> Val .
  eq initVal(int) = 0 .
  eq initVal(bool) = false .
  eq initVal(void) = none .
  op none : -> Val .

  op typeOf : List{Val} -> List{Type} .
  eq typeOf(function(Tp, ?)) = Tp .
  eq typeOf(array(Tp,?,?)) = _`[`](Tp) .
  eq typeOf(I) = int .
  eq typeOf(T) = bool .
  eq typeOf(none) = void .
  eq typeOf(V1,V2,Vl) = typeOf(V1),typeOf(V2,Vl) .
  eq typeOf(.List{Bottom}) = .List{Bottom} .


  op _of`types_ : List{K} List{Type} -> List{K} .
  eq (N,,Kl:List{K}) of types (Tp,Tpl) 
   = (N of type Tp),,(Kl:List{K} of types Tpl) .
  eq .List{K} of types .List{Bottom} = .List{K} .

--- List{Id}
  sort List{Id} .
  subsort Id List{Bottom} < List{Id} < List{Exp} .
  op _,_ : List{Id} List{Id} -> List{Id} [ditto] .
--- List{Val}
  sort List{Val} .
  subsort Val List{Bottom} < List{Val} < List{Exp} .
  op _,_ : List{Val} List{Val} -> List{Val} [ditto] .

  op idList : List{IdType} -> List{Id} .
  eq idList(.List{Bottom}) = .List{Bottom} .
  eq idList(X : Tp,XTl) = X,idList(XTl) .

  op typeList : List{IdType} -> List{Type} .
  eq typeList(.List{Bottom}) = .List{Bottom} .
  eq typeList(X : Tp,XTl) = Tp,typeList(XTl) .

  op |_| : List{Id} -> Nat .  eq | .List{Bottom} | = 0 .  eq | X,Xl | = sNat(| Xl |) .
  op _from_ : Nat Nat -> List{K} .  eq 0 from N1 = .List{K} .  eq sNat N2 from N1 = N1,,(N2 from sNat N1) .

  op env : Map -> K .
  rule env(?) ~> env(Env) => env(Env) [metadata "structural"] .
  rule <k> env(Env) => .K ...</k> <env> ? => Env </env> [metadata "structural"] .
  rule <k> V ~> (env(Env) => .K) ...</k> <env> ? => Env </env> [metadata "structural"] .

  vars I I1 I2 : Int .  var N N1 N2 M L : Nat .  var T T1 T2 : Bool .  var F X : Id .  var Env GEnv Sigma : Map .  var B : Exp .
  var S S1 S2 : Stmt .  var Xl : List{Id} .  var K : K .  var Ss : Stmts .  var Vl : List{Val} .  var V V1 V2 : Val .
  var XTl : List{IdType} . var Tp Tp' : Type .  var Tpl : List{Type} .
endkm

kmod SIMPLE-TYPED-DYNAMIC is 
  including SIMPLE-TYPED-DYNAMIC-SEMANTICS .
  including SIMPLE-TYPED-PROGRAMS .
  op run : KLabel -> Bag .
  var PgmName : KLabel .  var Input : List{K} .
--- after loading simple-untyped-compiled into maude, type `rew run("pFactorial") .', etc.
  eq run(PgmName) = <T> 
             <k> PgmName(.List{K}) </k>
             <fstack> .List </fstack>
             <env> .Map </env>
             <genv> .Map </genv>
             <store> .Map </store>
             <in> List(7,,23,,654,,656,,54,,456,,436345647643567,,354654364356,,4357643576) </in>
             <out> .List </out>
             <return> none </return>
             <nextLoc> 0 </nextLoc>
           </T> .
endkm
