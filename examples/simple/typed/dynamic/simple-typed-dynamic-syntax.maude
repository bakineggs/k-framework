mod SIMPLE-TYPED-SYNTAX is including PL-INT + PL-ID .
  sorts Var Exp Decl Stmt Stmts .
  subsort Id < Var .
  subsorts Var Int Bool < Exp .
  subsort Decl Stmt < Stmts .

  sort Type .
  ops int bool void : -> Type .
  op _[] : Type -> Type [prec 0] .
  op _->_ : List{Type} Type -> Type .

  op ++_ : Id -> Exp [prec 0] .
  op _+_ : Exp Exp -> Exp [gather(E e) prec 33 metadata "strict"] .
  op _-_ : Exp Exp -> Exp [gather(E e) prec 33 metadata "strict"] .
  op _*_ : Exp Exp -> Exp [gather(E e) prec 31 metadata "strict"] .
  op _/_ : Exp Exp -> Exp [gather(E e) prec 31 metadata "strict"] .
  op _%_ : Exp Exp -> Exp [gather(E e) prec 31 metadata "strict"] .
  op -_ : Exp -> Exp  [metadata "strict"] .
  op _<_ : Exp Exp -> Exp [prec 37 metadata "strict"] .
  op _<=_ : Exp Exp -> Exp [prec 37 metadata "strict"] .
  op _>_ : Exp Exp -> Exp [prec 37 metadata "strict"] .
  op _>=_ : Exp Exp -> Exp [prec 37 metadata "strict"] .
  op _==_ : Exp Exp -> Exp [prec 37 metadata "strict"] .
  op _!=_ : Exp Exp -> Exp [prec 37 metadata "strict"] .
  op _and_ : Exp Exp -> Exp [gather(E e) prec 55 metadata "strict"] .
  op _or_ : Exp Exp -> Exp [gather(E e) prec 59 metadata "strict"] .
  op not_ : Exp -> Exp [prec 53 metadata "strict"] .
  op _[_] : Exp Exp -> Var [prec 1 metadata "strict"] .
  op sizeOf : Exp -> Exp [metadata "strict"] .
  op var_:_; : Var Type -> Decl [prec 2] .
  op {} : -> Stmt .
  op {_} : Stmts -> Stmt [gather(&)] .
  op __ : Stmts Stmts -> Stmts [prec 100 gather(e E)] .
  op _=_; : Exp Exp -> Stmt [prec 2 metadata "strict(2)"] .
  op _; : Exp -> Stmt [prec 50 metadata "strict"] .
  op if_then_else_ : Exp Stmt Stmt -> Stmt [metadata "strict(1)"] .
  op if_then_ : Exp Stmt -> Stmt .
  op while_do_ : Exp Stmt -> Stmt .
  op for _=_to_do_ : Id Exp Exp Stmt -> Stmt .
  op main : -> Id .
  op function_():__ : Id Type Stmt -> Decl .
  op function_(_):__ : Id List{IdType} Type Stmt -> Decl .
  op _() : Exp -> Exp .
  op _(_) : Exp List{Exp} -> Exp [prec 2 metadata "strict"] .
  op return_; : Exp -> Stmt [metadata "strict"] .
  op read() : -> Exp .
  op write(_); : Exp -> Stmt [metadata "strict"] .

-----------------------------------------------------------------------------
--- Lists should be eventually builtin; for now, they need to be declared ---
-----------------------------------------------------------------------------
--- List{Bottom}
--- do not add Bottom as subsort to anything else, like Id, Exp, etc.
  sorts Bottom List{Bottom} .
  subsort Bottom < List{Bottom} .
  op .List{Bottom} : -> List{Bottom} .
  op _,_ : List{Bottom} List{Bottom} -> List{Bottom} [prec 70 assoc id: .List{Bottom}] .
--- List{Type}
  sort List{Type} .
  subsort Type List{Bottom} < List{Type} .
  op _,_ : List{Type} List{Type} -> List{Type} [ditto] .
--- List{IdType}
  sorts IdType List{IdType} .
  subsort IdType List{Bottom} < List{IdType} .
  op _:_ : Id Type -> IdType .
  op _,_ : List{IdType} List{IdType} -> List{IdType} [ditto] .
--- List{Exp}
  sort List{Exp} .
  subsort Exp List{Bottom} < List{Exp} .
  op _,_ : List{Exp} List{Exp} -> List{Exp} [ditto] .
endm

mod SIMPLE-TYPED-DYNAMIC-DESUGARED-SYNTAX is including SIMPLE-TYPED-SYNTAX .
--------------------------------------------------------------------------------
--- This module desugars some of SIMPLE's language constructs into core ones ---
--- The idea is that we only want to give semantics to core constructs,      ---
--- so we get rid of the derived ones before we start the semantics          ---
--------------------------------------------------------------------------------
  vars F X : Id .  var Tp : Type .  vars E E1 E2 : Exp .  vars S : Stmt .
  eq if E then S = if E then S else {} .
  eq for X = E1 to E2 do S = {var X : int ; X = E1 ; while X <= E2 do {S X = X + 1 ;}} .
  eq function F() : Tp S = function F(.List{Bottom}) : Tp S .
  eq E() = E(.List{Bottom}) .
endm
