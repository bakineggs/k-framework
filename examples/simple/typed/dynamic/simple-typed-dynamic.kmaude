in ../../../../k-prelude
in simple-typed-dynamic-syntax.kmaude
in ../simple-typed-programs

mod SIMPLE-TYPED-DYNAMIC-SEMANTICS is including SIMPLE-TYPED-DYNAMIC-DESUGARED-SYNTAX + K 
--- We need values when we define the semantics
  sort Val 
  subsort Int Bool < Val < Exp 

  subsorts Stmts List{Exp} List{IdType} List{Type} < K 
  subsort List{Val} < KResult 

  configuration <T> 
                     <k> K:K </k>
                     <fstack> .List </fstack>
                     <env> .Map </env>
                     <genv> .Map </genv>
                     <store> .Map </store>
                     <in> .List </in>
                     <out> .List </out>
                     <return> none </return>
                     <nextLoc> 0 </nextLoc>
                   </T> 

  rule <k> X:Id => V:Val <_/k> <env_> X |-> L:Nat <_/env> <store_> L |-> V <_/store> 
  rule <k> ++ X => I:Int +Int 1 <_/k> <env_> X |-> L <_/env> <store_> L |-> (I => I +Int 1) <_/store> 
  rule I1:Int + I2:Int => I1 +Int I2 
  rule _-_(I1,I2) => _-Int_(I1,I2) 
  rule I1 * I2 => I1 *Int I2 
  rule I1 / I2 => I1 /Int I2 if I2 =/=Bool 0 
  rule I1 % I2 => I1 %Int I2 if I2 =/=Bool 0 
  rule - I => -Int I 
  rule I1 < I2 => I1 <Int I2 
  rule I1 <= I2 => I1 <=Int I2 
  rule I1 > I2 => I1 >Int I2 
  rule I1 >= I2 => I1 >=Int I2 
  rule V1:Val == V2:Val => V1 ==Bool V2 
  rule V1 != V2 => V1 =/=Bool V2 
  rule T1:Bool and T2:Bool => T1 andBool T2 
  rule T1 or T2 => T1 orBool T2 
  rule not(T:Bool) => notBool(T) 
  op array : Type Nat Nat -> Val   --- array value: 1st arg. is the type of the array, 2nd arg. is the location of the first element in the array, and the 3rd arg. is the array size
  rule <k> array(_,L,M:Nat)[N:Nat] => Sigma(L +Int N) <_/k> <store> Sigma </store> 
       if N >=Nat 0 andBool N <=Nat M 
  rule sizeOf(array(_,_,N)) => N 
  rule <k> var X : Tp:Type ; => .K <_/k> <env> Env:Map => Env[L / X] </env> <store_> (.Map => L |-> initVal(Tp)) <_/store>
          <nextLoc> L => sNat(L) </nextLoc> 
  context var X[[HOLE]] : Tp[] ; 
  rule <k> var X[N] : _`[`](Tp) ; => .K <_/k> <env> Env => Env[L / X] </env>
          <store_> (.Map => L |-> array(_`[`](Tp), sNat L, N)) <_/store> <nextLoc> L => sNat L +Nat N </nextLoc> 
  rule {} => .K 
  rule <k> {Ss:Stmts} => Ss ~> env(Env) <_/k> <env> Env </env> 
  rule S1:Stmt S2:Stmt => S1 ~> S2 
  rule <k> X = V2 ; => .K <_/k> <env_> X |-> L <_/env> <store_> L |-> (V1 => V2) <_/store>
       if typeOf(V1) ==Bool typeOf(V2) 
  context _[[HOLE]] = _ ; 
  context [HOLE][_] = _ ; 
  rule <k> array(_`[`](Tp),L,M)[N] = V ; => .K <_/k> <store> Sigma:Map => Sigma[V / (L +Int N)] </store> 
       if N >=Nat 0 andBool N <=Nat M andBool typeOf(V) ==Bool Tp 
  rule V ; => .K 
  rule if true then S:Stmt else _ => S 
  rule if false then _ else S => S 
  rule <k> while B:Exp do S  => if B then {S while B do S} else {} <_/k> 
  op function : Type Nat -> Val 
  rule <k> function F:Id(XTl:List`{IdType`}) : Tp S => .K <_/k> <env> Env => Env[L / F] </env> <nextLoc> L => L +Nat 2 </nextLoc> 
          <store_>(.Map => L |-> function(typeList(XTl) -> Tp,sNat L) sNat(L) |-> lambda(idList(XTl),S))<_/store> 
  op lambda : List{Id} Stmt -> Val 
  op `(_`,_`,_`) : Map K Type -> ListItem 
 rule <k> _`(_`)(function(Tpl:List`{Type`} -> Tp,L),Vl:List`{Val`})  ~> K => S ~> return(initVal(Tp)); </k> <fstack> .List => (Env,K,Tp') <_/fstack>
          <env> Env =>  GEnv[| Xl | from N / getList{K}(Xl)] </env> <genv> GEnv:Map </genv>
          <return> Tp':Type => Tp </return>
          <store_> L |-> lambda(Xl:List`{Id`},S) (.Map => | Xl | from N |-> getList{K}(Vl)) <_/store>
          <nextLoc> N => N +Nat | Xl | </nextLoc> 
     if typeOf(Vl) ==Bool Tpl 

  rule <k> return(V); ~> _ => V ~> K </k> <fstack> (Env,K,Tp') => .List <_/fstack> <env> _ => Env </env> <return> Tp => Tp' </return>
       if typeOf(V) ==Bool Tp 
  rule <k> read() => I <_/k> <in> ListItem(I) => .List <_/in> 
  rule <k> write(I) ; => .K <_/k> <out_> .List => ListItem(I) </out>  

--- when we are done with the first pass (computation and genv are empty), call main and initialize the global environment
  rule <k> .K => main(); </k> <env> Env </env> <genv> .Map => Env </genv> 

--- auxilliary declarations and operations
  op initVal : Type -> Val 
  eq initVal(int) = 0 
  eq initVal(bool) = false 
  eq initVal(void) = none 
  eq initVal(_`[`](Tp)) = array(_`[`](Tp),0,0) 
  op none : -> Val 

  op typeOf : List{Val} -> List{Type} 
  eq typeOf(function(Tp, _)) = Tp 
  eq typeOf(array(Tp,_,_)) = Tp 
  eq typeOf(I) = int 
  eq typeOf(T) = bool 
  eq typeOf(none) = void 
  eq typeOf(V1,V2,Vl) = typeOf(V1),typeOf(V2,Vl) 
  eq typeOf(.List{Bottom}) = .List{Bottom} 

--- List{Id}
  sort List{Id} 
  subsort Id List{Bottom} < List{Id} < List{Exp} 
  op _`,_ : List{Id} List{Id} -> List{Id} [ditto] 
--- List{Val}
  sort List{Val} 
  subsort Val List{Bottom} < List{Val} < List{Exp} 
  op _`,_ : List{Val} List{Val} -> List{Val} [ditto] 

  op idList : List{IdType} -> List{Id} 
  eq idList(.List{Bottom}) = .List{Bottom} 
  eq idList(X : Tp,XTl) = X,idList(XTl) 

  op typeList : List{IdType} -> List{Type} 
  eq typeList(.List{Bottom}) = .List{Bottom} 
  eq typeList(X : Tp,XTl) = Tp,typeList(XTl) 

  op |_| : List{Id} -> Nat   eq | .List{Bottom} | = 0   eq | X,Xl | = sNat(| Xl |) 
  op _from_ : Nat Nat -> List{K}   eq 0 from N1:Nat = .List{K}   eq sNat N2:Nat from N1 = N1,,(N2 from sNat N1) 

  op env : Map -> K 
  rule (env(_) ~> env(Env) => env(Env)) [structural] 
  rule <k> (env(Env) => .K) <_/k> <env> (_ => Env) </env> [structural] 
  rule <k> V ~> (env(Env) => .K) <_/k> <env> (_ => Env) </env> [structural] 
endm

mod SIMPLE-TYPED-DYNAMIC is 
  including SIMPLE-TYPED-DYNAMIC-SEMANTICS 
  including SIMPLE-TYPED-PROGRAMS 
  op run : KLabel -> Bag 
  eq run(PgmName:KLabel) = <T_> 
             <k> PgmName(.List{K}) </k>
             <in> List(7,,23,,654,,656,,54,,456,,436345647643567,,354654364356,,4357643576) </in>
           <_/T> 
endm

