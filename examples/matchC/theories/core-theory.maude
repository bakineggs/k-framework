mod FORMULA-BUILTIN-MODULE is inc PL-BOOL + PL-STRING .
  sorts TruthFormula AtomFormula NtFormula Formula .
  subsort AtomFormula < NtFormula .
  subsort TruthFormula NtFormula < Formula .  

  ops TrueFormula FalseFormula : -> TruthFormula .
  op @_ : Bool -> AtomFormula [prec 0] .
  op _/\_ : NtFormula Formula -> NtFormula
  [prec 55 assoc comm id: TrueFormula] .
  op _/\_ : Formula Formula -> Formula [ditto] .
  op ~_ : AtomFormula -> AtomFormula [prec 0] .
  op ~_ : Formula -> NtFormula [ditto] .
  op _\/_ : NtFormula Formula -> NtFormula
  [prec 59 assoc comm id: FalseFormula] .
  op _\/_ : Formula Formula -> Formula [ditto] .
  op _===>_ : Formula Formula -> NtFormula [prec 61] .

  op check-validity : Formula -> Bool .

  var Atom : AtomFormula .
  vars NtPhi NtPhi1 NtPhi2 NtPhi' : NtFormula .
  vars Phi Phi1 Phi2 Phi' : Formula .

  eq  @ true =  TrueFormula .
  eq @ false = FalseFormula .

  eq  ~(TrueFormula) = FalseFormula .
  eq ~(FalseFormula) =  TrueFormula .
  eq ~(~(Phi)) = Phi .

  eq  TrueFormula \/  TrueFormula =  TrueFormula .
  eq FalseFormula /\ FalseFormula = FalseFormula .
  eq  TrueFormula \/ NtPhi =  TrueFormula .
  eq FalseFormula /\ NtPhi = FalseFormula .
  eq NtPhi /\ NtPhi = NtPhi .
  eq NtPhi \/ NtPhi = NtPhi .
  eq NtPhi /\ ~(NtPhi) = FalseFormula .
  eq NtPhi \/ ~(NtPhi) =  TrueFormula .

  eq Phi ===>  TrueFormula = TrueFormula .
  eq Phi ===> FalseFormula = ~ Phi .
---  leads to in infinite rewriting
---  eq FalseFormula ===> Phi = TrueFormula .
  eq  TrueFormula ===> Phi = Phi .


  eq Atom /\ Phi1 ===> Atom /\ Phi2 = Atom /\ Phi1 ===> Phi2 .
  eq ~(NtPhi) /\ Phi1 ===> ~(NtPhi) /\ Phi2 = ~(NtPhi) /\ Phi1 ===> Phi2 .
  eq (NtPhi1 \/ NtPhi2) /\ Phi1 ===> (NtPhi1 \/ NtPhi2) /\ Phi2
   = (NtPhi1 \/ NtPhi2) /\ Phi1 ===> Phi2 .


--- very, very bad eqs
---   eq NtPhi /\ (NtPhi1 \/ NtPhi2) = (NtPhi /\ NtPhi1) \/ (NtPhi /\ NtPhi2) .
---   eq (NtPhi1 \/ NtPhi2) ===> Phi = (NtPhi1 ===> Phi) /\ (NtPhi2 ===> Phi) .
---   eq Phi ===> (NtPhi1 \/ NtPhi2) = (Phi ===> NtPhi1) \/ (Phi ===> NtPhi2) .

  eq NtPhi /\ (NtPhi1 \/ NtPhi2) ===> NtPhi'
   = NtPhi /\ NtPhi1 \/ NtPhi /\ NtPhi2 ===> NtPhi' [owise] .
  eq NtPhi' ===> NtPhi /\ (NtPhi1 \/ NtPhi2)
   = NtPhi' ===> NtPhi /\ NtPhi1 \/ NtPhi /\ NtPhi2 [owise] .
  eq ~ (NtPhi1 /\ NtPhi2) ===> NtPhi
   = ~ NtPhi1 \/ ~ NtPhi2 ===> NtPhi [owise] .
  eq NtPhi ===> ~ (NtPhi1 /\ NtPhi2)
   = NtPhi ===> ~ NtPhi1 \/ ~ NtPhi2 [owise] .
  eq ~ (NtPhi1 \/ NtPhi2) ===> NtPhi
   = ~ NtPhi1 /\ ~ NtPhi2 ===> NtPhi [owise] .
  eq NtPhi ===> ~ (NtPhi1 \/ NtPhi2)
   = NtPhi ===> ~ NtPhi1 /\ ~ NtPhi2 [owise] .
  eq NtPhi1 \/ NtPhi2 ===> NtPhi
   = (NtPhi1 ===> NtPhi) /\ (NtPhi2 ===> NtPhi) [owise] .
  eq NtPhi ===> NtPhi1 \/ NtPhi2
   = (NtPhi ===> NtPhi1) \/ (NtPhi ===> NtPhi2) [owise] .


  op VALID : Formula -> Bool .
  eq VALID(TrueFormula) = true .
endm


mod MATHEMATICAL-OBJECT-BUILTIN-MODULE is inc FORMULA-BUILTIN-MODULE + PL-NAT .
***(
PESort stands for bound symbolic mathematical objects
FESort stands for unbound symbolic mathematical objects
FreeSort stands for unbound symbolic mathematical objects
Sort stands for ground, non-symbolic mathematical objects
Sort++ stands for all the above
***)
  sorts PEMathObj FEMathObj FreeMathObj MathObj MathObj++ .
  sorts List{MathObj++} .
  subsort PEMathObj FEMathObj FreeMathObj MathObj < MathObj++ .
  subsort MathObj++ < List{MathObj++} .
  op skolem : Nat PEMathObj -> FreeMathObj .
  ---[strat(0)] .
  op co-skolem : Nat FreeMathObj -> FEMathObj .
  ---[strat(0)] .

  op .List{MathObj++} : -> List{MathObj++} .
  op _`,_ : List{MathObj++} List{MathObj++} -> List{MathObj++}
  [assoc id: .List{MathObj++}] .

  op errorObj : -> [MathObj++] .

  --- must not be comm (not sure why is that)
  op _===_ : MathObj++ MathObj++ -> AtomFormula [comm] .
  op _===_ : List{MathObj++} List{MathObj++} -> AtomFormula [ditto] .

  vars Obj Obj1 Obj1' Obj2 Obj2' : MathObj++ .
  vars ObjList1 ObjList2 : List{MathObj++} .

  eq Obj === Obj = TrueFormula .
  eq (Obj1, Obj1', ObjList1) === (Obj2, Obj2', ObjList2)
   = (Obj1 === Obj2) /\ (Obj1' === Obj2') /\ (ObjList1 === ObjList2) .
  eq .List{MathObj++} === .List{MathObj++} = TrueFormula .
endm

