mod MATHEMATICAL-DOMAIN-BUILTIN-MODULE is
                    inc MATHEMATICAL-SEQUENCE-BUILTIN-MODULE
                      + MATHEMATICAL-MULTISET-BUILTIN-MODULE
                      + MATHEMATICAL-TREE-BUILTIN-MODULE .
                  
                    var Obj : MathObj++ .
                    var I : Int++ .
                    vars T TL TR : Tree++ .
                  
                    op tree2list : Tree++ -> NeSeq++ .
                  ***(
                    op tree2list : ?Tree -> ?Seq [ditto] .
                    op tree2list : !Tree -> !Seq [ditto] .
                    op tree2list : FreeTree -> FreeSeq [ditto] .
                    op tree2list : Tree -> NeSeq [ditto] .
                  ***)
                    eq tree2list(TL [ Obj ] TR) = tree2list(TL) @ [Obj] @ tree2list(TR) .
                    eq tree2list(upsilon) = epsilon .
                    op tree2mset : Tree++ -> NeMSet++ .
                  ***(
                    op tree2mset : ?Tree -> ?MSet [ditto] .
                    op tree2mset : !Tree -> !MSet [ditto] .
                    op tree2mset : FreeTree -> FreeMSet [ditto] .
                    op tree2mset : Tree -> NeMSet [ditto] .
                  ***)
                    eq tree2mset(TL [ Obj ] TR) = tree2mset(TL) U {| Obj |} U tree2mset(TR) .
                    eq tree2mset(upsilon) = empty .
                    op isBst : Tree++ -> Atom .
                    eq isBst(TL [I] TR) = @(max(tree2mset(TL)) <=Int I) /\
                                          @(I <=Int min(tree2mset(TR))) /\
                                          isBst(TL) /\ isBst(TR) .
                    eq isBst(upsilon) = TrueFormula .
                  
                    vars NeA NeA' : NeSeq++ .
                  
                    op seq2mset : Seq++ -> NeMSet++ .
                  ***(
                    op seq2mset : ?Seq -> ?MSet [ditto] .
                    op seq2mset : !Seq -> !MSet [ditto] .
                    op seq2mset : FreeSeq -> FreeMSet [ditto] .
                    op seq2mset : Seq -> NeMSet [ditto] .
                  ***)
                    eq seq2mset(NeA @ NeA') = seq2mset(NeA) U seq2mset(NeA') .
                    eq seq2mset([Obj]) = {| Obj |} .
                    eq seq2mset(epsilon) = empty .
                  
                    op isSorted : Seq++ -> Atom .
                    eq isSorted(NeA @ NeA')
                     = @(min(seq2mset(NeA')) >=Int max(seq2mset(NeA))) /\
                       isSorted(NeA) /\ isSorted(NeA') .
                    eq isSorted([I]) = TrueFormula .
                    eq isSorted(epsilon) = TrueFormula .
                  
                    vars Phi Phi1 Phi2 : Formula .
                    var A A1 A2 : Seq++ .
                  
                    eq @(1 +Int (-Int len(A)) >=Int 0) /\ Phi1 ===> isSorted(A) /\ Phi2
                     = @(1 +Int (-Int len(A)) >=Int 0) /\ Phi1 ===> Phi2 .
                  
                    op list{tree}2list_ : Seq++ -> Seq++ .
                    eq list{tree}2list(A1 @ [T] @ A2)
                     = list{tree}2list(A1) @ tree2list(T) @ list{tree}2list(A2) .
                    eq list{tree}2list(epsilon) = epsilon .
                  endm
                  
