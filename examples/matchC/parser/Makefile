# add java (.java, and .class), and antlr (.g, and .tokens) extensions
# to the list of known file extentions
.SUFFIXES: .java .class .g .tokens

# generic 
ANTLR_ROOT_DIR = .
ANTLR_TOOL = org.antlr.Tool
JC = javac
JVM = java
CLASSPATH = $(ANTLR_ROOT_DIR)/antlrworks-1.4.jar:.
JFLAGS = -classpath $(CLASSPATH)

# generate .java and .tokens files for a .g file
%.tokens %Lexer.java %Parser.java: %.g
	$(JVM) $(JFLAGS) $(ANTLR_TOOL) $<

# generate .java and .tokens files for a .g file
%.tokens %.java: %.g
	$(JVM) $(JFLAGS) $(ANTLR_TOOL) $<

# compile a .java file into one or more .class files
.java.class:
	$(JC) $(JFLAGS) $<

#
LANGUAGE = kernelC
ANNOTATION = annot
LEXER_GRAMMARS = k.g
GRAMMARS = $(LANGUAGE).g $(ANNOTATION).g
TREE_GRAMMARS = $(LANGUAGE)Pass1.g \
                $(LANGUAGE)Pass2.g \
                $(ANNOTATION)Pass1.g \
                $(ANNOTATION)Pass2.g \
                $(ANNOTATION)Pass3.g
                #$(ANNOTATION)Pass4.g
TOKENS = $(LEXER_GRAMMARS:.g=.tokens) \
         $(GRAMMARS:.g=.tokens) \
         $(TREE_GRAMMARS:.g=.tokens)
LEXERS = $(LEXER_GRAMMARS:.g=.java) \
         $(GRAMMARS:.g=Lexer.java)
PARSERS = $(GRAMMARS:.g=Parser.java)
WALKERS = $(TREE_GRAMMARS:.g=.java)
JAVA_PRE = Table.java TreeUtils.java
JAVA_POST = AnnotPreK.java $(LANGUAGE)Pass3.java KernelCPreK.java

CLASSES = $(LEXERS:.java=.class) \
          $(PARSERS:.java=.class) \
          $(JAVA_PRE:.java=.class) \
          $(WALKERS:.java=.class) \
          $(JAVA_POST:.java=.class)
MAIN = KernelCPreK


# targets
# default target is all
all: build

# build target
build: $(CLASSES)

# run target (depends on build)
run: build
	$(JVM) $(JFLAGS) $(MAIN)

# clean target removes the .class files and the files generated by antlr
clean:
	rm -rf $(CLASSES) $(LEXERS) $(PARSERS) $(WALKERS) *.tokens *.class *~

