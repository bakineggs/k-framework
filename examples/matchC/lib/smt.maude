mod SMT-LIB is
  including FORMULA-BUILTIN-MODULE + PL-META-TERM + MAUDE-IF-THEN-ELSE .
  including PL-STRING + PL-CONVERSION .
  op toSMTLibString : Formula -> String .

  var Phi : Formula .
  eq toSMTLibString(Phi)
   = axiomsSMTString +String string(constsToSMTString(upTerm(Phi)))
     +String "(assert (not " +String
     if string(varsToSMTString(upTerm(Phi))) =/=Bool "" then
       "(exists (" +String string(varsToSMTString(upTerm(Phi))) +String ")"
       +String formToSMTString(upTerm(Phi)) +String ")))"
     else
       formToSMTString(upTerm(Phi)) +String "))"
     fi .


  op axiomsSMTString : -> String .
  op symToSMTString : Qid -> String .
  op constsToSMTString : TermList -> StringSet .
  op varsToSMTString : TermList -> StringSet .
  op formToSMTString : TermList -> String .

  sort StringSet NeStringSet .
  subsort String < NeStringSet < StringSet .
  op .emptyStringSet : -> StringSet .
  op _&'_ : StringSet StringSet -> StringSet [assoc comm id: .emptyStringSet] .
  op _&'_ : NeStringSet StringSet -> NeStringSet [ditto] .
  eq S:String &' S:String = S:String .
  op string : StringSet -> String .
  eq string(.emptyStringSet) = "" .
  eq string(S:String &' SS:StringSet) = S:String +String string(SS:StringSet) .

  op isLogicConst : Term -> String .
  op isLogicVar : Term -> String .

  op getSMTName : Term -> String .
  op getSMTType : Term -> String .


  var Q : Qid .
  var QC : Constant .
  var QT NT ST : Term .
  var QTList : TermList .
  var QTNeList : NeTermList .

  eq constsToSMTString((QT : QTNeList))
   = constsToSMTString(QT) &' constsToSMTString(QTNeList) .
  eq constsToSMTString(.emptyTermList) = .emptyStringSet .
  eq constsToSMTString(QC)
   = if isLogicConst(QC) then
       "(declare-fun " +String getSMTName(QC) +String " () "
       +String getSMTType(QC) +String ")" 
     else
       .emptyStringSet
     fi .
  eq constsToSMTString(Q[QTList])
   = if isLogicConst(Q[QTList]) then
       "(declare-fun " +String getSMTName(Q[QTList]) +String " () "
       +String getSMTType(Q[QTList]) +String ")"
     else
       constsToSMTString(QTList)
     fi .

  eq varsToSMTString((QT : QTNeList))
   = varsToSMTString(QT) &' varsToSMTString(QTNeList) .
  eq varsToSMTString(.emptyTermList) = .emptyStringSet .
  eq varsToSMTString(QC)
   = if isLogicVar(QC) then
       "(" +String getSMTName(QC) +String " " +String getSMTType(QC) +String ")"
     else
       .emptyStringSet
     fi .
  eq varsToSMTString(Q[QTList])
   = if isLogicVar(Q[QTList]) then
       "(" +String getSMTName(Q[QTList]) +String " "
       +String getSMTType(Q[QTList]) +String ")"
     else
       if notBool isLogicConst(Q[QTList]) then
         varsToSMTString(QTList)
       else
         .emptyStringSet
       fi
     fi .

  eq formToSMTString((QT : QTNeList))
   = formToSMTString(QT) +String " " +String formToSMTString(QTNeList) .
  eq formToSMTString(.emptyTermList) = "" .
  eq formToSMTString(QC)
   = if isLogicConst(QC) orBool isLogicVar(QC) then
       getSMTName(QC)
     else
       symToSMTString(QC)
     fi .
  eq formToSMTString(Q[QTList])
   = if substrString(string(Q), 0, 4) ==Bool "sNat" orBool
        isLogicConst(Q[QTList]) orBool isLogicVar(Q[QTList])
     then
       getSMTName(Q[QTList])
     else
       if Q =/=Bool '@_ then
         "(" +String symToSMTString(Q) +String " "
         +String formToSMTString(QTList) +String ")"
       else
         formToSMTString(QTList)
       fi
     fi .

  eq isLogicConst(QC)
   = substrString(string(getType(QC)), 0, 2) ==Bool "FE" orBool
     substrString(string(getType(QC)), 0, 4) ==Bool "Free" .
  eq isLogicConst(Q[QTList])
   = substrString(string(Q), 0, 1) ==Bool "!" orBool
     substrString(string(Q), 0, 4) ==Bool "Free" orBool
     Q ==Bool 'skolem orBool Q ==Bool 'co-skolem .

  eq isLogicVar(QC) = substrString(string(getType(QC)), 0, 2) ==Bool "PE" .
  eq isLogicVar(Q[QTList]) = substrString(string(Q), 0, 1) ==Bool "?" .

  eq getSMTName(QC) = string(getName(QC)) . 
 ceq getSMTName(Q['0.Zero])
   = Int2String(downTerm(Q['0.Zero], 0))
  if substrString(string(Q), 0, 4) ==Bool "sNat" .
  eq getSMTName('id`(_`)[ST]) = downTerm(ST, "") .
  eq getSMTName('skolem[NT : QT])
   = "sk__" +String getSMTName(NT) +String "__" +String getSMTName(QT) . 
  eq getSMTName('co-skolem[NT : QT])
   = "csk__" +String getSMTName(NT) +String "__" +String getSMTName(QT) .
  eq getSMTName(Q[QT]) = string(Q) +String "__" +String getSMTName(QT) [owise] .

 ceq getSMTType(QC)
   = substrString(string(getType(QC)), 1,
                  lengthString(string(getType(QC))) -Int 2)
  if substrString(string(getType(QC)), 0, 1) ==Bool "PE" orBool
     substrString(string(getType(QC)), 0, 1) ==Bool "FE" .
 ceq getSMTType(QC)
   = substrString(string(getType(QC)), 4,
                  lengthString(string(getType(QC))) -Int 4)
  if substrString(string(getType(QC)), 0, 4) ==Bool "Free" .
 ceq getSMTType(Q[QT]) = "Int"
  if Q ==Bool '?var orBool Q ==Bool 'FreeVar .
 ceq getSMTType(Q[QT])
   = substrString(string(Q), 1, lengthString(string(Q)) -Int 1)
  if Q =/=Bool '?var andBool substrString(string(Q), 0, 1) ==Bool "?" orBool
     substrString(string(Q), 0, 1) ==Bool "!" .
 ceq getSMTType(Q[QT])
   = substrString(string(Q), 4, lengthString(string(Q)) -Int 4)
  if Q =/=Bool 'FreeVar andBool substrString(string(Q), 0, 4) ==Bool "Free" .
  eq getSMTType('skolem[NT : QT]) = getSMTType(QT) . 
  eq getSMTType('co-skolem[NT : QT]) = getSMTType(QT) . 

  eq axiomsSMTString
   = "(set-logic AUFNIRA)(declare-fun fact (Int) Int)(assert (forall ((n Int)) (=> (> n 0) (= (fact n) (* n (fact (- n 1)))))))" .

  eq symToSMTString('TrueFormula.TruthFormula) = "true" .
  eq symToSMTString('FalseFormula.TruthFormula) = "false" .
  eq symToSMTString('_/\_) = "and" .
  eq symToSMTString('~_) = "not" .
  eq symToSMTString('_\/_) = "or" .
  eq symToSMTString('_===>_) = "=>" .
  eq symToSMTString('_===_) = "=" .

  eq symToSMTString('0.Zero) = "0" .
  eq symToSMTString('_+Int_) = "+" .
  eq symToSMTString('_-Int_) = "-" .
  eq symToSMTString('_*Int_) = "*" .
  eq symToSMTString('_/Int_) = "/" .
  eq symToSMTString('_%Int_) = "%" .
  eq symToSMTString('-Int_) = "-" .
  eq symToSMTString('_<=Int_) = "<=" .
  eq symToSMTString('_<Int_) = "<" .
  eq symToSMTString('_>=Int_) = ">=" .
  eq symToSMTString('_>Int_) = ">" .
  eq symToSMTString('-Int_) = "-" .
  
  eq symToSMTString(Q) = string(Q) [owise] .


endm

mod SMT-INTERFACE is including PL-STRING + SMT-LIB .
  op check-sat : String -> String
  [special (id-hook StringOpSymbol (callSolvers)
            op-hook stringSymbol (<Strings> : ~> String))] .

  var Phi : Formula .
 ceq check-validity(Phi) = true
  if check-sat(toSMTLibString(Phi)) ==Bool "unsat" .
endm

