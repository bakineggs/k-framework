load ../../../k-prelude.maude
load ../theories/core-theory.maude
load ../theories/integer-theory.maude


mod SUBST-BUILTIN-MODULE is inc MATHEMATICAL-OBJECT-BUILTIN-MODULE + K-PROPER .
  sort SubstItem NeSubst Subst .
  subsorts SubstItem < NeSubst < Subst .

  op .Subst : -> Subst .
  op _;;_ : Subst Subst -> Subst [assoc comm id: .Subst] .
  op _;;_ : NeSubst Subst -> NeSubst [ditto] .
  op _;;_ : Subst NeSubst -> NeSubst [ditto] .
endm


mod CONFIG-BUILTIN-MODULE is
  inc PL-ID + PL-STRING + K-PROPER .
  inc MATHEMATICAL-INT-BUILTIN-MODULE + SUBST-BUILTIN-MODULE .


  sorts PEBagItem FEBagItem FreeBagItem .
  subsort PEBagItem FEBagItem FreeBagItem < BagItem .
  sorts PEMapItem FEMapItem FreeMapItem .
  subsort PEMapItem FEMapItem FreeMapItem < MapItem .
  sorts PEListItem FEListItem FreeListItem .
  subsort PEListItem FEListItem FreeListItem < ListItem .
  op skolem : Nat PEMapItem -> FreeMapItem .
  op skolem : Nat PEBagItem -> FreeBagItem .
  op skolem : Nat PEListItem -> FreeListItem .
  op co-skolem : Nat FreeMapItem -> FEMapItem .
  op co-skolem : Nat FreeBagItem -> FEBagItem .
  op co-skolem : Nat FreeListItem -> FEListItem .
  op ?var : Id -> PEInt .
  op ?BagItem : String -> PEBagItem .
  op !BagItem : String -> FEBagItem .
  op FreeMapItem : String -> FreeMapItem .
  op ?MapItem : String -> PEMapItem .
  op !MapItem : String -> FEMapItem .
  op FreeMapItem : String -> FreeMapItem .
  op ?ListItem : String -> PEListItem .
  op !ListItem : String -> FEListItem .
  op FreeListItem : String -> FreeListItem .
  op defaultBagItem : String -> Bag .
  op defaultMapItem : String -> Map .
  op defaultListItem : String -> List .


  op _<-_ : MathObj++ MathObj++ -> SubstItem .
  op _<-_ : K K -> SubstItem .
  op _<-_ : List List -> SubstItem .
  op _<-_ : Bag Bag -> SubstItem .
  op _<-_ : Set Set -> SubstItem .
  op _<-_ : Map Map -> SubstItem .

  op getPESubstItem : Formula -> Subst .
  op getFESubstItem : Formula -> Subst .
  op getFreeSubstItem : Formula -> Subst .

  var Obj : MathObj++ .
  var K : K .
  var List : List .
  var Bag : Bag .
  var Set : Set .
  var Map : Map .
  eq Obj <- Obj = .Subst .
  eq K <- K = .Subst .
  eq List <- List = .Subst .
  eq Bag <- Bag = .Subst .
  eq Set <- Set = .Subst .
  eq Map <- Map = .Subst .


  sort Value TypedValue .
  subsort Int++ < Value .
  subsort Value < MathObj++ .
  subsort String < Value .
  sort Void NvExpressionType ExpressionType .  
  subsort Void NvExpressionType < ExpressionType .  
  subsorts List{MathObj++} Set{MathObj++} < Builtins KResult .
  sort Field .
  sort HeapLabel .


  ops feasible infeasible : -> CellLabel .
  ops config program struct fun k env stack tenv heap in out : -> CellLabel .
  ops counter : -> CellLabel .
  ops tasks task form subst other-counter : -> CellLabel .

  op skolemize : Nat Pattern -> Pattern .
  op co-skolemize : Nat Pattern -> Pattern .


  op returns _ : Value -> Formula .
  op unit : -> Value . 
  op tv`(_,_`) : ExpressionType Value -> TypedValue .
  op derive : -> KLabel .
  op _`(_`)`(_`) : HeapLabel List{MathObj++} List{MathObj++} -> MapItem .
  op _|->_:_ : Int++ Value Field -> MapItem .


  *** [ERROR] Here subsorting Pattern to K gives all sort of errors,
  *** hence Pattern is subsorted to List just to avoid those errors.
  *** The most natural solution would be to subsort to Bag to Pattern,
  *** but the tool does not allow Bag supersorts.
  sort Pattern .
  subsort Pattern < List .
  op _/\_ : Bag Formula -> Pattern .
  op _/\_ : Formula Bag -> Pattern .
  op _/\_ : Pattern Formula -> Pattern [prec 55] .
  op _/\_ : Formula Pattern -> Pattern [prec 55] .
  op _\/_ : Pattern Pattern -> Pattern [prec 59] .

  eq Phi:Formula /\ Cfg:Bag = Cfg:Bag /\ Phi:Formula .
  eq Phi:Formula /\ Pattern:Pattern = Pattern:Pattern /\ Phi:Formula .
  eq (Cfg:Bag /\ Phi1:Formula) /\ Phi2:Formula
   = Cfg:Bag /\ (Phi1:Formula /\ Phi2:Formula) .
  eq (Pattern1:Pattern \/ Pattern2:Pattern) /\ Phi:Formula
   = (Pattern1:Pattern /\ Phi:Formula) (Pattern2:Pattern /\ Phi:Formula) .


  *** hack
  op isInt : Int++ -> Bool .

  op list : -> HeapLabel .
  op lseg : -> HeapLabel .

  op tree : -> HeapLabel .
  op treeList : -> HeapLabel .

  op id`(_`) : String -> Id .
endm


mod ML-K is inc CONFIG-BUILTIN-MODULE + K + K-WHERE + K-CONDITION-SEARCH .
  subsort HeapLabel < Bag .
  subsorts Formula Subst MathObj++ < Builtins KResult .
  subsorts List{MathObj++} Set{MathObj++} < Builtins KResult .
  subsort Id Field < Builtins KProper .
  subsort Value TypedValue ExpressionType < Builtins KResult .


  op applySubst : Pattern Subst -> Pattern .
  op applySubst : Bag Subst -> Bag .
  op applySubst : Formula Subst -> Formula .
  op applySubst : Subst Subst -> Subst .
  --- op applySubst : KResult Subst -> KResult .
  op _._ : Id Id -> Field .
  op _._ : Field Id -> Field .
endm

