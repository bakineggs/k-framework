This is a JavaScript implementation of "Riot":http://github.com/thumblemonks/riot/.

It will run in a browser, Rhino, or Node.

h3. Example

Tests look like this:

<pre>
Riot.run(function() {
  context('basic riot functionality', function() {
    given('some simple equality tests', function() {
      asserts('a simple truth test should return true', true).isTrue();
      asserts('isNull is null', null).isNull();
    });

    given('another context', function() {
      asserts('equals should compare strings as expected', 'test string').equals('test string');
    });

    given('a context concerned with functions', function() {
      asserts('asserts() should allow functions to be compared', function() {
        return 'test string';
      }).equals('test string');
    });
  });

  given('yet another context', function() {
    asserts('equals should compare strings as expected', 'test string').equals('test string');
  });
});
</pre>

There are a few aliases to make tests (and output) read more naturally:

* <code>context</code>: <code>given</code> -- Given will add "Given..." to the title in the test output
* <code>asserts</code>: <code>should</code>

h3. Assertions

* <code>equals</code> - for example, <code>asserts('description').equals('value')</code>
* <code>matches</code> - matches a regex
* <code>typeOf</code> - aliased to isTypeOf, kindOf
* <code>isNull</code>
* <code>isTrue</code>
* <code>raises</code>

h3. Riot.run

<code>Riot.run(function() { // your tests });</code> just adds your tests to <code>window.onload</code>.  If there's already an <code>onload</code> handler it won't add itself.  If there's no <code>window</code> it will just run the tests.

<code>Riot.load()</code> can be used to load required scripts in a browser or interpreter.  <code>Riot.require()</code> only loads files once by keeping a record of files that have already been loaded.

It can also be called with no parameters to run tests defined with <code>Riot.context</code>.  This can be used to create a set of files with tests inside a <code>Riot.context</code> for each file

h3. Packaging

Packaged as a RubyGem usable via "XPCOMCore-RubyGems":http://github.com/conflagrationjs/xpcomcore-rubygem -- "riotjs-xpcc":http://github.com/conflagrationjs/riotjs-xpcc.

h3. Writing a test for a browser AND interpreter

My current pattern looks like this:

<pre>
var Riot;
if (typeof load !== 'undefined') {
  load('riot.js');
} else if (typeof require !== 'undefined') {
  Riot = require('./riot').Riot;
}

Riot.require('../turing.core.js');
Riot.require('../turing.oo.js');
Riot.require('fixtures/example_classes.js');  

Riot.context('turing.oo.js', function() {
  // Tests go here
});

Riot.run();
</pre>

<pre>
<!DOCTYPE html>
<html>
  <head>
    <title>Riot</title>
    <style>
p.pass { color: green; font-weight: bold; margin: 0 }
p.fail { color: red; font-weight: bold; margin: 0 }
#test-results ul { margin-bottom: 1em }
    </style>
    <script type="text/javascript" src="riot.js"></script>
    <script type="text/javascript" src="core_test.js"></script>
    <script type="text/javascript" src="oo_test.js"></script>
  </head>
  <body>
    <div id="test-results"></div>
  </body>
</html>
</pre>

Note:

* <code>load()</code> is no-op'd in browsers if it doesn't exist by Riot
* <code>Riot.run()</code> will only run once, so you can include multiple Riot test files
* Specifying <code>Riot.run()</code> at the end of each test file lets you run that file with <code>js Riot.run()</code> in the console

h3. Contributors

* ac94 (Aron Carroll)
* bgerrissen (Ben Gerrissen)

