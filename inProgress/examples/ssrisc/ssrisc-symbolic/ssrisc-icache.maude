mod SSRISC-ICACHE-SYNTAX is including K . 

      op iwrap(_,_) :  K  K -> K .            

endm


mod SSRISC-ICACHE-SEMANTICS is including SSRISC-TIME-MODEL + SSRISC-COMMUNICATION-INTERFACE + SSRISC-ICACHE-SYNTAX + SSRISC-SYNTAX .

mb configuration 
    < k > (.).K  </ k > 
    < ic > (.).Map  </ ic > 
    < profile > 
      < imiss > 0 </ imiss > 
      < ihit > 0 </ ihit > 
    </ profile > : KSentence . 

      op icachesize :  -> Int32 . 
eq icachesize =  10 .

      op currICacheOccup(_) :  Map -> Int32 .  
eq currICacheOccup(M:Map (K1:K |->  K2:K)) =  currICacheOccup(M) +Int32  1 . 
eq currICacheOccup(. ) =  0 .


    
 
mb rule < k >  geti(PC:Int32) =>  incPC(PC) ~>  Ins </ k > 
     < ic >...   ?  |->  iwrap(PC,Ins:Instr) ...</ ic > 
     < ihit > H:Int32 =>  H +Int32  1 </ ihit > 
     < t > T:Int32 =>  T +Int32  hittime </ t > : KSentence . 


mb rule < k >  geti(PC:Int32) =>  imiss(PC) </ k > 
     < ic >...   ICpc:Int32 |->  iwrap(X:Int32, ? )  ...</ ic > 
     if (ICpc ==Bool  PC %Int32  icachesize) andBool (X =/=Bool  PC) : KSentence . 

mb rule < k >  imissSolved(PC:Int32, Ins:Instr) =>  incPC(PC) ~>  Ins </ k > 
     < ic >...   ICpc:Int32 |->  (  ?  =>  iwrap(PC,Ins))  ...</ ic > 
     < imiss > M1:Int32 =>  M1 +Int32  1 </ imiss > 
     < t > T:Int32 =>  T +Int32  misstime </ t > 
     if (ICpc ==Bool  PC %Int32  icachesize) : KSentence .

     


    
 
       
       
         
         


     
     
        

        
              
         
         
            
           
     
        
             
         
         
         

var K2 : K . var T : Int32 . var X : Int32 . var Ins : Instr . var PC : Int32 . var H : Int32 . var M1 : Int32 . var M : Map . var K1 : K . var ICpc : Int32 .  ops ihit profile k ic imiss : -> CellLabel .  endm


