kmod STRICT-JAVASCRIPT-SYNTAX 
	is including PL-INT + PL-FLOAT + PL-STRING + PL-ID
	
	syntax Name ::= Id
	
	syntax Label ::= Id
	
	syntax Exp ::= Literal
			--- | ( Exp )
			| TargetExp | InvocationExp 
			| NewExp | DeleteExp 
			| UnaryExp | BinaryExp | TernaryExp 
			
	
	syntax Literal ::= Bool | Int | String | Float 
			| ObjectLiteral | ArrayLiteral --- | FunctionLiteral
	
	syntax Element ::= Exp | Property | Argument | --- ActionClause | VarDeclaration | Parameter

	syntax List{Element} ::= Element | .List{Element} 
			| List{Element} , List{Element} [prec 70 assoc id: .List{Element}]


	syntax ObjectLiteral ::= { List{Element} } --- { Properties }
	 
	--- syntax Properties ::= List{Element}
	
	syntax PropertyName ::= String | Name 
	
	syntax Property ::= PropertyName : Exp
	
	syntax ArrayLiteral ::= [ List{Element} ]
	
	syntax TargetExp ::= Name | RefinementExp
	
	syntax RefinementExp ::=  
			  Exp . Name   [prec 23 gather(E e) strict]
			| Exp [ Exp ]  [prec 23 gather(E &) strict]
	
	syntax InvocationExp ::= Exp ( List{Element} ) [prec 23 gather(E &) strict] --- Arguments
	
	syntax Argument ::= Exp
	 
	--- syntax Arguments ::= List{Element}
	
	syntax NewExp ::= new InvocationExp [prec 27 strict]

	syntax DeleteExp ::= delete TargetExp [prec 29 strict]
	
	
	syntax UnaryExp ::=
			  typeof Exp [prec 29 strict]
			| `! Exp     [prec 29 strict]
			| + Exp      [prec 29 strict]
			| - Exp      [prec 29 strict]

	syntax BinaryExp ::= 
			  Exp * Exp  [prec 31 gather (E e) format(d b o d) strict]
			| Exp / Exp  [prec 31 gather (E e) format(d b o d) strict]
			| Exp % Exp  [prec 31 gather (E e) format(d b o d) strict]

			| Exp + Exp  [prec 33 gather (E e) format(d b o d) strict]
			| Exp - Exp  [prec 33 gather (E e) format(d b o d) strict]

			| Exp < Exp  [prec 37 format(d b o d) strict] --- strict(1)
			| Exp <= Exp [prec 37 format(d b o d) strict] --- strict(1)
			| Exp > Exp  [prec 37 format(d b o d) strict] --- strict(1)
			| Exp >= Exp [prec 37 format(d b o d) strict] --- strict(1)
			| Exp in Exp [prec 37 format(d b o d) strict]
			| Exp instanceof Exp [prec 37 format(d b o d) strict]

			| Exp == Exp  [prec 41 format(d b o d) strict]
			| Exp != Exp  [prec 41 format(d b o d) strict]
			| Exp === Exp [prec 41 format(d b o d) strict]
			| Exp !== Exp [prec 41 format(d b o d) strict]

			| Exp && Exp [prec 45 format(d b o d) strict]

			| Exp || Exp [prec 47 format(d b o d) strict]

	syntax TernaryExp ::= 
			  Exp `? Exp : Exp [prec 55 gather(e & E) format (d b o b o d) strict(1)]



	syntax RValue ::= Exp | AssignmentClause

	syntax SimpleAssignmentClause ::= Name = Exp [prec 66 gather(e E) strict(2)] --- gather(e &)

	syntax AssignmentClause ::= SimpleAssignmentClause
			| TargetExp  = RValue [prec 66 gather(e E) strict]
			| TargetExp += RValue [prec 66 gather(e E) strict]
			| TargetExp -= RValue [prec 66 gather(e E) strict]
			| TargetExp *= RValue [prec 66 gather(e E) strict]
			| TargetExp /= RValue [prec 66 gather(e E) strict]

	
	syntax ActionClause ::= InvocationExp | DeleteExp | AssignmentClause





	--- syntax Fragment ::= ExecutionStmt | CaseMatch
	--- 
	--- syntax NeList{Fragment} ::= Fragment 
	--- 		| NeList{Fragment} List{Fragment} [prec 111 gather(e E) id: .List{Fragment}]
	--- 		| List{Fragment} NeList{Fragment} [prec 111 gather(e E) id: .List{Fragment}]
	--- 		
	--- syntax List{Fragment} ::= Fragment | .List{Fragment} | NeList{Fragment}
	--- 		| List{Fragment} List{Fragment} [prec 111 gather(e E) id: .List{Fragment}]



	syntax ExecutionStmt ::= EmptyStmt | ActionStmt | DisruptiveStmt 
			--- | SwitchStmt
	
	syntax List{ExecutionStmt} ::= ExecutionStmt | .List{ExecutionStmt} 
			| List{ExecutionStmt} List{ExecutionStmt} [prec 111 gather(e E) id: .List{ExecutionStmt}]
	

	syntax EmptyStmt ::=  ;
			
	syntax ActionStmt ::= ActionClause ; [prec 99 gather(e) strict]  --- gather(e) 
	
	syntax DisruptiveStmt ::= ReturnStmt | BreakStmt | ThrowStmt 
	
	syntax ReturnStmt ::= return ;
			| return Exp ;
	
	syntax BreakStmt ::= break ;
			| break Label ;
	
	syntax ThrowStmt ::= throw Exp ;
	
	--- c E : S
	--- c E :c E : S
	--- c E :c E :c E : S
	--- 
	syntax CaseMatch ::= case Exp : 
	
	syntax List{CaseMatch} ::= CaseMatch
			| List{CaseMatch} List{CaseMatch} [prec 111 gather(e E) id: .List{CaseMatch}]

	--- syntax Case ::= List{CaseMatch} List{ExecutionStmt}
	--- 
	--- syntax ExitingCase ::= Case DisruptiveStmt
	--- 
	--- syntax DefaultCase ::= default : List{ExecutionStmt}
	--- 
	--- syntax List{ExitingCase} ::= ExitingCase
	--- 		| List{ExitingCase} List{ExitingCase}
	--- 
	--- syntax List{Case} ::= Case
	--- 		| List{ExitingCase} Case
	--- 		| List{ExitingCase} DefaultCase
	--- 
	--- syntax SwitchStmt ::= switch ( Exp ) { List{Case} } 

endkm
