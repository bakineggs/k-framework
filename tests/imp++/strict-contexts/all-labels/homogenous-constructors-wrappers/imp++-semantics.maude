mod IMP++-SEMANTICS01 is
  including CONFIG .
  including K-MAP-EXTRAS .
  including IMP++-SYNTAX01 .
  including K-WRAPPERS .
  op `[_;_`] : Nat Nat -> KList .
  op env : -> CellLabel .
  op k : -> CellLabel .
  op nextLoc : -> CellLabel .
  op output : -> CellLabel .
  op restore : K -> K .
  op result : -> CellLabel .
  op store : -> CellLabel .
  op thread : -> CellLabel .
  op threads : -> CellLabel .
  eq <_>_</_>(T,__(Top:Set,<_>_</_>(output,Output:List,output),<_>_</_>(threads,.s,threads)),T)
    = <_>_</_>(result,Output:List,result) [metadata "keq"] .
  eq <_>_</_>(thread,__(Thread:Set,<_>_</_>(k,.k,k)),thread)
    = .s [metadata "keq"] .
  eq __(<_>_</_>(k,_~>_(restore(wmap_(Env:Map)),K:K),k),<_>_</_>(env,Env':Map,env))
    = __(<_>_</_>(k,K:K,k),<_>_</_>(env,Env:Map,env)) [metadata "keq"] .
  eq __(<_>_</_>(nextLoc,"Int < KResult"_(N:Nat),nextLoc),<_>_</_>(threads,__(AnyVar21:Set,<_>_</_>(thread,__(AnyVar22:Set,<_>_</_>(k,_~>_(vars_;_(wklist_(Xl:KList),S:K),K:K),k),<_>_</_>(env,Env:Map,env)),thread)),threads),<_>_</_>(store,Store:Map,store))
    = __(<_>_</_>(nextLoc,"Int < KResult"_(_+Int_(N:Nat,length_(Xl:KList))),nextLoc),<_>_</_>(threads,__(AnyVar21:Set,<_>_</_>(thread,__(AnyVar22:Set,<_>_</_>(k,_~>_(_~>_(S:K,restore(wmap_(Env:Map))),K:K),k),<_>_</_>(env,_`[_<-_`](Env:Map,Xl:KList,`[_;_`](N:Nat,_+Int_(N:Nat,length_(Xl:KList)))),env)),thread)),threads),<_>_</_>(store,__(Store:Map,m(`[_;_`](N:Nat,_+Int_(N:Nat,length_(Xl:KList))),"Int < KResult"_(0))),store)) [metadata "keq"] .
  eq `[_;_`](N1:Nat,N2:Nat)
    = if_then_else_fi(_>=Int_(N1:Nat,N2:Nat),.kl,_`,_("Int < KResult"_(N1:Nat),`[_;_`](sNat_(N1:Nat),N2:Nat))) [metadata "keq"] .
  rl skip
    => .k [metadata "krl"] .
  rl <_>_</_>(k,_~>_(halt,K:K),k)
    => <_>_</_>(k,.k,k) [metadata "krl"] .
  rl <_>_</_>(k,_~>_(while_do_(B:K,S:K),K:K),k)
    => <_>_</_>(k,_~>_(if_then_else_(B:K,_;_(S:K,while_do_(B:K,S:K)),skip),K:K),k) [metadata "krl"] .
  rl <_>_</_>(thread,__(Thread:Set,<_>_</_>(k,_~>_(spawn_(S:K),K:K),k),<_>_</_>(env,Env:Map,env)),thread)
    => __(<_>_</_>(thread,__(<_>_</_>(k,S:K,k),<_>_</_>(env,Env:Map,env)),thread),<_>_</_>(thread,__(Thread:Set,<_>_</_>(k,K:K,k),<_>_</_>(env,Env:Map,env)),thread)) [metadata "krl"] .
  rl _+_("Int < KResult"_(I1:Int),"Int < KResult"_(I2:Int))
    => "Int < KResult"_(_+Int_(I1:Int,I2:Int)) [metadata "krl"] .
  rl _;_(S1:K,S2:K)
    => _~>_(S1:K,S2:K) [metadata "krl"] .
  rl _<=_("Int < KResult"_(I1:Int),"Int < KResult"_(I2:Int))
    => "Bool < KResult"_(_<=Int_(I1:Int,I2:Int)) [metadata "krl"] .
  rl __(<_>_</_>(output,Output:List,output),<_>_</_>(threads,__(AnyVar7:Set,<_>_</_>(thread,__(AnyVar8:Set,<_>_</_>(k,_~>_(print_("Int < KResult"_(I:Int)),K:K),k)),thread)),threads))
    => __(<_>_</_>(output,_`,_(Output:List,l("Int < KResult"_(I:Int))),output),<_>_</_>(threads,__(AnyVar7:Set,<_>_</_>(thread,__(AnyVar8:Set,<_>_</_>(k,K:K,k)),thread)),threads)) [metadata "krl"] .
  rl __(<_>_</_>(threads,__(AnyVar12:Set,<_>_</_>(thread,__(AnyVar13:Set,<_>_</_>(k,_~>_("VarId < KProper"_(X:VarId),K:K),k),<_>_</_>(env,__(Env:Map,m("VarId < KProper"_(X:VarId),"Int < KResult"_(L:Int))),env)),thread)),threads),<_>_</_>(store,__(Store:Map,m("Int < KResult"_(L:Int),"Int < KResult"_(I:Int))),store))
    => __(<_>_</_>(threads,__(AnyVar12:Set,<_>_</_>(thread,__(AnyVar13:Set,<_>_</_>(k,_~>_("Int < KResult"_(I:Int),K:K),k),<_>_</_>(env,__(Env:Map,m("VarId < KProper"_(X:VarId),"Int < KResult"_(L:Int))),env)),thread)),threads),<_>_</_>(store,__(Store:Map,m("Int < KResult"_(L:Int),"Int < KResult"_(I:Int))),store)) [metadata "krl"] .
  rl __(<_>_</_>(threads,__(AnyVar13:Set,<_>_</_>(thread,__(AnyVar14:Set,<_>_</_>(k,_~>_(++_("VarId < KProper"_(X:VarId)),K:K),k),<_>_</_>(env,__(Env:Map,m("VarId < KProper"_(X:VarId),"Int < KResult"_(L:Int))),env)),thread)),threads),<_>_</_>(store,__(Store:Map,m("Int < KResult"_(L:Int),"Int < KResult"_(I:Int))),store))
    => __(<_>_</_>(threads,__(AnyVar13:Set,<_>_</_>(thread,__(AnyVar14:Set,<_>_</_>(k,_~>_("Int < KResult"_(_+Int_(I:Int,1)),K:K),k),<_>_</_>(env,__(Env:Map,m("VarId < KProper"_(X:VarId),"Int < KResult"_(L:Int))),env)),thread)),threads),<_>_</_>(store,__(Store:Map,m("Int < KResult"_(L:Int),"Int < KResult"_(_+Int_(I:Int,1)))),store)) [metadata "krl"] .
  rl __(<_>_</_>(threads,__(AnyVar13:Set,<_>_</_>(thread,__(AnyVar14:Set,<_>_</_>(k,_~>_(_:=_("VarId < KProper"_(X:VarId),"Int < KResult"_(I1:Int)),K:K),k),<_>_</_>(env,__(Env:Map,m("VarId < KProper"_(X:VarId),"Int < KResult"_(L:Int))),env)),thread)),threads),<_>_</_>(store,__(Store:Map,m("Int < KResult"_(L:Int),"Int < KResult"_(I2:Int))),store))
    => __(<_>_</_>(threads,__(AnyVar13:Set,<_>_</_>(thread,__(AnyVar14:Set,<_>_</_>(k,K:K,k),<_>_</_>(env,__(Env:Map,m("VarId < KProper"_(X:VarId),"Int < KResult"_(L:Int))),env)),thread)),threads),<_>_</_>(store,__(Store:Map,m("Int < KResult"_(L:Int),"Int < KResult"_(I1:Int))),store)) [metadata "krl"] .
  rl _and_("Bool < KResult"_(false),B:K)
    => "Bool < KResult"_(false) [metadata "krl"] .
  rl _and_("Bool < KResult"_(true),B:K)
    => B:K [metadata "krl"] .
  rl if_then_else_("Bool < KResult"_(false),S1:K,S2:K)
    => S2:K [metadata "krl"] .
  rl if_then_else_("Bool < KResult"_(true),S1:K,S2:K)
    => S1:K [metadata "krl"] .
  rl not_("Bool < KResult"_(T:Bool))
    => "Bool < KResult"_(notBool_(T:Bool)) [metadata "krl"] .
  crl _/_("Int < KResult"_(I1:Int),"Int < KResult"_(I2:Int))
    => "Int < KResult"_(_/Int_(I1:Int,I2:Int))
    if _=/=Bool_(I2:Int,0)= true [metadata "krl"] .
endm
